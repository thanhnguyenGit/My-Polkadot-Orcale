{
  "V14": {
    "types": {
      "types": [
        {
          "id": 0,
          "type": {
            "path": [
              "sp_core",
              "crypto",
              "AccountId32"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "[u8; 32]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 1,
          "type": {
            "def": {
              "array": {
                "len": 32,
                "type": 2
              }
            }
          }
        },
        {
          "id": 2,
          "type": {
            "def": {
              "primitive": "u8"
            }
          }
        },
        {
          "id": 3,
          "type": {
            "path": [
              "frame_system",
              "AccountInfo"
            ],
            "params": [
              {
                "name": "Nonce",
                "type": 4
              },
              {
                "name": "AccountData",
                "type": 5
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": 4,
                    "typeName": "Nonce"
                  },
                  {
                    "name": "consumers",
                    "type": 4,
                    "typeName": "RefCount"
                  },
                  {
                    "name": "providers",
                    "type": 4,
                    "typeName": "RefCount"
                  },
                  {
                    "name": "sufficients",
                    "type": 4,
                    "typeName": "RefCount"
                  },
                  {
                    "name": "data",
                    "type": 5,
                    "typeName": "AccountData"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 4,
          "type": {
            "def": {
              "primitive": "u32"
            }
          }
        },
        {
          "id": 5,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "AccountData"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "free",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "reserved",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "frozen",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "flags",
                    "type": 7,
                    "typeName": "ExtraFlags"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 6,
          "type": {
            "def": {
              "primitive": "u128"
            }
          }
        },
        {
          "id": 7,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "ExtraFlags"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 6,
                    "typeName": "u128"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 8,
          "type": {
            "def": {
              "primitive": "bool"
            }
          }
        },
        {
          "id": 9,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 10
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 10,
                    "typeName": "T"
                  },
                  {
                    "name": "operational",
                    "type": 10,
                    "typeName": "T"
                  },
                  {
                    "name": "mandatory",
                    "type": 10,
                    "typeName": "T"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 10,
          "type": {
            "path": [
              "sp_weights",
              "weight_v2",
              "Weight"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "ref_time",
                    "type": 11,
                    "typeName": "u64"
                  },
                  {
                    "name": "proof_size",
                    "type": 11,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 11,
          "type": {
            "def": {
              "compact": {
                "type": 12
              }
            }
          }
        },
        {
          "id": 12,
          "type": {
            "def": {
              "primitive": "u64"
            }
          }
        },
        {
          "id": 13,
          "type": {
            "path": [
              "primitive_types",
              "H256"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "[u8; 32]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 14,
          "type": {
            "def": {
              "sequence": {
                "type": 2
              }
            }
          }
        },
        {
          "id": 15,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "Digest"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "logs",
                    "type": 16,
                    "typeName": "Vec<DigestItem>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 16,
          "type": {
            "def": {
              "sequence": {
                "type": 17
              }
            }
          }
        },
        {
          "id": 17,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "DigestItem"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "PreRuntime",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "ConsensusEngineId"
                      },
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "Consensus",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "ConsensusEngineId"
                      },
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Seal",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "ConsensusEngineId"
                      },
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Other",
                    "fields": [
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "RuntimeEnvironmentUpdated",
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 18,
          "type": {
            "def": {
              "array": {
                "len": 4,
                "type": 2
              }
            }
          }
        },
        {
          "id": 19,
          "type": {
            "def": {
              "sequence": {
                "type": 20
              }
            }
          }
        },
        {
          "id": 20,
          "type": {
            "path": [
              "frame_system",
              "EventRecord"
            ],
            "params": [
              {
                "name": "E",
                "type": 21
              },
              {
                "name": "T",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "phase",
                    "type": 197,
                    "typeName": "Phase"
                  },
                  {
                    "name": "event",
                    "type": 21,
                    "typeName": "E"
                  },
                  {
                    "name": "topics",
                    "type": 178,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 21,
          "type": {
            "path": [
              "shiden_runtime",
              "RuntimeEvent"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "System",
                    "fields": [
                      {
                        "type": 22,
                        "typeName": "frame_system::Event<Runtime>"
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "Utility",
                    "fields": [
                      {
                        "type": 32,
                        "typeName": "pallet_utility::Event"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "Identity",
                    "fields": [
                      {
                        "type": 35,
                        "typeName": "pallet_identity::Event<Runtime>"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "Multisig",
                    "fields": [
                      {
                        "type": 37,
                        "typeName": "pallet_multisig::Event<Runtime>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "Proxy",
                    "fields": [
                      {
                        "type": 39,
                        "typeName": "pallet_proxy::Event<Runtime>"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "ParachainSystem",
                    "fields": [
                      {
                        "type": 42,
                        "typeName": "cumulus_pallet_parachain_system::Event<Runtime>"
                      }
                    ],
                    "index": 20
                  },
                  {
                    "name": "TransactionPayment",
                    "fields": [
                      {
                        "type": 44,
                        "typeName": "pallet_transaction_payment::Event<Runtime>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "Balances",
                    "fields": [
                      {
                        "type": 45,
                        "typeName": "pallet_balances::Event<Runtime>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "Vesting",
                    "fields": [
                      {
                        "type": 47,
                        "typeName": "pallet_vesting::Event<Runtime>"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "Inflation",
                    "fields": [
                      {
                        "type": 48,
                        "typeName": "pallet_inflation::Event<Runtime>"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "DappStaking",
                    "fields": [
                      {
                        "type": 54,
                        "typeName": "pallet_dapp_staking::Event<Runtime>"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "type": 70,
                        "typeName": "pallet_assets::Event<Runtime>"
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "PriceAggregator",
                    "fields": [
                      {
                        "type": 71,
                        "typeName": "pallet_price_aggregator::Event<Runtime>"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "Oracle",
                    "fields": [
                      {
                        "type": 73,
                        "typeName": "orml_oracle::Event<Runtime>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "OracleMembership",
                    "fields": [
                      {
                        "type": 77,
                        "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "CollatorSelection",
                    "fields": [
                      {
                        "type": 78,
                        "typeName": "pallet_collator_selection::Event<Runtime>"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "Session",
                    "fields": [
                      {
                        "type": 80,
                        "typeName": "pallet_session::Event"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "XcmpQueue",
                    "fields": [
                      {
                        "type": 81,
                        "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>"
                      }
                    ],
                    "index": 50
                  },
                  {
                    "name": "PolkadotXcm",
                    "fields": [
                      {
                        "type": 82,
                        "typeName": "pallet_xcm::Event<Runtime>"
                      }
                    ],
                    "index": 51
                  },
                  {
                    "name": "CumulusXcm",
                    "fields": [
                      {
                        "type": 169,
                        "typeName": "cumulus_pallet_xcm::Event<Runtime>"
                      }
                    ],
                    "index": 52
                  },
                  {
                    "name": "XcAssetConfig",
                    "fields": [
                      {
                        "type": 170,
                        "typeName": "pallet_xc_asset_config::Event<Runtime>"
                      }
                    ],
                    "index": 54
                  },
                  {
                    "name": "XTokens",
                    "fields": [
                      {
                        "type": 171,
                        "typeName": "orml_xtokens::Event<Runtime>"
                      }
                    ],
                    "index": 55
                  },
                  {
                    "name": "MessageQueue",
                    "fields": [
                      {
                        "type": 172,
                        "typeName": "pallet_message_queue::Event<Runtime>"
                      }
                    ],
                    "index": 56
                  },
                  {
                    "name": "EVM",
                    "fields": [
                      {
                        "type": 176,
                        "typeName": "pallet_evm::Event<Runtime>"
                      }
                    ],
                    "index": 60
                  },
                  {
                    "name": "Ethereum",
                    "fields": [
                      {
                        "type": 179,
                        "typeName": "pallet_ethereum::Event"
                      }
                    ],
                    "index": 61
                  },
                  {
                    "name": "DynamicEvmBaseFee",
                    "fields": [
                      {
                        "type": 188,
                        "typeName": "pallet_dynamic_evm_base_fee::Event"
                      }
                    ],
                    "index": 63
                  },
                  {
                    "name": "Contracts",
                    "fields": [
                      {
                        "type": 191,
                        "typeName": "pallet_contracts::Event<Runtime>"
                      }
                    ],
                    "index": 70
                  },
                  {
                    "name": "Sudo",
                    "fields": [
                      {
                        "type": 194,
                        "typeName": "pallet_sudo::Event<Runtime>"
                      }
                    ],
                    "index": 99
                  },
                  {
                    "name": "MultiBlockMigrations",
                    "fields": [
                      {
                        "type": 195,
                        "typeName": "pallet_migrations::Event<Runtime>"
                      }
                    ],
                    "index": 120
                  }
                ]
              }
            }
          }
        },
        {
          "id": 22,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ExtrinsicSuccess",
                    "fields": [
                      {
                        "name": "dispatch_info",
                        "type": 23,
                        "typeName": "DispatchEventInfo"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An extrinsic completed successfully."
                    ]
                  },
                  {
                    "name": "ExtrinsicFailed",
                    "fields": [
                      {
                        "name": "dispatch_error",
                        "type": 26,
                        "typeName": "DispatchError"
                      },
                      {
                        "name": "dispatch_info",
                        "type": 23,
                        "typeName": "DispatchEventInfo"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An extrinsic failed."
                    ]
                  },
                  {
                    "name": "CodeUpdated",
                    "index": 2,
                    "docs": [
                      "`:code` was updated."
                    ]
                  },
                  {
                    "name": "NewAccount",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A new account was created."
                    ]
                  },
                  {
                    "name": "KilledAccount",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "An account was reaped."
                    ]
                  },
                  {
                    "name": "Remarked",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "On on-chain remark happened."
                    ]
                  },
                  {
                    "name": "UpgradeAuthorized",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      },
                      {
                        "name": "check_version",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "An upgrade was authorized."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Event for the System pallet."
            ]
          }
        },
        {
          "id": 23,
          "type": {
            "path": [
              "frame_system",
              "DispatchEventInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "weight",
                    "type": 10,
                    "typeName": "Weight"
                  },
                  {
                    "name": "class",
                    "type": 24,
                    "typeName": "DispatchClass"
                  },
                  {
                    "name": "pays_fee",
                    "type": 25,
                    "typeName": "Pays"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 24,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "DispatchClass"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Normal",
                    "index": 0
                  },
                  {
                    "name": "Operational",
                    "index": 1
                  },
                  {
                    "name": "Mandatory",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 25,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "Pays"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Yes",
                    "index": 0
                  },
                  {
                    "name": "No",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 26,
          "type": {
            "path": [
              "sp_runtime",
              "DispatchError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Other",
                    "index": 0
                  },
                  {
                    "name": "CannotLookup",
                    "index": 1
                  },
                  {
                    "name": "BadOrigin",
                    "index": 2
                  },
                  {
                    "name": "Module",
                    "fields": [
                      {
                        "type": 27,
                        "typeName": "ModuleError"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "ConsumerRemaining",
                    "index": 4
                  },
                  {
                    "name": "NoProviders",
                    "index": 5
                  },
                  {
                    "name": "TooManyConsumers",
                    "index": 6
                  },
                  {
                    "name": "Token",
                    "fields": [
                      {
                        "type": 28,
                        "typeName": "TokenError"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "Arithmetic",
                    "fields": [
                      {
                        "type": 29,
                        "typeName": "ArithmeticError"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "Transactional",
                    "fields": [
                      {
                        "type": 30,
                        "typeName": "TransactionalError"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "Exhausted",
                    "index": 10
                  },
                  {
                    "name": "Corruption",
                    "index": 11
                  },
                  {
                    "name": "Unavailable",
                    "index": 12
                  },
                  {
                    "name": "RootNotAllowed",
                    "index": 13
                  },
                  {
                    "name": "Trie",
                    "fields": [
                      {
                        "type": 31,
                        "typeName": "TrieError"
                      }
                    ],
                    "index": 14
                  }
                ]
              }
            }
          }
        },
        {
          "id": 27,
          "type": {
            "path": [
              "sp_runtime",
              "ModuleError"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "error",
                    "type": 18,
                    "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 28,
          "type": {
            "path": [
              "sp_runtime",
              "TokenError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "FundsUnavailable",
                    "index": 0
                  },
                  {
                    "name": "OnlyProvider",
                    "index": 1
                  },
                  {
                    "name": "BelowMinimum",
                    "index": 2
                  },
                  {
                    "name": "CannotCreate",
                    "index": 3
                  },
                  {
                    "name": "UnknownAsset",
                    "index": 4
                  },
                  {
                    "name": "Frozen",
                    "index": 5
                  },
                  {
                    "name": "Unsupported",
                    "index": 6
                  },
                  {
                    "name": "CannotCreateHold",
                    "index": 7
                  },
                  {
                    "name": "NotExpendable",
                    "index": 8
                  },
                  {
                    "name": "Blocked",
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 29,
          "type": {
            "path": [
              "sp_arithmetic",
              "ArithmeticError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Underflow",
                    "index": 0
                  },
                  {
                    "name": "Overflow",
                    "index": 1
                  },
                  {
                    "name": "DivisionByZero",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 30,
          "type": {
            "path": [
              "sp_runtime",
              "TransactionalError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "LimitReached",
                    "index": 0
                  },
                  {
                    "name": "NoLayer",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 31,
          "type": {
            "path": [
              "sp_runtime",
              "proving_trie",
              "TrieError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidStateRoot",
                    "index": 0
                  },
                  {
                    "name": "IncompleteDatabase",
                    "index": 1
                  },
                  {
                    "name": "ValueAtIncompleteKey",
                    "index": 2
                  },
                  {
                    "name": "DecoderError",
                    "index": 3
                  },
                  {
                    "name": "InvalidHash",
                    "index": 4
                  },
                  {
                    "name": "DuplicateKey",
                    "index": 5
                  },
                  {
                    "name": "ExtraneousNode",
                    "index": 6
                  },
                  {
                    "name": "ExtraneousValue",
                    "index": 7
                  },
                  {
                    "name": "ExtraneousHashReference",
                    "index": 8
                  },
                  {
                    "name": "InvalidChildReference",
                    "index": 9
                  },
                  {
                    "name": "ValueMismatch",
                    "index": 10
                  },
                  {
                    "name": "IncompleteProof",
                    "index": 11
                  },
                  {
                    "name": "RootMismatch",
                    "index": 12
                  },
                  {
                    "name": "DecodeError",
                    "index": 13
                  }
                ]
              }
            }
          }
        },
        {
          "id": 32,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BatchInterrupted",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "error",
                        "type": 26,
                        "typeName": "DispatchError"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                      "well as the error."
                    ]
                  },
                  {
                    "name": "BatchCompleted",
                    "index": 1,
                    "docs": [
                      "Batch of dispatches completed fully with no error."
                    ]
                  },
                  {
                    "name": "BatchCompletedWithErrors",
                    "index": 2,
                    "docs": [
                      "Batch of dispatches completed but has errors."
                    ]
                  },
                  {
                    "name": "ItemCompleted",
                    "index": 3,
                    "docs": [
                      "A single item within a Batch of dispatches has completed with no error."
                    ]
                  },
                  {
                    "name": "ItemFailed",
                    "fields": [
                      {
                        "name": "error",
                        "type": 26,
                        "typeName": "DispatchError"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A single item within a Batch of dispatches has completed with error."
                    ]
                  },
                  {
                    "name": "DispatchedAs",
                    "fields": [
                      {
                        "name": "result",
                        "type": 33,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A call was dispatched."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 33,
          "type": {
            "path": [
              "Result"
            ],
            "params": [
              {
                "name": "T",
                "type": 34
              },
              {
                "name": "E",
                "type": 26
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ok",
                    "fields": [
                      {
                        "type": 34
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Err",
                    "fields": [
                      {
                        "type": 26
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 34,
          "type": {
            "def": {
              "tuple": []
            }
          }
        },
        {
          "id": 35,
          "type": {
            "path": [
              "pallet_identity",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "IdentitySet",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A name was set or reset (which will remove all judgements)."
                    ]
                  },
                  {
                    "name": "IdentityCleared",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A name was cleared, and the given balance returned."
                    ]
                  },
                  {
                    "name": "IdentityKilled",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A name was removed and the given balance slashed."
                    ]
                  },
                  {
                    "name": "JudgementRequested",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "registrar_index",
                        "type": 4,
                        "typeName": "RegistrarIndex"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A judgement was asked from a registrar."
                    ]
                  },
                  {
                    "name": "JudgementUnrequested",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "registrar_index",
                        "type": 4,
                        "typeName": "RegistrarIndex"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A judgement request was retracted."
                    ]
                  },
                  {
                    "name": "JudgementGiven",
                    "fields": [
                      {
                        "name": "target",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "registrar_index",
                        "type": 4,
                        "typeName": "RegistrarIndex"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A judgement was given by a registrar."
                    ]
                  },
                  {
                    "name": "RegistrarAdded",
                    "fields": [
                      {
                        "name": "registrar_index",
                        "type": 4,
                        "typeName": "RegistrarIndex"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "A registrar was added."
                    ]
                  },
                  {
                    "name": "SubIdentityAdded",
                    "fields": [
                      {
                        "name": "sub",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "main",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "A sub-identity was added to an identity and the deposit paid."
                    ]
                  },
                  {
                    "name": "SubIdentitiesSet",
                    "fields": [
                      {
                        "name": "main",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "number_of_subs",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "new_deposit",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "An account's sub-identities were set (in bulk)."
                    ]
                  },
                  {
                    "name": "SubIdentityRenamed",
                    "fields": [
                      {
                        "name": "sub",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "main",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "A given sub-account's associated name was changed by its super-identity."
                    ]
                  },
                  {
                    "name": "SubIdentityRemoved",
                    "fields": [
                      {
                        "name": "sub",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "main",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "A sub-identity was removed from an identity and the deposit freed."
                    ]
                  },
                  {
                    "name": "SubIdentityRevoked",
                    "fields": [
                      {
                        "name": "sub",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "main",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "A sub-identity was cleared, and the given deposit repatriated from the",
                      "main identity account to the sub-identity account."
                    ]
                  },
                  {
                    "name": "AuthorityAdded",
                    "fields": [
                      {
                        "name": "authority",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "A username authority was added."
                    ]
                  },
                  {
                    "name": "AuthorityRemoved",
                    "fields": [
                      {
                        "name": "authority",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "A username authority was removed."
                    ]
                  },
                  {
                    "name": "UsernameSet",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "A username was set for `who`."
                    ]
                  },
                  {
                    "name": "UsernameQueued",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      },
                      {
                        "name": "expiration",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "A username was queued, but `who` must accept it prior to `expiration`."
                    ]
                  },
                  {
                    "name": "PreapprovalExpired",
                    "fields": [
                      {
                        "name": "whose",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "A queued username passed its expiration without being claimed and was removed."
                    ]
                  },
                  {
                    "name": "PrimaryUsernameSet",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "A username was set as a primary and can be looked up from `who`."
                    ]
                  },
                  {
                    "name": "DanglingUsernameRemoved",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "A dangling username (as in, a username corresponding to an account that has removed its",
                      "identity) has been removed."
                    ]
                  },
                  {
                    "name": "UsernameUnbound",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "A username has been unbound."
                    ]
                  },
                  {
                    "name": "UsernameRemoved",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "A username has been removed."
                    ]
                  },
                  {
                    "name": "UsernameKilled",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "A username has been killed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 36,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 37,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewMultisig",
                    "fields": [
                      {
                        "name": "approving",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "multisig",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "CallHash"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A new multisig operation has begun."
                    ]
                  },
                  {
                    "name": "MultisigApproval",
                    "fields": [
                      {
                        "name": "approving",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "timepoint",
                        "type": 38,
                        "typeName": "Timepoint<BlockNumberFor<T>>"
                      },
                      {
                        "name": "multisig",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "CallHash"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A multisig operation has been approved by someone."
                    ]
                  },
                  {
                    "name": "MultisigExecuted",
                    "fields": [
                      {
                        "name": "approving",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "timepoint",
                        "type": 38,
                        "typeName": "Timepoint<BlockNumberFor<T>>"
                      },
                      {
                        "name": "multisig",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "CallHash"
                      },
                      {
                        "name": "result",
                        "type": 33,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A multisig operation has been executed."
                    ]
                  },
                  {
                    "name": "MultisigCancelled",
                    "fields": [
                      {
                        "name": "cancelling",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "timepoint",
                        "type": 38,
                        "typeName": "Timepoint<BlockNumberFor<T>>"
                      },
                      {
                        "name": "multisig",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "CallHash"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A multisig operation has been cancelled."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 38,
          "type": {
            "path": [
              "pallet_multisig",
              "Timepoint"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "height",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "index",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 39,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ProxyExecuted",
                    "fields": [
                      {
                        "name": "result",
                        "type": 33,
                        "typeName": "DispatchResult"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A proxy was executed correctly, with the given."
                    ]
                  },
                  {
                    "name": "PureCreated",
                    "fields": [
                      {
                        "name": "pure",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "proxy_type",
                        "type": 40,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "disambiguation_index",
                        "type": 41,
                        "typeName": "u16"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A pure account has been created by new proxy with given",
                      "disambiguation index and proxy type."
                    ]
                  },
                  {
                    "name": "Announced",
                    "fields": [
                      {
                        "name": "real",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "proxy",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "CallHashOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "An announcement was placed to make a call in the future."
                    ]
                  },
                  {
                    "name": "ProxyAdded",
                    "fields": [
                      {
                        "name": "delegator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegatee",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "proxy_type",
                        "type": 40,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A proxy was added."
                    ]
                  },
                  {
                    "name": "ProxyRemoved",
                    "fields": [
                      {
                        "name": "delegator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegatee",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "proxy_type",
                        "type": 40,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A proxy was removed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 40,
          "type": {
            "path": [
              "shiden_runtime",
              "ProxyType"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Any",
                    "index": 0
                  },
                  {
                    "name": "NonTransfer",
                    "index": 1
                  },
                  {
                    "name": "Balances",
                    "index": 2
                  },
                  {
                    "name": "Assets",
                    "index": 3
                  },
                  {
                    "name": "IdentityJudgement",
                    "index": 4
                  },
                  {
                    "name": "CancelProxy",
                    "index": 5
                  },
                  {
                    "name": "DappStaking",
                    "index": 6
                  },
                  {
                    "name": "StakerRewardClaim",
                    "index": 7
                  }
                ]
              }
            }
          }
        },
        {
          "id": 41,
          "type": {
            "def": {
              "primitive": "u16"
            }
          }
        },
        {
          "id": 42,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ValidationFunctionStored",
                    "index": 0,
                    "docs": [
                      "The validation function has been scheduled to apply."
                    ]
                  },
                  {
                    "name": "ValidationFunctionApplied",
                    "fields": [
                      {
                        "name": "relay_chain_block_num",
                        "type": 4,
                        "typeName": "RelayChainBlockNumber"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "The validation function was applied as of the contained relay chain block number."
                    ]
                  },
                  {
                    "name": "ValidationFunctionDiscarded",
                    "index": 2,
                    "docs": [
                      "The relay-chain aborted the upgrade process."
                    ]
                  },
                  {
                    "name": "DownwardMessagesReceived",
                    "fields": [
                      {
                        "name": "count",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Some downward messages have been received and will be processed."
                    ]
                  },
                  {
                    "name": "DownwardMessagesProcessed",
                    "fields": [
                      {
                        "name": "weight_used",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "dmq_head",
                        "type": 13,
                        "typeName": "relay_chain::Hash"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Downward messages were processed using the given weight."
                    ]
                  },
                  {
                    "name": "UpwardMessageSent",
                    "fields": [
                      {
                        "name": "message_hash",
                        "type": 43,
                        "typeName": "Option<XcmHash>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "An upward message was sent to the relay chain."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 43,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 1
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 1
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 44,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TransactionFeePaid",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "actual_fee",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "tip",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                      "has been paid by `who`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 45,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Endowed",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "free_balance",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An account was created with some free balance."
                    ]
                  },
                  {
                    "name": "DustLost",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                      "resulting in an outright loss."
                    ]
                  },
                  {
                    "name": "Transfer",
                    "fields": [
                      {
                        "name": "from",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "to",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Transfer succeeded."
                    ]
                  },
                  {
                    "name": "BalanceSet",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "free",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A balance was set by root."
                    ]
                  },
                  {
                    "name": "Reserved",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Some balance was reserved (moved from free to reserved)."
                    ]
                  },
                  {
                    "name": "Unreserved",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Some balance was unreserved (moved from reserved to free)."
                    ]
                  },
                  {
                    "name": "ReserveRepatriated",
                    "fields": [
                      {
                        "name": "from",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "to",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "destination_status",
                        "type": 46,
                        "typeName": "Status"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Some balance was moved from the reserve of the first account to the second account.",
                      "Final argument indicates the destination balance type."
                    ]
                  },
                  {
                    "name": "Deposit",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Some amount was deposited (e.g. for transaction fees)."
                    ]
                  },
                  {
                    "name": "Withdraw",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Some amount was withdrawn from the account (e.g. for transaction fees)."
                    ]
                  },
                  {
                    "name": "Slashed",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Some amount was removed from the account (e.g. for misbehavior)."
                    ]
                  },
                  {
                    "name": "Minted",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Some amount was minted into an account."
                    ]
                  },
                  {
                    "name": "Burned",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Some amount was burned from an account."
                    ]
                  },
                  {
                    "name": "Suspended",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Some amount was suspended from an account (it can be restored later)."
                    ]
                  },
                  {
                    "name": "Restored",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Some amount was restored into an account."
                    ]
                  },
                  {
                    "name": "Upgraded",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "An account was upgraded."
                    ]
                  },
                  {
                    "name": "Issued",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Total issuance was increased by `amount`, creating a credit to be balanced."
                    ]
                  },
                  {
                    "name": "Rescinded",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Total issuance was decreased by `amount`, creating a debt to be balanced."
                    ]
                  },
                  {
                    "name": "Locked",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Some balance was locked."
                    ]
                  },
                  {
                    "name": "Unlocked",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Some balance was unlocked."
                    ]
                  },
                  {
                    "name": "Frozen",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Some balance was frozen."
                    ]
                  },
                  {
                    "name": "Thawed",
                    "fields": [
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Some balance was thawed."
                    ]
                  },
                  {
                    "name": "TotalIssuanceForced",
                    "fields": [
                      {
                        "name": "old",
                        "type": 6,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "new",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "The `TotalIssuance` was forcefully changed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 46,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "misc",
              "BalanceStatus"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Free",
                    "index": 0
                  },
                  {
                    "name": "Reserved",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 47,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "VestingUpdated",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "unvested",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "The amount vested has been updated. This could indicate a change in funds available.",
                      "The balance given is the amount which is left unvested (and thus locked)."
                    ]
                  },
                  {
                    "name": "VestingCompleted",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "An \\[account\\] has become fully vested."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 48,
          "type": {
            "path": [
              "pallet_inflation",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InflationParametersForceChanged",
                    "index": 0,
                    "docs": [
                      "Inflation parameters have been force changed. This will have effect on the next inflation recalculation."
                    ]
                  },
                  {
                    "name": "ForcedInflationRecalculation",
                    "fields": [
                      {
                        "name": "config",
                        "type": 49,
                        "typeName": "InflationConfiguration"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Inflation recalculation has been forced."
                    ]
                  },
                  {
                    "name": "NewInflationConfiguration",
                    "fields": [
                      {
                        "name": "config",
                        "type": 49,
                        "typeName": "InflationConfiguration"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "New inflation configuration has been set."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 49,
          "type": {
            "path": [
              "pallet_inflation",
              "InflationConfiguration"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "recalculation_era",
                    "type": 50,
                    "typeName": "EraNumber"
                  },
                  {
                    "name": "issuance_safety_cap",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "collator_reward_per_block",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "treasury_reward_per_block",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "dapp_reward_pool_per_era",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "base_staker_reward_pool_per_era",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "adjustable_staker_reward_pool_per_era",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "bonus_reward_pool_per_period",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "ideal_staking_rate",
                    "type": 52,
                    "typeName": "Perquintill"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 50,
          "type": {
            "def": {
              "compact": {
                "type": 4
              }
            }
          }
        },
        {
          "id": 51,
          "type": {
            "def": {
              "compact": {
                "type": 6
              }
            }
          }
        },
        {
          "id": 52,
          "type": {
            "def": {
              "compact": {
                "type": 53
              }
            }
          }
        },
        {
          "id": 53,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Perquintill"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 54,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MaintenanceMode",
                    "fields": [
                      {
                        "name": "enabled",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Maintenance mode has been either enabled or disabled."
                    ]
                  },
                  {
                    "name": "NewEra",
                    "fields": [
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraNumber"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "New era has started."
                    ]
                  },
                  {
                    "name": "NewSubperiod",
                    "fields": [
                      {
                        "name": "subperiod",
                        "type": 55,
                        "typeName": "Subperiod"
                      },
                      {
                        "name": "number",
                        "type": 4,
                        "typeName": "PeriodNumber"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "New subperiod has started."
                    ]
                  },
                  {
                    "name": "DAppRegistered",
                    "fields": [
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "dapp_id",
                        "type": 41,
                        "typeName": "DAppId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A smart contract has been registered for dApp staking"
                    ]
                  },
                  {
                    "name": "DAppRewardDestinationUpdated",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "beneficiary",
                        "type": 59,
                        "typeName": "Option<T::AccountId>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "dApp reward destination has been updated."
                    ]
                  },
                  {
                    "name": "DAppOwnerChanged",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "new_owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "dApp owner has been changed."
                    ]
                  },
                  {
                    "name": "DAppUnregistered",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraNumber"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "dApp has been unregistered"
                    ]
                  },
                  {
                    "name": "Locked",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Account has locked some amount into dApp staking."
                    ]
                  },
                  {
                    "name": "Unlocking",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Account has started the unlocking process for some amount."
                    ]
                  },
                  {
                    "name": "ClaimedUnlocked",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Account has claimed unlocked amount, removing the lock from it."
                    ]
                  },
                  {
                    "name": "Relock",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Account has relocked all of the unlocking chunks."
                    ]
                  },
                  {
                    "name": "Stake",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Account has staked some amount on a smart contract."
                    ]
                  },
                  {
                    "name": "Unstake",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Account has unstaked some amount from a smart contract."
                    ]
                  },
                  {
                    "name": "Reward",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraNumber"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Account has claimed some stake rewards."
                    ]
                  },
                  {
                    "name": "BonusReward",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "period",
                        "type": 4,
                        "typeName": "PeriodNumber"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Bonus reward has been paid out to a staker with an eligible bonus status."
                    ]
                  },
                  {
                    "name": "DAppReward",
                    "fields": [
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "tier_id",
                        "type": 2,
                        "typeName": "TierId"
                      },
                      {
                        "name": "rank",
                        "type": 2,
                        "typeName": "Rank"
                      },
                      {
                        "name": "era",
                        "type": 4,
                        "typeName": "EraNumber"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "dApp reward has been paid out to a beneficiary."
                    ]
                  },
                  {
                    "name": "UnstakeFromUnregistered",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Account has unstaked funds from an unregistered smart contract"
                    ]
                  },
                  {
                    "name": "ExpiredEntriesRemoved",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "count",
                        "type": 41,
                        "typeName": "u16"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Some expired stake entries have been removed from storage."
                    ]
                  },
                  {
                    "name": "Force",
                    "fields": [
                      {
                        "name": "forcing_type",
                        "type": 60,
                        "typeName": "ForcingType"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Privileged origin has forced a new era and possibly a subperiod to start from next block."
                    ]
                  },
                  {
                    "name": "StakeMoved",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "source_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "destination_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Account has moved some stake from a source smart contract to a destination smart contract."
                    ]
                  },
                  {
                    "name": "NewTierParameters",
                    "fields": [
                      {
                        "name": "params",
                        "type": 61,
                        "typeName": "TierParameters<T::NumberOfTiers>"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Tier parameters, used to calculate tier configuration, have been updated, and will be applicable from next era."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 55,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "Subperiod"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Voting",
                    "index": 0
                  },
                  {
                    "name": "BuildAndEarn",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 56,
          "type": {
            "path": [
              "astar_primitives",
              "dapp_staking",
              "SmartContract"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Evm",
                    "fields": [
                      {
                        "type": 57,
                        "typeName": "H160"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Wasm",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 57,
          "type": {
            "path": [
              "primitive_types",
              "H160"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 58,
                    "typeName": "[u8; 20]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 58,
          "type": {
            "def": {
              "array": {
                "len": 20,
                "type": 2
              }
            }
          }
        },
        {
          "id": 59,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 0
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 60,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "ForcingType"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Era",
                    "index": 0
                  },
                  {
                    "name": "Subperiod",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 61,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "TierParameters"
            ],
            "params": [
              {
                "name": "NT",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "reward_portion",
                    "type": 62,
                    "typeName": "BoundedVec<Permill, NT>"
                  },
                  {
                    "name": "slot_distribution",
                    "type": 62,
                    "typeName": "BoundedVec<Permill, NT>"
                  },
                  {
                    "name": "tier_thresholds",
                    "type": 65,
                    "typeName": "BoundedVec<TierThreshold, NT>"
                  },
                  {
                    "name": "slot_number_args",
                    "type": 69,
                    "typeName": "(u64, u64)"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 62,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 63
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 64,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 63,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Permill"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 64,
          "type": {
            "def": {
              "sequence": {
                "type": 63
              }
            }
          }
        },
        {
          "id": 65,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 66
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 68,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 66,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "TierThreshold"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "FixedPercentage",
                    "fields": [
                      {
                        "name": "required_percentage",
                        "type": 67,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "DynamicPercentage",
                    "fields": [
                      {
                        "name": "percentage",
                        "type": 67,
                        "typeName": "Perbill"
                      },
                      {
                        "name": "minimum_required_percentage",
                        "type": 67,
                        "typeName": "Perbill"
                      },
                      {
                        "name": "maximum_possible_percentage",
                        "type": 67,
                        "typeName": "Perbill"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 67,
          "type": {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Perbill"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 68,
          "type": {
            "def": {
              "sequence": {
                "type": 66
              }
            }
          }
        },
        {
          "id": 69,
          "type": {
            "def": {
              "tuple": [
                12,
                12
              ]
            }
          }
        },
        {
          "id": 70,
          "type": {
            "path": [
              "pallet_assets",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Created",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "creator",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Some asset class was created."
                    ]
                  },
                  {
                    "name": "Issued",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Some assets were issued."
                    ]
                  },
                  {
                    "name": "Transferred",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "from",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "to",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Some assets were transferred."
                    ]
                  },
                  {
                    "name": "Burned",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Some assets were destroyed."
                    ]
                  },
                  {
                    "name": "TeamChanged",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "issuer",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "admin",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "freezer",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "The management team changed."
                    ]
                  },
                  {
                    "name": "OwnerChanged",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "The owner changed."
                    ]
                  },
                  {
                    "name": "Frozen",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Some account `who` was frozen."
                    ]
                  },
                  {
                    "name": "Thawed",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Some account `who` was thawed."
                    ]
                  },
                  {
                    "name": "AssetFrozen",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Some asset `asset_id` was frozen."
                    ]
                  },
                  {
                    "name": "AssetThawed",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Some asset `asset_id` was thawed."
                    ]
                  },
                  {
                    "name": "AccountsDestroyed",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "accounts_destroyed",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "accounts_remaining",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Accounts were destroyed for given asset."
                    ]
                  },
                  {
                    "name": "ApprovalsDestroyed",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "approvals_destroyed",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "approvals_remaining",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Approvals were destroyed for given asset."
                    ]
                  },
                  {
                    "name": "DestructionStarted",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "An asset class is in the process of being destroyed."
                    ]
                  },
                  {
                    "name": "Destroyed",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "An asset class was destroyed."
                    ]
                  },
                  {
                    "name": "ForceCreated",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Some asset class was force-created."
                    ]
                  },
                  {
                    "name": "MetadataSet",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "symbol",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "decimals",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "is_frozen",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "New metadata has been set for an asset."
                    ]
                  },
                  {
                    "name": "MetadataCleared",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Metadata has been cleared for an asset."
                    ]
                  },
                  {
                    "name": "ApprovedTransfer",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "source",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegate",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "(Additional) funds have been approved for transfer to a destination account."
                    ]
                  },
                  {
                    "name": "ApprovalCancelled",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegate",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "An approval for account `delegate` was cancelled by `owner`."
                    ]
                  },
                  {
                    "name": "TransferredApproved",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "delegate",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "destination",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "An `amount` was transferred in its entirety from `owner` to `destination` by",
                      "the approved `delegate`."
                    ]
                  },
                  {
                    "name": "AssetStatusChanged",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "An asset has had its attributes changed by the `Force` origin."
                    ]
                  },
                  {
                    "name": "AssetMinBalanceChanged",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "new_min_balance",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "The min_balance of an asset has been updated by the asset owner."
                    ]
                  },
                  {
                    "name": "Touched",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "depositor",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Some account `who` was created with a deposit from `depositor`."
                    ]
                  },
                  {
                    "name": "Blocked",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 23,
                    "docs": [
                      "Some account `who` was blocked."
                    ]
                  },
                  {
                    "name": "Deposited",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 24,
                    "docs": [
                      "Some assets were deposited (e.g. for transaction fees)."
                    ]
                  },
                  {
                    "name": "Withdrawn",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "who",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 25,
                    "docs": [
                      "Some assets were withdrawn from the account (e.g. for transaction fees)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 71,
          "type": {
            "path": [
              "pallet_price_aggregator",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AverageAggregatedValue",
                    "fields": [
                      {
                        "name": "value",
                        "type": 72,
                        "typeName": "CurrencyAmount"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "New average native currency value has been calculated and pushed into the moving average buffer."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 72,
          "type": {
            "path": [
              "sp_arithmetic",
              "fixed_point",
              "FixedU128"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 6,
                    "typeName": "u128"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 73,
          "type": {
            "path": [
              "orml_oracle",
              "module",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewFeedData",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "values",
                        "type": 74,
                        "typeName": "Vec<(T::OracleKey, T::OracleValue)>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "New feed data is submitted."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 74,
          "type": {
            "def": {
              "sequence": {
                "type": 75
              }
            }
          }
        },
        {
          "id": 75,
          "type": {
            "def": {
              "tuple": [
                76,
                72
              ]
            }
          }
        },
        {
          "id": 76,
          "type": {
            "path": [
              "astar_primitives",
              "oracle",
              "CurrencyId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ASTR",
                    "index": 0
                  },
                  {
                    "name": "SDN",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 77,
          "type": {
            "path": [
              "pallet_membership",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MemberAdded",
                    "index": 0,
                    "docs": [
                      "The given member was added; see the transaction for who."
                    ]
                  },
                  {
                    "name": "MemberRemoved",
                    "index": 1,
                    "docs": [
                      "The given member was removed; see the transaction for who."
                    ]
                  },
                  {
                    "name": "MembersSwapped",
                    "index": 2,
                    "docs": [
                      "Two members were swapped; see the transaction for who."
                    ]
                  },
                  {
                    "name": "MembersReset",
                    "index": 3,
                    "docs": [
                      "The membership was reset; see the transaction for who the new set is."
                    ]
                  },
                  {
                    "name": "KeyChanged",
                    "index": 4,
                    "docs": [
                      "One of the members' keys changed."
                    ]
                  },
                  {
                    "name": "Dummy",
                    "index": 5,
                    "docs": [
                      "Phantom member, never used."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 78,
          "type": {
            "path": [
              "pallet_collator_selection",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewInvulnerables",
                    "fields": [
                      {
                        "type": 79,
                        "typeName": "Vec<T::AccountId>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "New invulnerables candidates were set."
                    ]
                  },
                  {
                    "name": "NewDesiredCandidates",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "The number of desired candidates was set."
                    ]
                  },
                  {
                    "name": "NewCandidacyBond",
                    "fields": [
                      {
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "The candidacy bond was set."
                    ]
                  },
                  {
                    "name": "CandidateAdded",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A new candidate joined."
                    ]
                  },
                  {
                    "name": "CandidateRemoved",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A candidate was removed."
                    ]
                  },
                  {
                    "name": "CandidateSlashed",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A candidate was slashed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 79,
          "type": {
            "def": {
              "sequence": {
                "type": 0
              }
            }
          }
        },
        {
          "id": 80,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewSession",
                    "fields": [
                      {
                        "name": "session_index",
                        "type": 4,
                        "typeName": "SessionIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "New session has happened. Note that the argument is the session index, not the",
                      "block number as the type might suggest."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 81,
          "type": {
            "path": [
              "cumulus_pallet_xcmp_queue",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "XcmpMessageSent",
                    "fields": [
                      {
                        "name": "message_hash",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An HRMP message was sent to a sibling parachain."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 82,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Attempted",
                    "fields": [
                      {
                        "name": "outcome",
                        "type": 83,
                        "typeName": "xcm::latest::Outcome"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Execution of an XCM message was attempted."
                    ]
                  },
                  {
                    "name": "Sent",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "destination",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "message",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A XCM message was sent."
                    ]
                  },
                  {
                    "name": "UnexpectedResponse",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Query response received which does not match a registered query. This may be because a",
                      "matching query was never registered, it may be because it is a duplicate response, or",
                      "because the query timed out."
                    ]
                  },
                  {
                    "name": "ResponseReady",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 111,
                        "typeName": "Response"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Query response has been received and is ready for taking with `take_response`. There is",
                      "no registered notification call."
                    ]
                  },
                  {
                    "name": "Notified",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "pallet_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "call_index",
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Query response has been received and query is removed. The registered notification has",
                      "been dispatched and executed successfully."
                    ]
                  },
                  {
                    "name": "NotifyOverweight",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "pallet_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "call_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "actual_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "max_budgeted_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Query response has been received and query is removed. The registered notification",
                      "could not be dispatched because the dispatch weight is greater than the maximum weight",
                      "originally budgeted by this runtime for the query result."
                    ]
                  },
                  {
                    "name": "NotifyDispatchError",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "pallet_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "call_index",
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Query response has been received and query is removed. There was a general error with",
                      "dispatching the notification call."
                    ]
                  },
                  {
                    "name": "NotifyDecodeFailed",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "pallet_index",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "call_index",
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Query response has been received and query is removed. The dispatch was unable to be",
                      "decoded into a `Call`; this might be due to dispatch function having a signature which",
                      "is not `(origin, QueryId, Response)`."
                    ]
                  },
                  {
                    "name": "InvalidResponder",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "expected_location",
                        "type": 120,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Expected query response has been received but the origin location of the response does",
                      "not match that expected. The query remains registered for a later, valid, response to",
                      "be received and acted upon."
                    ]
                  },
                  {
                    "name": "InvalidResponderVersion",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Expected query response has been received but the expected origin location placed in",
                      "storage by this runtime previously cannot be decoded. The query remains registered.",
                      "",
                      "This is unexpected (since a location placed in storage in a previously executing",
                      "runtime should be readable prior to query timeout) and dangerous since the possibly",
                      "valid response will be dropped. Manual governance intervention is probably going to be",
                      "needed."
                    ]
                  },
                  {
                    "name": "ResponseTaken",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Received query response has been read and removed."
                    ]
                  },
                  {
                    "name": "AssetsTrapped",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "H256"
                      },
                      {
                        "name": "origin",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "VersionedAssets"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Some assets have been placed in an asset trap."
                    ]
                  },
                  {
                    "name": "VersionChangeNotified",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "result",
                        "type": 4,
                        "typeName": "XcmVersion"
                      },
                      {
                        "name": "cost",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "An XCM version change notification message has been attempted to be sent.",
                      "",
                      "The cost of sending it (borne by the chain) is included."
                    ]
                  },
                  {
                    "name": "SupportedVersionChanged",
                    "fields": [
                      {
                        "name": "location",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "version",
                        "type": 4,
                        "typeName": "XcmVersion"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "The supported version of a location has been changed. This might be through an",
                      "automatic notification or a manual intervention."
                    ]
                  },
                  {
                    "name": "NotifyTargetSendFail",
                    "fields": [
                      {
                        "name": "location",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "error",
                        "type": 84,
                        "typeName": "XcmError"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "A given location which had a version change subscription was dropped owing to an error",
                      "sending the notification to it."
                    ]
                  },
                  {
                    "name": "NotifyTargetMigrationFail",
                    "fields": [
                      {
                        "name": "location",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "A given location which had a version change subscription was dropped owing to an error",
                      "migrating the location to our new XCM format."
                    ]
                  },
                  {
                    "name": "InvalidQuerierVersion",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Expected query response has been received but the expected querier location placed in",
                      "storage by this runtime previously cannot be decoded. The query remains registered.",
                      "",
                      "This is unexpected (since a location placed in storage in a previously executing",
                      "runtime should be readable prior to query timeout) and dangerous since the possibly",
                      "valid response will be dropped. Manual governance intervention is probably going to be",
                      "needed."
                    ]
                  },
                  {
                    "name": "InvalidQuerier",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "query_id",
                        "type": 12,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "expected_querier",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "maybe_actual_querier",
                        "type": 120,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Expected query response has been received but the querier location of the response does",
                      "not match the expected. The query remains registered for a later, valid, response to",
                      "be received and acted upon."
                    ]
                  },
                  {
                    "name": "VersionNotifyStarted",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "cost",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "A remote has requested XCM version change notification from us and we have honored it.",
                      "A version information message is sent to them and its cost is included."
                    ]
                  },
                  {
                    "name": "VersionNotifyRequested",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "cost",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "We have requested that a remote chain send us XCM version change notifications."
                    ]
                  },
                  {
                    "name": "VersionNotifyUnrequested",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "cost",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "message_id",
                        "type": 1,
                        "typeName": "XcmHash"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "We have requested that a remote chain stops sending us XCM version change",
                      "notifications."
                    ]
                  },
                  {
                    "name": "FeesPaid",
                    "fields": [
                      {
                        "name": "paying",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "fees",
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "Fees were paid from a location for an operation (often for using `SendXcm`)."
                    ]
                  },
                  {
                    "name": "AssetsClaimed",
                    "fields": [
                      {
                        "name": "hash",
                        "type": 13,
                        "typeName": "H256"
                      },
                      {
                        "name": "origin",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "VersionedAssets"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Some assets have been claimed from an asset trap"
                    ]
                  },
                  {
                    "name": "VersionMigrationFinished",
                    "fields": [
                      {
                        "name": "version",
                        "type": 4,
                        "typeName": "XcmVersion"
                      }
                    ],
                    "index": 23,
                    "docs": [
                      "A XCM version migration finished."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 83,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "traits",
              "Outcome"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Complete",
                    "fields": [
                      {
                        "name": "used",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Incomplete",
                    "fields": [
                      {
                        "name": "used",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "error",
                        "type": 84,
                        "typeName": "Error"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Error",
                    "fields": [
                      {
                        "name": "error",
                        "type": 84,
                        "typeName": "Error"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 84,
          "type": {
            "path": [
              "xcm",
              "v5",
              "traits",
              "Error"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Overflow",
                    "index": 0
                  },
                  {
                    "name": "Unimplemented",
                    "index": 1
                  },
                  {
                    "name": "UntrustedReserveLocation",
                    "index": 2
                  },
                  {
                    "name": "UntrustedTeleportLocation",
                    "index": 3
                  },
                  {
                    "name": "LocationFull",
                    "index": 4
                  },
                  {
                    "name": "LocationNotInvertible",
                    "index": 5
                  },
                  {
                    "name": "BadOrigin",
                    "index": 6
                  },
                  {
                    "name": "InvalidLocation",
                    "index": 7
                  },
                  {
                    "name": "AssetNotFound",
                    "index": 8
                  },
                  {
                    "name": "FailedToTransactAsset",
                    "index": 9
                  },
                  {
                    "name": "NotWithdrawable",
                    "index": 10
                  },
                  {
                    "name": "LocationCannotHold",
                    "index": 11
                  },
                  {
                    "name": "ExceedsMaxMessageSize",
                    "index": 12
                  },
                  {
                    "name": "DestinationUnsupported",
                    "index": 13
                  },
                  {
                    "name": "Transport",
                    "index": 14
                  },
                  {
                    "name": "Unroutable",
                    "index": 15
                  },
                  {
                    "name": "UnknownClaim",
                    "index": 16
                  },
                  {
                    "name": "FailedToDecode",
                    "index": 17
                  },
                  {
                    "name": "MaxWeightInvalid",
                    "index": 18
                  },
                  {
                    "name": "NotHoldingFees",
                    "index": 19
                  },
                  {
                    "name": "TooExpensive",
                    "index": 20
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "ExpectationFalse",
                    "index": 22
                  },
                  {
                    "name": "PalletNotFound",
                    "index": 23
                  },
                  {
                    "name": "NameMismatch",
                    "index": 24
                  },
                  {
                    "name": "VersionIncompatible",
                    "index": 25
                  },
                  {
                    "name": "HoldingWouldOverflow",
                    "index": 26
                  },
                  {
                    "name": "ExportError",
                    "index": 27
                  },
                  {
                    "name": "ReanchorFailed",
                    "index": 28
                  },
                  {
                    "name": "NoDeal",
                    "index": 29
                  },
                  {
                    "name": "FeesNotMet",
                    "index": 30
                  },
                  {
                    "name": "LockError",
                    "index": 31
                  },
                  {
                    "name": "NoPermission",
                    "index": 32
                  },
                  {
                    "name": "Unanchored",
                    "index": 33
                  },
                  {
                    "name": "NotDepositable",
                    "index": 34
                  },
                  {
                    "name": "TooManyAssets",
                    "index": 35
                  },
                  {
                    "name": "UnhandledXcmVersion",
                    "index": 36
                  },
                  {
                    "name": "WeightLimitReached",
                    "fields": [
                      {
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "Barrier",
                    "index": 38
                  },
                  {
                    "name": "WeightNotComputable",
                    "index": 39
                  },
                  {
                    "name": "ExceedsStackLimit",
                    "index": 40
                  }
                ]
              }
            }
          }
        },
        {
          "id": 85,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "location",
              "Location"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parents",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "interior",
                    "type": 86,
                    "typeName": "Junctions"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 86,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "junctions",
              "Junctions"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Here",
                    "index": 0
                  },
                  {
                    "name": "X1",
                    "fields": [
                      {
                        "type": 87,
                        "typeName": "Arc<[Junction; 1]>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "X2",
                    "fields": [
                      {
                        "type": 93,
                        "typeName": "Arc<[Junction; 2]>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "X3",
                    "fields": [
                      {
                        "type": 94,
                        "typeName": "Arc<[Junction; 3]>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "X4",
                    "fields": [
                      {
                        "type": 95,
                        "typeName": "Arc<[Junction; 4]>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "X5",
                    "fields": [
                      {
                        "type": 96,
                        "typeName": "Arc<[Junction; 5]>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "X6",
                    "fields": [
                      {
                        "type": 97,
                        "typeName": "Arc<[Junction; 6]>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "X7",
                    "fields": [
                      {
                        "type": 98,
                        "typeName": "Arc<[Junction; 7]>"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "X8",
                    "fields": [
                      {
                        "type": 99,
                        "typeName": "Arc<[Junction; 8]>"
                      }
                    ],
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 87,
          "type": {
            "def": {
              "array": {
                "len": 1,
                "type": 88
              }
            }
          }
        },
        {
          "id": 88,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "junction",
              "Junction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Parachain",
                    "fields": [
                      {
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "AccountId32",
                    "fields": [
                      {
                        "name": "network",
                        "type": 89,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AccountIndex64",
                    "fields": [
                      {
                        "name": "network",
                        "type": 89,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "index",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AccountKey20",
                    "fields": [
                      {
                        "name": "network",
                        "type": 89,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "key",
                        "type": 58,
                        "typeName": "[u8; 20]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletInstance",
                    "fields": [
                      {
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "GeneralIndex",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "GeneralKey",
                    "fields": [
                      {
                        "name": "length",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "data",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "OnlyChild",
                    "index": 7
                  },
                  {
                    "name": "Plurality",
                    "fields": [
                      {
                        "name": "id",
                        "type": 91,
                        "typeName": "BodyId"
                      },
                      {
                        "name": "part",
                        "type": 92,
                        "typeName": "BodyPart"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "GlobalConsensus",
                    "fields": [
                      {
                        "type": 90,
                        "typeName": "NetworkId"
                      }
                    ],
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 89,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 90
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 90
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 90,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "junction",
              "NetworkId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ByGenesis",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ByFork",
                    "fields": [
                      {
                        "name": "block_number",
                        "type": 12,
                        "typeName": "u64"
                      },
                      {
                        "name": "block_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Polkadot",
                    "index": 2
                  },
                  {
                    "name": "Kusama",
                    "index": 3
                  },
                  {
                    "name": "Ethereum",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "BitcoinCore",
                    "index": 8
                  },
                  {
                    "name": "BitcoinCash",
                    "index": 9
                  },
                  {
                    "name": "PolkadotBulletin",
                    "index": 10
                  }
                ]
              }
            }
          }
        },
        {
          "id": 91,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "BodyId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unit",
                    "index": 0
                  },
                  {
                    "name": "Moniker",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "[u8; 4]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Executive",
                    "index": 3
                  },
                  {
                    "name": "Technical",
                    "index": 4
                  },
                  {
                    "name": "Legislative",
                    "index": 5
                  },
                  {
                    "name": "Judicial",
                    "index": 6
                  },
                  {
                    "name": "Defense",
                    "index": 7
                  },
                  {
                    "name": "Administration",
                    "index": 8
                  },
                  {
                    "name": "Treasury",
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 92,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "BodyPart"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Voice",
                    "index": 0
                  },
                  {
                    "name": "Members",
                    "fields": [
                      {
                        "name": "count",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Fraction",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AtLeastProportion",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "MoreThanProportion",
                    "fields": [
                      {
                        "name": "nom",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "denom",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 93,
          "type": {
            "def": {
              "array": {
                "len": 2,
                "type": 88
              }
            }
          }
        },
        {
          "id": 94,
          "type": {
            "def": {
              "array": {
                "len": 3,
                "type": 88
              }
            }
          }
        },
        {
          "id": 95,
          "type": {
            "def": {
              "array": {
                "len": 4,
                "type": 88
              }
            }
          }
        },
        {
          "id": 96,
          "type": {
            "def": {
              "array": {
                "len": 5,
                "type": 88
              }
            }
          }
        },
        {
          "id": 97,
          "type": {
            "def": {
              "array": {
                "len": 6,
                "type": 88
              }
            }
          }
        },
        {
          "id": 98,
          "type": {
            "def": {
              "array": {
                "len": 7,
                "type": 88
              }
            }
          }
        },
        {
          "id": 99,
          "type": {
            "def": {
              "array": {
                "len": 8,
                "type": 88
              }
            }
          }
        },
        {
          "id": 100,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 101,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 101,
          "type": {
            "def": {
              "sequence": {
                "type": 102
              }
            }
          }
        },
        {
          "id": 102,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 111,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 120,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "dest",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 121,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "fallback_max_weight",
                        "type": 122,
                        "typeName": "Option<Weight>"
                      },
                      {
                        "name": "call",
                        "type": 123,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 86,
                        "typeName": "InteriorLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 124,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 124,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 100,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 100,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "ticket",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 120,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 112,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 124,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 124,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 88,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 90,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 86,
                        "typeName": "InteriorLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "unlocker",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "target",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "owner",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "locker",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 120,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 47
                  },
                  {
                    "name": "PayFees",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      }
                    ],
                    "index": 48
                  },
                  {
                    "name": "InitiateTransfer",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "remote_fees",
                        "type": 129,
                        "typeName": "Option<AssetTransferFilter>"
                      },
                      {
                        "name": "preserve_origin",
                        "type": 8,
                        "typeName": "bool"
                      },
                      {
                        "name": "assets",
                        "type": 131,
                        "typeName": "BoundedVec<AssetTransferFilter, MaxAssetTransferFilters>"
                      },
                      {
                        "name": "remote_xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 49
                  },
                  {
                    "name": "ExecuteWithOrigin",
                    "fields": [
                      {
                        "name": "descendant_origin",
                        "type": 133,
                        "typeName": "Option<InteriorLocation>"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 50
                  },
                  {
                    "name": "SetHints",
                    "fields": [
                      {
                        "name": "hints",
                        "type": 134,
                        "typeName": "BoundedVec<Hint, HintNumVariants>"
                      }
                    ],
                    "index": 51
                  }
                ]
              }
            }
          }
        },
        {
          "id": 103,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "Assets"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 104,
                    "typeName": "Vec<Asset>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 104,
          "type": {
            "def": {
              "sequence": {
                "type": 105
              }
            }
          }
        },
        {
          "id": 105,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "Asset"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 106,
                    "typeName": "AssetId"
                  },
                  {
                    "name": "fun",
                    "type": 107,
                    "typeName": "Fungibility"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 106,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "AssetId"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 85,
                    "typeName": "Location"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 107,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "Fungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "fields": [
                      {
                        "type": 108,
                        "typeName": "AssetInstance"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 108,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "AssetInstance"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Undefined",
                    "index": 0
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Array4",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "[u8; 4]"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Array8",
                    "fields": [
                      {
                        "type": 109,
                        "typeName": "[u8; 8]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Array16",
                    "fields": [
                      {
                        "type": 110,
                        "typeName": "[u8; 16]"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Array32",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 109,
          "type": {
            "def": {
              "array": {
                "len": 8,
                "type": 2
              }
            }
          }
        },
        {
          "id": 110,
          "type": {
            "def": {
              "array": {
                "len": 16,
                "type": 2
              }
            }
          }
        },
        {
          "id": 111,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "Response"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Null",
                    "index": 0
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ExecutionResult",
                    "fields": [
                      {
                        "type": 112,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Version",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "super::Version"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletsInfo",
                    "fields": [
                      {
                        "type": 114,
                        "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "DispatchResult",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 112,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 113
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 113
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 113,
          "type": {
            "def": {
              "tuple": [
                4,
                84
              ]
            }
          }
        },
        {
          "id": 114,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 115
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 117,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 115,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "PalletInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "name",
                    "type": 116,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "module_name",
                    "type": 116,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "major",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "minor",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "patch",
                    "type": 50,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 116,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 117,
          "type": {
            "def": {
              "sequence": {
                "type": 115
              }
            }
          }
        },
        {
          "id": 118,
          "type": {
            "path": [
              "xcm",
              "v3",
              "MaybeErrorCode"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Success",
                    "index": 0
                  },
                  {
                    "name": "Error",
                    "fields": [
                      {
                        "type": 119,
                        "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "TruncatedError",
                    "fields": [
                      {
                        "type": 119,
                        "typeName": "BoundedVec<u8, MaxDispatchErrorLen>"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 119,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 120,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 85
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 85
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 121,
          "type": {
            "path": [
              "xcm",
              "v3",
              "OriginKind"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Native",
                    "index": 0
                  },
                  {
                    "name": "SovereignAccount",
                    "index": 1
                  },
                  {
                    "name": "Superuser",
                    "index": 2
                  },
                  {
                    "name": "Xcm",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 122,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 10
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 10
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 123,
          "type": {
            "path": [
              "xcm",
              "double_encoded",
              "DoubleEncoded"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "encoded",
                    "type": 14,
                    "typeName": "Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 124,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "QueryResponseInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "destination",
                    "type": 85,
                    "typeName": "Location"
                  },
                  {
                    "name": "query_id",
                    "type": 11,
                    "typeName": "QueryId"
                  },
                  {
                    "name": "max_weight",
                    "type": 10,
                    "typeName": "Weight"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 125,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "AssetFilter"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Definite",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Wild",
                    "fields": [
                      {
                        "type": 126,
                        "typeName": "WildAsset"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 126,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "WildAsset"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "All",
                    "index": 0
                  },
                  {
                    "name": "AllOf",
                    "fields": [
                      {
                        "name": "id",
                        "type": 106,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 127,
                        "typeName": "WildFungibility"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AllCounted",
                    "fields": [
                      {
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AllOfCounted",
                    "fields": [
                      {
                        "name": "id",
                        "type": 106,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 127,
                        "typeName": "WildFungibility"
                      },
                      {
                        "name": "count",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 127,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "WildFungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 128,
          "type": {
            "path": [
              "xcm",
              "v3",
              "WeightLimit"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unlimited",
                    "index": 0
                  },
                  {
                    "name": "Limited",
                    "fields": [
                      {
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 129,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 130
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 130
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 130,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "asset",
              "AssetTransferFilter"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Teleport",
                    "fields": [
                      {
                        "type": 125,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveDeposit",
                    "fields": [
                      {
                        "type": 125,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReserveWithdraw",
                    "fields": [
                      {
                        "type": 125,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 131,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 130
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 132,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 132,
          "type": {
            "def": {
              "sequence": {
                "type": 130
              }
            }
          }
        },
        {
          "id": 133,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 86
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 86
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 134,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 135
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 136,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 135,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "Hint"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AssetClaimer",
                    "fields": [
                      {
                        "name": "location",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 136,
          "type": {
            "def": {
              "sequence": {
                "type": 135
              }
            }
          }
        },
        {
          "id": 137,
          "type": {
            "path": [
              "xcm",
              "VersionedAssets"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "v3::MultiAssets"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "v4::Assets"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "V5",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "v5::Assets"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 138,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAssets"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 139,
                    "typeName": "Vec<MultiAsset>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 139,
          "type": {
            "def": {
              "sequence": {
                "type": 140
              }
            }
          }
        },
        {
          "id": 140,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAsset"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 141,
                    "typeName": "AssetId"
                  },
                  {
                    "name": "fun",
                    "type": 147,
                    "typeName": "Fungibility"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 141,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "AssetId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Concrete",
                    "fields": [
                      {
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Abstract",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 142,
          "type": {
            "path": [
              "staging_xcm",
              "v3",
              "multilocation",
              "MultiLocation"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parents",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "interior",
                    "type": 143,
                    "typeName": "Junctions"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 143,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junctions",
              "Junctions"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Here",
                    "index": 0
                  },
                  {
                    "name": "X1",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "X2",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "X3",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "X4",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "X5",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "X6",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "X7",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "X8",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      },
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 144,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "Junction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Parachain",
                    "fields": [
                      {
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "AccountId32",
                    "fields": [
                      {
                        "name": "network",
                        "type": 145,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AccountIndex64",
                    "fields": [
                      {
                        "name": "network",
                        "type": 145,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "index",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AccountKey20",
                    "fields": [
                      {
                        "name": "network",
                        "type": 145,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "key",
                        "type": 58,
                        "typeName": "[u8; 20]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletInstance",
                    "fields": [
                      {
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "GeneralIndex",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "GeneralKey",
                    "fields": [
                      {
                        "name": "length",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "data",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "OnlyChild",
                    "index": 7
                  },
                  {
                    "name": "Plurality",
                    "fields": [
                      {
                        "name": "id",
                        "type": 91,
                        "typeName": "BodyId"
                      },
                      {
                        "name": "part",
                        "type": 92,
                        "typeName": "BodyPart"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "GlobalConsensus",
                    "fields": [
                      {
                        "type": 146,
                        "typeName": "NetworkId"
                      }
                    ],
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 145,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 146
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 146
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 146,
          "type": {
            "path": [
              "xcm",
              "v3",
              "junction",
              "NetworkId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ByGenesis",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ByFork",
                    "fields": [
                      {
                        "name": "block_number",
                        "type": 12,
                        "typeName": "u64"
                      },
                      {
                        "name": "block_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Polkadot",
                    "index": 2
                  },
                  {
                    "name": "Kusama",
                    "index": 3
                  },
                  {
                    "name": "Westend",
                    "index": 4
                  },
                  {
                    "name": "Rococo",
                    "index": 5
                  },
                  {
                    "name": "Wococo",
                    "index": 6
                  },
                  {
                    "name": "Ethereum",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "BitcoinCore",
                    "index": 8
                  },
                  {
                    "name": "BitcoinCash",
                    "index": 9
                  },
                  {
                    "name": "PolkadotBulletin",
                    "index": 10
                  }
                ]
              }
            }
          }
        },
        {
          "id": 147,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "Fungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "fields": [
                      {
                        "type": 148,
                        "typeName": "AssetInstance"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 148,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "AssetInstance"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Undefined",
                    "index": 0
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Array4",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "[u8; 4]"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Array8",
                    "fields": [
                      {
                        "type": 109,
                        "typeName": "[u8; 8]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Array16",
                    "fields": [
                      {
                        "type": 110,
                        "typeName": "[u8; 16]"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Array32",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 149,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "Assets"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 150,
                    "typeName": "Vec<Asset>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 150,
          "type": {
            "def": {
              "sequence": {
                "type": 151
              }
            }
          }
        },
        {
          "id": 151,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "Asset"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 152,
                    "typeName": "AssetId"
                  },
                  {
                    "name": "fun",
                    "type": 166,
                    "typeName": "Fungibility"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 152,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "AssetId"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 153,
                    "typeName": "Location"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 153,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "location",
              "Location"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parents",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "interior",
                    "type": 154,
                    "typeName": "Junctions"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 154,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "junctions",
              "Junctions"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Here",
                    "index": 0
                  },
                  {
                    "name": "X1",
                    "fields": [
                      {
                        "type": 155,
                        "typeName": "Arc<[Junction; 1]>"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "X2",
                    "fields": [
                      {
                        "type": 159,
                        "typeName": "Arc<[Junction; 2]>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "X3",
                    "fields": [
                      {
                        "type": 160,
                        "typeName": "Arc<[Junction; 3]>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "X4",
                    "fields": [
                      {
                        "type": 161,
                        "typeName": "Arc<[Junction; 4]>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "X5",
                    "fields": [
                      {
                        "type": 162,
                        "typeName": "Arc<[Junction; 5]>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "X6",
                    "fields": [
                      {
                        "type": 163,
                        "typeName": "Arc<[Junction; 6]>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "X7",
                    "fields": [
                      {
                        "type": 164,
                        "typeName": "Arc<[Junction; 7]>"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "X8",
                    "fields": [
                      {
                        "type": 165,
                        "typeName": "Arc<[Junction; 8]>"
                      }
                    ],
                    "index": 8
                  }
                ]
              }
            }
          }
        },
        {
          "id": 155,
          "type": {
            "def": {
              "array": {
                "len": 1,
                "type": 156
              }
            }
          }
        },
        {
          "id": 156,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "junction",
              "Junction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Parachain",
                    "fields": [
                      {
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "AccountId32",
                    "fields": [
                      {
                        "name": "network",
                        "type": 157,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AccountIndex64",
                    "fields": [
                      {
                        "name": "network",
                        "type": 157,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "index",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AccountKey20",
                    "fields": [
                      {
                        "name": "network",
                        "type": 157,
                        "typeName": "Option<NetworkId>"
                      },
                      {
                        "name": "key",
                        "type": 58,
                        "typeName": "[u8; 20]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletInstance",
                    "fields": [
                      {
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "GeneralIndex",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "GeneralKey",
                    "fields": [
                      {
                        "name": "length",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "data",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "OnlyChild",
                    "index": 7
                  },
                  {
                    "name": "Plurality",
                    "fields": [
                      {
                        "name": "id",
                        "type": 91,
                        "typeName": "BodyId"
                      },
                      {
                        "name": "part",
                        "type": 92,
                        "typeName": "BodyPart"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "GlobalConsensus",
                    "fields": [
                      {
                        "type": 158,
                        "typeName": "NetworkId"
                      }
                    ],
                    "index": 9
                  }
                ]
              }
            }
          }
        },
        {
          "id": 157,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 158
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 158
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 158,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "junction",
              "NetworkId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ByGenesis",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ByFork",
                    "fields": [
                      {
                        "name": "block_number",
                        "type": 12,
                        "typeName": "u64"
                      },
                      {
                        "name": "block_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Polkadot",
                    "index": 2
                  },
                  {
                    "name": "Kusama",
                    "index": 3
                  },
                  {
                    "name": "Westend",
                    "index": 4
                  },
                  {
                    "name": "Rococo",
                    "index": 5
                  },
                  {
                    "name": "Wococo",
                    "index": 6
                  },
                  {
                    "name": "Ethereum",
                    "fields": [
                      {
                        "name": "chain_id",
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "BitcoinCore",
                    "index": 8
                  },
                  {
                    "name": "BitcoinCash",
                    "index": 9
                  },
                  {
                    "name": "PolkadotBulletin",
                    "index": 10
                  }
                ]
              }
            }
          }
        },
        {
          "id": 159,
          "type": {
            "def": {
              "array": {
                "len": 2,
                "type": 156
              }
            }
          }
        },
        {
          "id": 160,
          "type": {
            "def": {
              "array": {
                "len": 3,
                "type": 156
              }
            }
          }
        },
        {
          "id": 161,
          "type": {
            "def": {
              "array": {
                "len": 4,
                "type": 156
              }
            }
          }
        },
        {
          "id": 162,
          "type": {
            "def": {
              "array": {
                "len": 5,
                "type": 156
              }
            }
          }
        },
        {
          "id": 163,
          "type": {
            "def": {
              "array": {
                "len": 6,
                "type": 156
              }
            }
          }
        },
        {
          "id": 164,
          "type": {
            "def": {
              "array": {
                "len": 7,
                "type": 156
              }
            }
          }
        },
        {
          "id": 165,
          "type": {
            "def": {
              "array": {
                "len": 8,
                "type": 156
              }
            }
          }
        },
        {
          "id": 166,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "Fungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "fields": [
                      {
                        "type": 167,
                        "typeName": "AssetInstance"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 167,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "AssetInstance"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Undefined",
                    "index": 0
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Array4",
                    "fields": [
                      {
                        "type": 18,
                        "typeName": "[u8; 4]"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Array8",
                    "fields": [
                      {
                        "type": 109,
                        "typeName": "[u8; 8]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Array16",
                    "fields": [
                      {
                        "type": 110,
                        "typeName": "[u8; 16]"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Array32",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 168,
          "type": {
            "path": [
              "xcm",
              "VersionedLocation"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 142,
                        "typeName": "v3::MultiLocation"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 153,
                        "typeName": "v4::Location"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "V5",
                    "fields": [
                      {
                        "type": 85,
                        "typeName": "v5::Location"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 169,
          "type": {
            "path": [
              "cumulus_pallet_xcm",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidFormat",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Downward message is invalid XCM.",
                      "\\[ id \\]"
                    ]
                  },
                  {
                    "name": "UnsupportedVersion",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Downward message is unsupported version of XCM.",
                      "\\[ id \\]"
                    ]
                  },
                  {
                    "name": "ExecutedDownward",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      },
                      {
                        "type": 83,
                        "typeName": "Outcome"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Downward message executed with the given outcome.",
                      "\\[ id, outcome \\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 170,
          "type": {
            "path": [
              "pallet_xc_asset_config",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AssetRegistered",
                    "fields": [
                      {
                        "name": "asset_location",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Registed mapping between asset type and asset Id."
                    ]
                  },
                  {
                    "name": "UnitsPerSecondChanged",
                    "fields": [
                      {
                        "name": "asset_location",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "units_per_second",
                        "type": 6,
                        "typeName": "u128"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Changed the amount of units we are charging per execution second for an asset"
                    ]
                  },
                  {
                    "name": "AssetLocationChanged",
                    "fields": [
                      {
                        "name": "previous_asset_location",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      },
                      {
                        "name": "new_asset_location",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Changed the asset type mapping for a given asset id"
                    ]
                  },
                  {
                    "name": "SupportedAssetRemoved",
                    "fields": [
                      {
                        "name": "asset_location",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Supported asset type for fee payment removed."
                    ]
                  },
                  {
                    "name": "AssetRemoved",
                    "fields": [
                      {
                        "name": "asset_location",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "asset_id",
                        "type": 6,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Removed all information related to an asset Id"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 171,
          "type": {
            "path": [
              "orml_xtokens",
              "module",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TransferredAssets",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "assets",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "fee",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "dest",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Transferred `Asset` with fee."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 172,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ProcessingFailed",
                    "fields": [
                      {
                        "name": "id",
                        "type": 13,
                        "typeName": "H256",
                        "docs": [
                          "The `blake2_256` hash of the message."
                        ]
                      },
                      {
                        "name": "origin",
                        "type": 173,
                        "typeName": "MessageOriginOf<T>",
                        "docs": [
                          "The queue of the message."
                        ]
                      },
                      {
                        "name": "error",
                        "type": 175,
                        "typeName": "ProcessMessageError",
                        "docs": [
                          "The error that occurred.",
                          "",
                          "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                          "by the `MessageProcessor`."
                        ]
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
                    ]
                  },
                  {
                    "name": "Processed",
                    "fields": [
                      {
                        "name": "id",
                        "type": 13,
                        "typeName": "H256",
                        "docs": [
                          "The `blake2_256` hash of the message."
                        ]
                      },
                      {
                        "name": "origin",
                        "type": 173,
                        "typeName": "MessageOriginOf<T>",
                        "docs": [
                          "The queue of the message."
                        ]
                      },
                      {
                        "name": "weight_used",
                        "type": 10,
                        "typeName": "Weight",
                        "docs": [
                          "How much weight was used to process the message."
                        ]
                      },
                      {
                        "name": "success",
                        "type": 8,
                        "typeName": "bool",
                        "docs": [
                          "Whether the message was processed.",
                          "",
                          "Note that this does not mean that the underlying `MessageProcessor` was internally",
                          "successful. It *solely* means that the MQ pallet will treat this as a success",
                          "condition and discard the message. Any internal error needs to be emitted as events",
                          "by the `MessageProcessor`."
                        ]
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Message is processed."
                    ]
                  },
                  {
                    "name": "OverweightEnqueued",
                    "fields": [
                      {
                        "name": "id",
                        "type": 1,
                        "typeName": "[u8; 32]",
                        "docs": [
                          "The `blake2_256` hash of the message."
                        ]
                      },
                      {
                        "name": "origin",
                        "type": 173,
                        "typeName": "MessageOriginOf<T>",
                        "docs": [
                          "The queue of the message."
                        ]
                      },
                      {
                        "name": "page_index",
                        "type": 4,
                        "typeName": "PageIndex",
                        "docs": [
                          "The page of the message."
                        ]
                      },
                      {
                        "name": "message_index",
                        "type": 4,
                        "typeName": "T::Size",
                        "docs": [
                          "The index of the message within the page."
                        ]
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Message placed in overweight queue."
                    ]
                  },
                  {
                    "name": "PageReaped",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 173,
                        "typeName": "MessageOriginOf<T>",
                        "docs": [
                          "The queue of the page."
                        ]
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "PageIndex",
                        "docs": [
                          "The index of the page."
                        ]
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "This page was reaped."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 173,
          "type": {
            "path": [
              "cumulus_primitives_core",
              "AggregateMessageOrigin"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Here",
                    "index": 0
                  },
                  {
                    "name": "Parent",
                    "index": 1
                  },
                  {
                    "name": "Sibling",
                    "fields": [
                      {
                        "type": 174,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 174,
          "type": {
            "path": [
              "polkadot_parachain_primitives",
              "primitives",
              "Id"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 175,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "messages",
              "ProcessMessageError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BadFormat",
                    "index": 0
                  },
                  {
                    "name": "Corrupt",
                    "index": 1
                  },
                  {
                    "name": "Unsupported",
                    "index": 2
                  },
                  {
                    "name": "Overweight",
                    "fields": [
                      {
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Yield",
                    "index": 4
                  },
                  {
                    "name": "StackLimitReached",
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 176,
          "type": {
            "path": [
              "pallet_evm",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Log",
                    "fields": [
                      {
                        "name": "log",
                        "type": 177,
                        "typeName": "Log"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Ethereum events from contracts."
                    ]
                  },
                  {
                    "name": "Created",
                    "fields": [
                      {
                        "name": "address",
                        "type": 57,
                        "typeName": "H160"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "A contract has been created at given address."
                    ]
                  },
                  {
                    "name": "CreatedFailed",
                    "fields": [
                      {
                        "name": "address",
                        "type": 57,
                        "typeName": "H160"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "A contract was attempted to be created, but the execution failed."
                    ]
                  },
                  {
                    "name": "Executed",
                    "fields": [
                      {
                        "name": "address",
                        "type": 57,
                        "typeName": "H160"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A contract has been executed successfully with states applied."
                    ]
                  },
                  {
                    "name": "ExecutedFailed",
                    "fields": [
                      {
                        "name": "address",
                        "type": 57,
                        "typeName": "H160"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A contract has been executed with errors. States are reverted with only gas fees applied."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 177,
          "type": {
            "path": [
              "ethereum",
              "log",
              "Log"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "address",
                    "type": 57,
                    "typeName": "H160"
                  },
                  {
                    "name": "topics",
                    "type": 178,
                    "typeName": "Vec<H256>"
                  },
                  {
                    "name": "data",
                    "type": 14,
                    "typeName": "Bytes"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 178,
          "type": {
            "def": {
              "sequence": {
                "type": 13
              }
            }
          }
        },
        {
          "id": 179,
          "type": {
            "path": [
              "pallet_ethereum",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Executed",
                    "fields": [
                      {
                        "name": "from",
                        "type": 57,
                        "typeName": "H160"
                      },
                      {
                        "name": "to",
                        "type": 57,
                        "typeName": "H160"
                      },
                      {
                        "name": "transaction_hash",
                        "type": 13,
                        "typeName": "H256"
                      },
                      {
                        "name": "exit_reason",
                        "type": 180,
                        "typeName": "ExitReason"
                      },
                      {
                        "name": "extra_data",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "An ethereum transaction was successfully executed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 180,
          "type": {
            "path": [
              "evm_core",
              "error",
              "ExitReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Succeed",
                    "fields": [
                      {
                        "type": 181,
                        "typeName": "ExitSucceed"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Error",
                    "fields": [
                      {
                        "type": 182,
                        "typeName": "ExitError"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Revert",
                    "fields": [
                      {
                        "type": 186,
                        "typeName": "ExitRevert"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Fatal",
                    "fields": [
                      {
                        "type": 187,
                        "typeName": "ExitFatal"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 181,
          "type": {
            "path": [
              "evm_core",
              "error",
              "ExitSucceed"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Stopped",
                    "index": 0
                  },
                  {
                    "name": "Returned",
                    "index": 1
                  },
                  {
                    "name": "Suicided",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 182,
          "type": {
            "path": [
              "evm_core",
              "error",
              "ExitError"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "StackUnderflow",
                    "index": 0
                  },
                  {
                    "name": "StackOverflow",
                    "index": 1
                  },
                  {
                    "name": "InvalidJump",
                    "index": 2
                  },
                  {
                    "name": "InvalidRange",
                    "index": 3
                  },
                  {
                    "name": "DesignatedInvalid",
                    "index": 4
                  },
                  {
                    "name": "CallTooDeep",
                    "index": 5
                  },
                  {
                    "name": "CreateCollision",
                    "index": 6
                  },
                  {
                    "name": "CreateContractLimit",
                    "index": 7
                  },
                  {
                    "name": "InvalidCode",
                    "fields": [
                      {
                        "type": 183,
                        "typeName": "Opcode"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "OutOfOffset",
                    "index": 8
                  },
                  {
                    "name": "OutOfGas",
                    "index": 9
                  },
                  {
                    "name": "OutOfFund",
                    "index": 10
                  },
                  {
                    "name": "PCUnderflow",
                    "index": 11
                  },
                  {
                    "name": "CreateEmpty",
                    "index": 12
                  },
                  {
                    "name": "Other",
                    "fields": [
                      {
                        "type": 184,
                        "typeName": "Cow<'static, str>"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "MaxNonce",
                    "index": 14
                  }
                ]
              }
            }
          }
        },
        {
          "id": 183,
          "type": {
            "path": [
              "evm_core",
              "opcode",
              "Opcode"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 2,
                    "typeName": "u8"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 184,
          "type": {
            "path": [
              "Cow"
            ],
            "params": [
              {
                "name": "T",
                "type": 185
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 185
                  }
                ]
              }
            }
          }
        },
        {
          "id": 185,
          "type": {
            "def": {
              "primitive": "str"
            }
          }
        },
        {
          "id": 186,
          "type": {
            "path": [
              "evm_core",
              "error",
              "ExitRevert"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Reverted",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 187,
          "type": {
            "path": [
              "evm_core",
              "error",
              "ExitFatal"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotSupported",
                    "index": 0
                  },
                  {
                    "name": "UnhandledInterrupt",
                    "index": 1
                  },
                  {
                    "name": "CallErrorAsFatal",
                    "fields": [
                      {
                        "type": 182,
                        "typeName": "ExitError"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Other",
                    "fields": [
                      {
                        "type": 184,
                        "typeName": "Cow<'static, str>"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 188,
          "type": {
            "path": [
              "pallet_dynamic_evm_base_fee",
              "pallet",
              "Event"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewBaseFeePerGas",
                    "fields": [
                      {
                        "name": "fee",
                        "type": 189,
                        "typeName": "U256"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "New `base fee per gas` value has been force-set."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 189,
          "type": {
            "path": [
              "primitive_types",
              "U256"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 190,
                    "typeName": "[u64; 4]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 190,
          "type": {
            "def": {
              "array": {
                "len": 4,
                "type": 12
              }
            }
          }
        },
        {
          "id": 191,
          "type": {
            "path": [
              "pallet_contracts",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Instantiated",
                    "fields": [
                      {
                        "name": "deployer",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "contract",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Contract deployed by address at the specified address."
                    ]
                  },
                  {
                    "name": "Terminated",
                    "fields": [
                      {
                        "name": "contract",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The contract that was terminated."
                        ]
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The account that received the contracts remaining balance"
                        ]
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Contract has been removed.",
                      "",
                      "# Note",
                      "",
                      "The only way for a contract to be removed and emitting this event is by calling",
                      "`seal_terminate`."
                    ]
                  },
                  {
                    "name": "CodeStored",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      },
                      {
                        "name": "deposit_held",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "uploader",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Code with the specified hash has been stored."
                    ]
                  },
                  {
                    "name": "ContractEmitted",
                    "fields": [
                      {
                        "name": "contract",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The contract that emitted the event."
                        ]
                      },
                      {
                        "name": "data",
                        "type": 14,
                        "typeName": "Vec<u8>",
                        "docs": [
                          "Data supplied by the contract. Metadata generated during contract compilation",
                          "is needed to decode it."
                        ]
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A custom event emitted by the contract."
                    ]
                  },
                  {
                    "name": "CodeRemoved",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      },
                      {
                        "name": "deposit_released",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "remover",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A code with the specified hash was removed."
                    ]
                  },
                  {
                    "name": "ContractCodeUpdated",
                    "fields": [
                      {
                        "name": "contract",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The contract that has been updated."
                        ]
                      },
                      {
                        "name": "new_code_hash",
                        "type": 13,
                        "typeName": "T::Hash",
                        "docs": [
                          "New code hash that was set for the contract."
                        ]
                      },
                      {
                        "name": "old_code_hash",
                        "type": 13,
                        "typeName": "T::Hash",
                        "docs": [
                          "Previous code hash of the contract."
                        ]
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A contract's code was updated."
                    ]
                  },
                  {
                    "name": "Called",
                    "fields": [
                      {
                        "name": "caller",
                        "type": 192,
                        "typeName": "Origin<T>",
                        "docs": [
                          "The caller of the `contract`."
                        ]
                      },
                      {
                        "name": "contract",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The contract that was called."
                        ]
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "A contract was called either by a plain account or another contract.",
                      "",
                      "# Note",
                      "",
                      "Please keep in mind that like all events this is only emitted for successful",
                      "calls. This is because on failure all storage changes including events are",
                      "rolled back."
                    ]
                  },
                  {
                    "name": "DelegateCalled",
                    "fields": [
                      {
                        "name": "contract",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The contract that performed the delegate call and hence in whose context",
                          "the `code_hash` is executed."
                        ]
                      },
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "CodeHash<T>",
                        "docs": [
                          "The code hash that was delegate called."
                        ]
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "A contract delegate called a code hash.",
                      "",
                      "# Note",
                      "",
                      "Please keep in mind that like all events this is only emitted for successful",
                      "calls. This is because on failure all storage changes including events are",
                      "rolled back."
                    ]
                  },
                  {
                    "name": "StorageDepositTransferredAndHeld",
                    "fields": [
                      {
                        "name": "from",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "to",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Some funds have been transferred and held as storage deposit."
                    ]
                  },
                  {
                    "name": "StorageDepositTransferredAndReleased",
                    "fields": [
                      {
                        "name": "from",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "to",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Some storage deposit funds have been transferred and released."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 192,
          "type": {
            "path": [
              "pallet_contracts",
              "Origin"
            ],
            "params": [
              {
                "name": "T",
                "type": 193
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Root",
                    "index": 0
                  },
                  {
                    "name": "Signed",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 193,
          "type": {
            "path": [
              "shiden_runtime",
              "Runtime"
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 194,
          "type": {
            "path": [
              "pallet_sudo",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Sudid",
                    "fields": [
                      {
                        "name": "sudo_result",
                        "type": 33,
                        "typeName": "DispatchResult",
                        "docs": [
                          "The result of the call made by the sudo user."
                        ]
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A sudo call just took place."
                    ]
                  },
                  {
                    "name": "KeyChanged",
                    "fields": [
                      {
                        "name": "old",
                        "type": 59,
                        "typeName": "Option<T::AccountId>",
                        "docs": [
                          "The old sudo key (if one was previously set)."
                        ]
                      },
                      {
                        "name": "new",
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": [
                          "The new sudo key (if one was set)."
                        ]
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "The sudo key has been updated."
                    ]
                  },
                  {
                    "name": "KeyRemoved",
                    "index": 2,
                    "docs": [
                      "The key was permanently removed."
                    ]
                  },
                  {
                    "name": "SudoAsDone",
                    "fields": [
                      {
                        "name": "sudo_result",
                        "type": 33,
                        "typeName": "DispatchResult",
                        "docs": [
                          "The result of the call made by the sudo user."
                        ]
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A [sudo_as](Pallet::sudo_as) call just took place."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 195,
          "type": {
            "path": [
              "pallet_migrations",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "UpgradeStarted",
                    "fields": [
                      {
                        "name": "migrations",
                        "type": 4,
                        "typeName": "u32",
                        "docs": [
                          "The number of migrations that this upgrade contains.",
                          "",
                          "This can be used to design a progress indicator in combination with counting the",
                          "`MigrationCompleted` and `MigrationSkipped` events."
                        ]
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "A Runtime upgrade started.",
                      "",
                      "Its end is indicated by `UpgradeCompleted` or `UpgradeFailed`."
                    ]
                  },
                  {
                    "name": "UpgradeCompleted",
                    "index": 1,
                    "docs": [
                      "The current runtime upgrade completed.",
                      "",
                      "This implies that all of its migrations completed successfully as well."
                    ]
                  },
                  {
                    "name": "UpgradeFailed",
                    "index": 2,
                    "docs": [
                      "Runtime upgrade failed.",
                      "",
                      "This is very bad and will require governance intervention."
                    ]
                  },
                  {
                    "name": "MigrationSkipped",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32",
                        "docs": [
                          "The index of the skipped migration within the [`Config::Migrations`] list."
                        ]
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "A migration was skipped since it was already executed in the past."
                    ]
                  },
                  {
                    "name": "MigrationAdvanced",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32",
                        "docs": [
                          "The index of the migration within the [`Config::Migrations`] list."
                        ]
                      },
                      {
                        "name": "took",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>",
                        "docs": [
                          "The number of blocks that this migration took so far."
                        ]
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "A migration progressed."
                    ]
                  },
                  {
                    "name": "MigrationCompleted",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32",
                        "docs": [
                          "The index of the migration within the [`Config::Migrations`] list."
                        ]
                      },
                      {
                        "name": "took",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>",
                        "docs": [
                          "The number of blocks that this migration took so far."
                        ]
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "A Migration completed."
                    ]
                  },
                  {
                    "name": "MigrationFailed",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32",
                        "docs": [
                          "The index of the migration within the [`Config::Migrations`] list."
                        ]
                      },
                      {
                        "name": "took",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>",
                        "docs": [
                          "The number of blocks that this migration took so far."
                        ]
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "A Migration failed.",
                      "",
                      "This implies that the whole upgrade failed and governance intervention is required."
                    ]
                  },
                  {
                    "name": "HistoricCleared",
                    "fields": [
                      {
                        "name": "next_cursor",
                        "type": 196,
                        "typeName": "Option<Vec<u8>>",
                        "docs": [
                          "Should be passed to `clear_historic` in a successive call."
                        ]
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "The set of historical migrations has been cleared."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Event` enum of this pallet"
            ]
          }
        },
        {
          "id": 196,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 14
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 14
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 197,
          "type": {
            "path": [
              "frame_system",
              "Phase"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ApplyExtrinsic",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Finalization",
                    "index": 1
                  },
                  {
                    "name": "Initialization",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 198,
          "type": {
            "def": {
              "sequence": {
                "type": 199
              }
            }
          }
        },
        {
          "id": 199,
          "type": {
            "def": {
              "tuple": [
                4,
                4
              ]
            }
          }
        },
        {
          "id": 200,
          "type": {
            "path": [
              "frame_system",
              "LastRuntimeUpgradeInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "spec_version",
                    "type": 50,
                    "typeName": "codec::Compact<u32>"
                  },
                  {
                    "name": "spec_name",
                    "type": 184,
                    "typeName": "Cow<'static, str>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 201,
          "type": {
            "path": [
              "frame_system",
              "CodeUpgradeAuthorization"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "code_hash",
                    "type": 13,
                    "typeName": "T::Hash"
                  },
                  {
                    "name": "check_version",
                    "type": 8,
                    "typeName": "bool"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 202,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "remark",
                    "fields": [
                      {
                        "name": "remark",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Make some on-chain remark.",
                      "",
                      "Can be executed by every `origin`."
                    ]
                  },
                  {
                    "name": "set_heap_pages",
                    "fields": [
                      {
                        "name": "pages",
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Set the number of pages in the WebAssembly environment's heap."
                    ]
                  },
                  {
                    "name": "set_code",
                    "fields": [
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Set the new runtime code."
                    ]
                  },
                  {
                    "name": "set_code_without_checks",
                    "fields": [
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Set the new runtime code without doing any checks of the given `code`.",
                      "",
                      "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                      "version!"
                    ]
                  },
                  {
                    "name": "set_storage",
                    "fields": [
                      {
                        "name": "items",
                        "type": 203,
                        "typeName": "Vec<KeyValue>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Set some items of storage."
                    ]
                  },
                  {
                    "name": "kill_storage",
                    "fields": [
                      {
                        "name": "keys",
                        "type": 205,
                        "typeName": "Vec<Key>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Kill some items from storage."
                    ]
                  },
                  {
                    "name": "kill_prefix",
                    "fields": [
                      {
                        "name": "prefix",
                        "type": 14,
                        "typeName": "Key"
                      },
                      {
                        "name": "subkeys",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Kill all storage items with a key that starts with the given prefix.",
                      "",
                      "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                      "the prefix we are removing to accurately calculate the weight of this function."
                    ]
                  },
                  {
                    "name": "remark_with_event",
                    "fields": [
                      {
                        "name": "remark",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Make some on-chain remark and emit event."
                    ]
                  },
                  {
                    "name": "authorize_upgrade",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                      "later.",
                      "",
                      "This call requires Root origin."
                    ]
                  },
                  {
                    "name": "authorize_upgrade_without_checks",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                      "later.",
                      "",
                      "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                      "example that the spec name remains the same and that the version number increases. Not",
                      "recommended for normal use. Use `authorize_upgrade` instead.",
                      "",
                      "This call requires Root origin."
                    ]
                  },
                  {
                    "name": "apply_authorized_upgrade",
                    "fields": [
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                      "",
                      "If the authorization required a version check, this call will ensure the spec name",
                      "remains unchanged and that the spec version has increased.",
                      "",
                      "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                      "the new `code` in the same block or attempt to schedule the upgrade.",
                      "",
                      "All origins are allowed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 203,
          "type": {
            "def": {
              "sequence": {
                "type": 204
              }
            }
          }
        },
        {
          "id": 204,
          "type": {
            "def": {
              "tuple": [
                14,
                14
              ]
            }
          }
        },
        {
          "id": 205,
          "type": {
            "def": {
              "sequence": {
                "type": 14
              }
            }
          }
        },
        {
          "id": 206,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "BlockWeights"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "base_block",
                    "type": 10,
                    "typeName": "Weight"
                  },
                  {
                    "name": "max_block",
                    "type": 10,
                    "typeName": "Weight"
                  },
                  {
                    "name": "per_class",
                    "type": 207,
                    "typeName": "PerDispatchClass<WeightsPerClass>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 207,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 208
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 208,
                    "typeName": "T"
                  },
                  {
                    "name": "operational",
                    "type": 208,
                    "typeName": "T"
                  },
                  {
                    "name": "mandatory",
                    "type": 208,
                    "typeName": "T"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 208,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "WeightsPerClass"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "base_extrinsic",
                    "type": 10,
                    "typeName": "Weight"
                  },
                  {
                    "name": "max_extrinsic",
                    "type": 122,
                    "typeName": "Option<Weight>"
                  },
                  {
                    "name": "max_total",
                    "type": 122,
                    "typeName": "Option<Weight>"
                  },
                  {
                    "name": "reserved",
                    "type": 122,
                    "typeName": "Option<Weight>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 209,
          "type": {
            "path": [
              "frame_system",
              "limits",
              "BlockLength"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max",
                    "type": 210,
                    "typeName": "PerDispatchClass<u32>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 210,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 4,
                    "typeName": "T"
                  },
                  {
                    "name": "operational",
                    "type": 4,
                    "typeName": "T"
                  },
                  {
                    "name": "mandatory",
                    "type": 4,
                    "typeName": "T"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 211,
          "type": {
            "path": [
              "sp_weights",
              "RuntimeDbWeight"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "read",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "write",
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 212,
          "type": {
            "path": [
              "sp_version",
              "RuntimeVersion"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "spec_name",
                    "type": 184,
                    "typeName": "Cow<'static, str>"
                  },
                  {
                    "name": "impl_name",
                    "type": 184,
                    "typeName": "Cow<'static, str>"
                  },
                  {
                    "name": "authoring_version",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "spec_version",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "impl_version",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "apis",
                    "type": 213,
                    "typeName": "ApisVec"
                  },
                  {
                    "name": "transaction_version",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "system_version",
                    "type": 2,
                    "typeName": "u8"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 213,
          "type": {
            "path": [
              "Cow"
            ],
            "params": [
              {
                "name": "T",
                "type": 214
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 214
                  }
                ]
              }
            }
          }
        },
        {
          "id": 214,
          "type": {
            "def": {
              "sequence": {
                "type": 215
              }
            }
          }
        },
        {
          "id": 215,
          "type": {
            "def": {
              "tuple": [
                109,
                4
              ]
            }
          }
        },
        {
          "id": 216,
          "type": {
            "path": [
              "frame_system",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidSpecName",
                    "index": 0,
                    "docs": [
                      "The name of specification does not match between the current runtime",
                      "and the new runtime."
                    ]
                  },
                  {
                    "name": "SpecVersionNeedsToIncrease",
                    "index": 1,
                    "docs": [
                      "The specification version is not allowed to decrease between the current runtime",
                      "and the new runtime."
                    ]
                  },
                  {
                    "name": "FailedToExtractRuntimeVersion",
                    "index": 2,
                    "docs": [
                      "Failed to extract the runtime version from the new runtime.",
                      "",
                      "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                    ]
                  },
                  {
                    "name": "NonDefaultComposite",
                    "index": 3,
                    "docs": [
                      "Suicide called when the account has non-default composite data."
                    ]
                  },
                  {
                    "name": "NonZeroRefCount",
                    "index": 4,
                    "docs": [
                      "There is a non-zero reference count preventing the account from being purged."
                    ]
                  },
                  {
                    "name": "CallFiltered",
                    "index": 5,
                    "docs": [
                      "The origin filter prevent the call to be dispatched."
                    ]
                  },
                  {
                    "name": "MultiBlockMigrationsOngoing",
                    "index": 6,
                    "docs": [
                      "A multi-block migration is ongoing and prevents the current code from being replaced."
                    ]
                  },
                  {
                    "name": "NothingAuthorized",
                    "index": 7,
                    "docs": [
                      "No upgrade authorized."
                    ]
                  },
                  {
                    "name": "Unauthorized",
                    "index": 8,
                    "docs": [
                      "The submitted code is not authorized."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the System pallet"
            ]
          }
        },
        {
          "id": 217,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "batch",
                    "fields": [
                      {
                        "name": "calls",
                        "type": 218,
                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Send a batch of dispatch calls.",
                      "",
                      "May be called from any origin except `None`.",
                      "",
                      "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                      "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                      "",
                      "If origin is root then the calls are dispatched without checking origin filter. (This",
                      "includes bypassing `frame_system::Config::BaseCallFilter`).",
                      "",
                      "## Complexity",
                      "- O(C) where C is the number of calls to be batched.",
                      "",
                      "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                      "event is deposited. If a call failed and the batch was interrupted, then the",
                      "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                      "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                      "event is deposited."
                    ]
                  },
                  {
                    "name": "as_derivative",
                    "fields": [
                      {
                        "name": "index",
                        "type": 41,
                        "typeName": "u16"
                      },
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Send a call through an indexed pseudonym of the sender.",
                      "",
                      "Filter from origin are passed along. The call will be dispatched with an origin which",
                      "use the same filter as the origin of this call.",
                      "",
                      "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                      "because you expect `proxy` to have been used prior in the call stack and you do not want",
                      "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                      "in the Multisig pallet instead.",
                      "",
                      "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                      "",
                      "The dispatch origin for this call must be _Signed_."
                    ]
                  },
                  {
                    "name": "batch_all",
                    "fields": [
                      {
                        "name": "calls",
                        "type": 218,
                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Send a batch of dispatch calls and atomically execute them.",
                      "The whole transaction will rollback and fail if any of the calls failed.",
                      "",
                      "May be called from any origin except `None`.",
                      "",
                      "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                      "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                      "",
                      "If origin is root then the calls are dispatched without checking origin filter. (This",
                      "includes bypassing `frame_system::Config::BaseCallFilter`).",
                      "",
                      "## Complexity",
                      "- O(C) where C is the number of calls to be batched."
                    ]
                  },
                  {
                    "name": "dispatch_as",
                    "fields": [
                      {
                        "name": "as_origin",
                        "type": 379,
                        "typeName": "Box<T::PalletsOrigin>"
                      },
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Dispatches a function call with a provided origin.",
                      "",
                      "The dispatch origin for this call must be _Root_.",
                      "",
                      "## Complexity",
                      "- O(1)."
                    ]
                  },
                  {
                    "name": "force_batch",
                    "fields": [
                      {
                        "name": "calls",
                        "type": 218,
                        "typeName": "Vec<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Send a batch of dispatch calls.",
                      "Unlike `batch`, it allows errors and won't interrupt.",
                      "",
                      "May be called from any origin except `None`.",
                      "",
                      "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                      "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                      "",
                      "If origin is root then the calls are dispatch without checking origin filter. (This",
                      "includes bypassing `frame_system::Config::BaseCallFilter`).",
                      "",
                      "## Complexity",
                      "- O(C) where C is the number of calls to be batched."
                    ]
                  },
                  {
                    "name": "with_weight",
                    "fields": [
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      },
                      {
                        "name": "weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Dispatch a function call with a specified weight.",
                      "",
                      "This function does not check the weight of the call, and instead allows the",
                      "Root origin to specify the weight of the call.",
                      "",
                      "The dispatch origin for this call must be _Root_."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 218,
          "type": {
            "def": {
              "sequence": {
                "type": 219
              }
            }
          }
        },
        {
          "id": 219,
          "type": {
            "path": [
              "shiden_runtime",
              "RuntimeCall"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "System",
                    "fields": [
                      {
                        "type": 202,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "Utility",
                    "fields": [
                      {
                        "type": 217,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "Identity",
                    "fields": [
                      {
                        "type": 220,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "Timestamp",
                    "fields": [
                      {
                        "type": 264,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "Multisig",
                    "fields": [
                      {
                        "type": 265,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "Proxy",
                    "fields": [
                      {
                        "type": 267,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "ParachainSystem",
                    "fields": [
                      {
                        "type": 269,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>"
                      }
                    ],
                    "index": 20
                  },
                  {
                    "name": "ParachainInfo",
                    "fields": [
                      {
                        "type": 282,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "Balances",
                    "fields": [
                      {
                        "type": 283,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "Vesting",
                    "fields": [
                      {
                        "type": 285,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "Inflation",
                    "fields": [
                      {
                        "type": 287,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Inflation, Runtime>"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "DappStaking",
                    "fields": [
                      {
                        "type": 289,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DappStaking, Runtime>"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "type": 290,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>"
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "Oracle",
                    "fields": [
                      {
                        "type": 291,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Oracle, Runtime>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "OracleMembership",
                    "fields": [
                      {
                        "type": 293,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OracleMembership, Runtime>"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "CollatorSelection",
                    "fields": [
                      {
                        "type": 294,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "Session",
                    "fields": [
                      {
                        "type": 295,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "XcmpQueue",
                    "fields": [
                      {
                        "type": 298,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>"
                      }
                    ],
                    "index": 50
                  },
                  {
                    "name": "PolkadotXcm",
                    "fields": [
                      {
                        "type": 299,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>"
                      }
                    ],
                    "index": 51
                  },
                  {
                    "name": "CumulusXcm",
                    "fields": [
                      {
                        "type": 344,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>"
                      }
                    ],
                    "index": 52
                  },
                  {
                    "name": "XcAssetConfig",
                    "fields": [
                      {
                        "type": 345,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcAssetConfig, Runtime>"
                      }
                    ],
                    "index": 54
                  },
                  {
                    "name": "XTokens",
                    "fields": [
                      {
                        "type": 346,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XTokens, Runtime>"
                      }
                    ],
                    "index": 55
                  },
                  {
                    "name": "MessageQueue",
                    "fields": [
                      {
                        "type": 350,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>"
                      }
                    ],
                    "index": 56
                  },
                  {
                    "name": "EVM",
                    "fields": [
                      {
                        "type": 351,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<EVM, Runtime>"
                      }
                    ],
                    "index": 60
                  },
                  {
                    "name": "Ethereum",
                    "fields": [
                      {
                        "type": 355,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Ethereum, Runtime>"
                      }
                    ],
                    "index": 61
                  },
                  {
                    "name": "DynamicEvmBaseFee",
                    "fields": [
                      {
                        "type": 365,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DynamicEvmBaseFee, Runtime>"
                      }
                    ],
                    "index": 63
                  },
                  {
                    "name": "Contracts",
                    "fields": [
                      {
                        "type": 366,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>"
                      }
                    ],
                    "index": 70
                  },
                  {
                    "name": "Sudo",
                    "fields": [
                      {
                        "type": 369,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                      }
                    ],
                    "index": 99
                  },
                  {
                    "name": "MultiBlockMigrations",
                    "fields": [
                      {
                        "type": 370,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MultiBlockMigrations, Runtime>"
                      }
                    ],
                    "index": 120
                  }
                ]
              }
            }
          }
        },
        {
          "id": 220,
          "type": {
            "path": [
              "pallet_identity",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "add_registrar",
                    "fields": [
                      {
                        "name": "account",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Add a registrar to the system.",
                      "",
                      "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                      "",
                      "- `account`: the account of the registrar.",
                      "",
                      "Emits `RegistrarAdded` if successful."
                    ]
                  },
                  {
                    "name": "set_identity",
                    "fields": [
                      {
                        "name": "info",
                        "type": 223,
                        "typeName": "Box<T::IdentityInformation>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Set an account's identity information and reserve the appropriate deposit.",
                      "",
                      "If the account already has identity information, the deposit is taken as part payment",
                      "for the new deposit.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `info`: The identity information.",
                      "",
                      "Emits `IdentitySet` if successful."
                    ]
                  },
                  {
                    "name": "set_subs",
                    "fields": [
                      {
                        "name": "subs",
                        "type": 257,
                        "typeName": "Vec<(T::AccountId, Data)>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Set the sub-accounts of the sender.",
                      "",
                      "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                      "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                      "identity.",
                      "",
                      "- `subs`: The identity's (new) sub-accounts."
                    ]
                  },
                  {
                    "name": "clear_identity",
                    "index": 3,
                    "docs": [
                      "Clear an account's identity info and all sub-accounts and return all deposits.",
                      "",
                      "Payment: All reserved balances on the account are returned.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                      "identity.",
                      "",
                      "Emits `IdentityCleared` if successful."
                    ]
                  },
                  {
                    "name": "request_judgement",
                    "fields": [
                      {
                        "name": "reg_index",
                        "type": 50,
                        "typeName": "RegistrarIndex"
                      },
                      {
                        "name": "max_fee",
                        "type": 51,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Request a judgement from a registrar.",
                      "",
                      "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                      "given.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have a",
                      "registered identity.",
                      "",
                      "- `reg_index`: The index of the registrar whose judgement is requested.",
                      "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                      "",
                      "```nocompile",
                      "Registrars::<T>::get().get(reg_index).unwrap().fee",
                      "```",
                      "",
                      "Emits `JudgementRequested` if successful."
                    ]
                  },
                  {
                    "name": "cancel_request",
                    "fields": [
                      {
                        "name": "reg_index",
                        "type": 4,
                        "typeName": "RegistrarIndex"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Cancel a previous request.",
                      "",
                      "Payment: A previously reserved deposit is returned on success.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have a",
                      "registered identity.",
                      "",
                      "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                      "",
                      "Emits `JudgementUnrequested` if successful."
                    ]
                  },
                  {
                    "name": "set_fee",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "RegistrarIndex"
                      },
                      {
                        "name": "fee",
                        "type": 51,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Set the fee required for a judgement to be requested from a registrar.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                      "of the registrar whose index is `index`.",
                      "",
                      "- `index`: the index of the registrar whose fee is to be set.",
                      "- `fee`: the new fee."
                    ]
                  },
                  {
                    "name": "set_account_id",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "RegistrarIndex"
                      },
                      {
                        "name": "new",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Change the account associated with a registrar.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                      "of the registrar whose index is `index`.",
                      "",
                      "- `index`: the index of the registrar whose fee is to be set.",
                      "- `new`: the new account ID."
                    ]
                  },
                  {
                    "name": "set_fields",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "RegistrarIndex"
                      },
                      {
                        "name": "fields",
                        "type": 12,
                        "typeName": "<T::IdentityInformation as IdentityInformationProvider>::\nFieldsIdentifier"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Set the field information for a registrar.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                      "of the registrar whose index is `index`.",
                      "",
                      "- `index`: the index of the registrar whose fee is to be set.",
                      "- `fields`: the fields that the registrar concerns themselves with."
                    ]
                  },
                  {
                    "name": "provide_judgement",
                    "fields": [
                      {
                        "name": "reg_index",
                        "type": 50,
                        "typeName": "RegistrarIndex"
                      },
                      {
                        "name": "target",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "judgement",
                        "type": 259,
                        "typeName": "Judgement<BalanceOf<T>>"
                      },
                      {
                        "name": "identity",
                        "type": 13,
                        "typeName": "T::Hash"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Provide a judgement for an account's identity.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                      "of the registrar whose index is `reg_index`.",
                      "",
                      "- `reg_index`: the index of the registrar whose judgement is being made.",
                      "- `target`: the account whose identity the judgement is upon. This must be an account",
                      "  with a registered identity.",
                      "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                      "- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is",
                      "  provided.",
                      "",
                      "Note: Judgements do not apply to a username.",
                      "",
                      "Emits `JudgementGiven` if successful."
                    ]
                  },
                  {
                    "name": "kill_identity",
                    "fields": [
                      {
                        "name": "target",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Remove an account's identity and sub-account information and slash the deposits.",
                      "",
                      "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                      "`Slash`. Verification request deposits are not returned; they should be cancelled",
                      "manually using `cancel_request`.",
                      "",
                      "The dispatch origin for this call must match `T::ForceOrigin`.",
                      "",
                      "- `target`: the account whose identity the judgement is upon. This must be an account",
                      "  with a registered identity.",
                      "",
                      "Emits `IdentityKilled` if successful."
                    ]
                  },
                  {
                    "name": "add_sub",
                    "fields": [
                      {
                        "name": "sub",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "data",
                        "type": 226,
                        "typeName": "Data"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Add the given account to the sender's subs.",
                      "",
                      "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                      "to the sender.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                      "sub identity of `sub`."
                    ]
                  },
                  {
                    "name": "rename_sub",
                    "fields": [
                      {
                        "name": "sub",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "data",
                        "type": 226,
                        "typeName": "Data"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Alter the associated name of the given sub-account.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                      "sub identity of `sub`."
                    ]
                  },
                  {
                    "name": "remove_sub",
                    "fields": [
                      {
                        "name": "sub",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Remove the given account from the sender's subs.",
                      "",
                      "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                      "to the sender.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                      "sub identity of `sub`."
                    ]
                  },
                  {
                    "name": "quit_sub",
                    "index": 14,
                    "docs": [
                      "Remove the sender as a sub-account.",
                      "",
                      "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                      "to the sender (*not* the original depositor).",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                      "super-identity.",
                      "",
                      "NOTE: This should not normally be used, but is provided in the case that the non-",
                      "controller of an account is maliciously registered as a sub-account."
                    ]
                  },
                  {
                    "name": "add_username_authority",
                    "fields": [
                      {
                        "name": "authority",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "suffix",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "allocation",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Add an `AccountId` with permission to grant usernames with a given `suffix` appended.",
                      "",
                      "The authority can grant up to `allocation` usernames. To top up the allocation or",
                      "change the account used to grant usernames, this call can be used with the updated",
                      "parameters to overwrite the existing configuration."
                    ]
                  },
                  {
                    "name": "remove_username_authority",
                    "fields": [
                      {
                        "name": "suffix",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "authority",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Remove `authority` from the username authorities."
                    ]
                  },
                  {
                    "name": "set_username_for",
                    "fields": [
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "username",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "signature",
                        "type": 260,
                        "typeName": "Option<T::OffchainSignature>"
                      },
                      {
                        "name": "use_allocation",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Set the username for `who`. Must be called by a username authority.",
                      "",
                      "If `use_allocation` is set, the authority must have a username allocation available to",
                      "spend. Otherwise, the authority will need to put up a deposit for registering the",
                      "username.",
                      "",
                      "Users can either pre-sign their usernames or",
                      "accept them later.",
                      "",
                      "Usernames must:",
                      "  - Only contain lowercase ASCII characters or digits.",
                      "  - When combined with the suffix of the issuing authority be _less than_ the",
                      "    `MaxUsernameLength`."
                    ]
                  },
                  {
                    "name": "accept_username",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Accept a given username that an `authority` granted. The call must include the full",
                      "username, as in `username.suffix`."
                    ]
                  },
                  {
                    "name": "remove_expired_approval",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Remove an expired username approval. The username was approved by an authority but never",
                      "accepted by the user and must now be beyond its expiration. The call must include the",
                      "full username, as in `username.suffix`."
                    ]
                  },
                  {
                    "name": "set_primary_username",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Set a given username as the primary. The username should include the suffix."
                    ]
                  },
                  {
                    "name": "unbind_username",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "Start the process of removing a username by placing it in the unbinding usernames map.",
                      "Once the grace period has passed, the username can be deleted by calling",
                      "[remove_username](crate::Call::remove_username)."
                    ]
                  },
                  {
                    "name": "remove_username",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Permanently delete a username which has been unbinding for longer than the grace period.",
                      "Caller is refunded the fee if the username expired and the removal was successful."
                    ]
                  },
                  {
                    "name": "kill_username",
                    "fields": [
                      {
                        "name": "username",
                        "type": 36,
                        "typeName": "Username<T>"
                      }
                    ],
                    "index": 23,
                    "docs": [
                      "Call with [ForceOrigin](crate::Config::ForceOrigin) privileges which deletes a username",
                      "and slashes any deposit associated with it."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Identity pallet declaration."
            ]
          }
        },
        {
          "id": 221,
          "type": {
            "path": [
              "sp_runtime",
              "multiaddress",
              "MultiAddress"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "AccountIndex",
                "type": 34
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Id",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "type": 222,
                        "typeName": "AccountIndex"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Raw",
                    "fields": [
                      {
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Address32",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Address20",
                    "fields": [
                      {
                        "type": 58,
                        "typeName": "[u8; 20]"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 222,
          "type": {
            "def": {
              "compact": {
                "type": 34
              }
            }
          }
        },
        {
          "id": 223,
          "type": {
            "path": [
              "pallet_identity",
              "legacy",
              "IdentityInfo"
            ],
            "params": [
              {
                "name": "FieldLimit",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "additional",
                    "type": 224,
                    "typeName": "BoundedVec<(Data, Data), FieldLimit>"
                  },
                  {
                    "name": "display",
                    "type": 226,
                    "typeName": "Data"
                  },
                  {
                    "name": "legal",
                    "type": 226,
                    "typeName": "Data"
                  },
                  {
                    "name": "web",
                    "type": 226,
                    "typeName": "Data"
                  },
                  {
                    "name": "riot",
                    "type": 226,
                    "typeName": "Data"
                  },
                  {
                    "name": "email",
                    "type": 226,
                    "typeName": "Data"
                  },
                  {
                    "name": "pgp_fingerprint",
                    "type": 256,
                    "typeName": "Option<[u8; 20]>"
                  },
                  {
                    "name": "image",
                    "type": 226,
                    "typeName": "Data"
                  },
                  {
                    "name": "twitter",
                    "type": 226,
                    "typeName": "Data"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 224,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 225
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 255,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 225,
          "type": {
            "def": {
              "tuple": [
                226,
                226
              ]
            }
          }
        },
        {
          "id": 226,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "Data"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Raw0",
                    "fields": [
                      {
                        "type": 227
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Raw1",
                    "fields": [
                      {
                        "type": 228
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Raw2",
                    "fields": [
                      {
                        "type": 229
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Raw3",
                    "fields": [
                      {
                        "type": 230
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Raw4",
                    "fields": [
                      {
                        "type": 18
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Raw5",
                    "fields": [
                      {
                        "type": 231
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "Raw6",
                    "fields": [
                      {
                        "type": 232
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "Raw7",
                    "fields": [
                      {
                        "type": 233
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "Raw8",
                    "fields": [
                      {
                        "type": 109
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "Raw9",
                    "fields": [
                      {
                        "type": 234
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "Raw10",
                    "fields": [
                      {
                        "type": 235
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "Raw11",
                    "fields": [
                      {
                        "type": 236
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "Raw12",
                    "fields": [
                      {
                        "type": 237
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "Raw13",
                    "fields": [
                      {
                        "type": 238
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "Raw14",
                    "fields": [
                      {
                        "type": 239
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "Raw15",
                    "fields": [
                      {
                        "type": 240
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "Raw16",
                    "fields": [
                      {
                        "type": 110
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "Raw17",
                    "fields": [
                      {
                        "type": 241
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "Raw18",
                    "fields": [
                      {
                        "type": 242
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "Raw19",
                    "fields": [
                      {
                        "type": 243
                      }
                    ],
                    "index": 20
                  },
                  {
                    "name": "Raw20",
                    "fields": [
                      {
                        "type": 58
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "Raw21",
                    "fields": [
                      {
                        "type": 244
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "Raw22",
                    "fields": [
                      {
                        "type": 245
                      }
                    ],
                    "index": 23
                  },
                  {
                    "name": "Raw23",
                    "fields": [
                      {
                        "type": 246
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Raw24",
                    "fields": [
                      {
                        "type": 247
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "Raw25",
                    "fields": [
                      {
                        "type": 248
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "Raw26",
                    "fields": [
                      {
                        "type": 249
                      }
                    ],
                    "index": 27
                  },
                  {
                    "name": "Raw27",
                    "fields": [
                      {
                        "type": 250
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "Raw28",
                    "fields": [
                      {
                        "type": 251
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "Raw29",
                    "fields": [
                      {
                        "type": 252
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "Raw30",
                    "fields": [
                      {
                        "type": 253
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "Raw31",
                    "fields": [
                      {
                        "type": 254
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "Raw32",
                    "fields": [
                      {
                        "type": 1
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "BlakeTwo256",
                    "fields": [
                      {
                        "type": 1
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "Sha256",
                    "fields": [
                      {
                        "type": 1
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "Keccak256",
                    "fields": [
                      {
                        "type": 1
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "ShaThree256",
                    "fields": [
                      {
                        "type": 1
                      }
                    ],
                    "index": 37
                  }
                ]
              }
            }
          }
        },
        {
          "id": 227,
          "type": {
            "def": {
              "array": {
                "len": 0,
                "type": 2
              }
            }
          }
        },
        {
          "id": 228,
          "type": {
            "def": {
              "array": {
                "len": 1,
                "type": 2
              }
            }
          }
        },
        {
          "id": 229,
          "type": {
            "def": {
              "array": {
                "len": 2,
                "type": 2
              }
            }
          }
        },
        {
          "id": 230,
          "type": {
            "def": {
              "array": {
                "len": 3,
                "type": 2
              }
            }
          }
        },
        {
          "id": 231,
          "type": {
            "def": {
              "array": {
                "len": 5,
                "type": 2
              }
            }
          }
        },
        {
          "id": 232,
          "type": {
            "def": {
              "array": {
                "len": 6,
                "type": 2
              }
            }
          }
        },
        {
          "id": 233,
          "type": {
            "def": {
              "array": {
                "len": 7,
                "type": 2
              }
            }
          }
        },
        {
          "id": 234,
          "type": {
            "def": {
              "array": {
                "len": 9,
                "type": 2
              }
            }
          }
        },
        {
          "id": 235,
          "type": {
            "def": {
              "array": {
                "len": 10,
                "type": 2
              }
            }
          }
        },
        {
          "id": 236,
          "type": {
            "def": {
              "array": {
                "len": 11,
                "type": 2
              }
            }
          }
        },
        {
          "id": 237,
          "type": {
            "def": {
              "array": {
                "len": 12,
                "type": 2
              }
            }
          }
        },
        {
          "id": 238,
          "type": {
            "def": {
              "array": {
                "len": 13,
                "type": 2
              }
            }
          }
        },
        {
          "id": 239,
          "type": {
            "def": {
              "array": {
                "len": 14,
                "type": 2
              }
            }
          }
        },
        {
          "id": 240,
          "type": {
            "def": {
              "array": {
                "len": 15,
                "type": 2
              }
            }
          }
        },
        {
          "id": 241,
          "type": {
            "def": {
              "array": {
                "len": 17,
                "type": 2
              }
            }
          }
        },
        {
          "id": 242,
          "type": {
            "def": {
              "array": {
                "len": 18,
                "type": 2
              }
            }
          }
        },
        {
          "id": 243,
          "type": {
            "def": {
              "array": {
                "len": 19,
                "type": 2
              }
            }
          }
        },
        {
          "id": 244,
          "type": {
            "def": {
              "array": {
                "len": 21,
                "type": 2
              }
            }
          }
        },
        {
          "id": 245,
          "type": {
            "def": {
              "array": {
                "len": 22,
                "type": 2
              }
            }
          }
        },
        {
          "id": 246,
          "type": {
            "def": {
              "array": {
                "len": 23,
                "type": 2
              }
            }
          }
        },
        {
          "id": 247,
          "type": {
            "def": {
              "array": {
                "len": 24,
                "type": 2
              }
            }
          }
        },
        {
          "id": 248,
          "type": {
            "def": {
              "array": {
                "len": 25,
                "type": 2
              }
            }
          }
        },
        {
          "id": 249,
          "type": {
            "def": {
              "array": {
                "len": 26,
                "type": 2
              }
            }
          }
        },
        {
          "id": 250,
          "type": {
            "def": {
              "array": {
                "len": 27,
                "type": 2
              }
            }
          }
        },
        {
          "id": 251,
          "type": {
            "def": {
              "array": {
                "len": 28,
                "type": 2
              }
            }
          }
        },
        {
          "id": 252,
          "type": {
            "def": {
              "array": {
                "len": 29,
                "type": 2
              }
            }
          }
        },
        {
          "id": 253,
          "type": {
            "def": {
              "array": {
                "len": 30,
                "type": 2
              }
            }
          }
        },
        {
          "id": 254,
          "type": {
            "def": {
              "array": {
                "len": 31,
                "type": 2
              }
            }
          }
        },
        {
          "id": 255,
          "type": {
            "def": {
              "sequence": {
                "type": 225
              }
            }
          }
        },
        {
          "id": 256,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 58
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 58
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 257,
          "type": {
            "def": {
              "sequence": {
                "type": 258
              }
            }
          }
        },
        {
          "id": 258,
          "type": {
            "def": {
              "tuple": [
                0,
                226
              ]
            }
          }
        },
        {
          "id": 259,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "Judgement"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unknown",
                    "index": 0
                  },
                  {
                    "name": "FeePaid",
                    "fields": [
                      {
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Reasonable",
                    "index": 2
                  },
                  {
                    "name": "KnownGood",
                    "index": 3
                  },
                  {
                    "name": "OutOfDate",
                    "index": 4
                  },
                  {
                    "name": "LowQuality",
                    "index": 5
                  },
                  {
                    "name": "Erroneous",
                    "index": 6
                  }
                ]
              }
            }
          }
        },
        {
          "id": 260,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 261
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 261
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 261,
          "type": {
            "path": [
              "sp_runtime",
              "MultiSignature"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ed25519",
                    "fields": [
                      {
                        "type": 262,
                        "typeName": "ed25519::Signature"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Sr25519",
                    "fields": [
                      {
                        "type": 262,
                        "typeName": "sr25519::Signature"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Ecdsa",
                    "fields": [
                      {
                        "type": 263,
                        "typeName": "ecdsa::Signature"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 262,
          "type": {
            "def": {
              "array": {
                "len": 64,
                "type": 2
              }
            }
          }
        },
        {
          "id": 263,
          "type": {
            "def": {
              "array": {
                "len": 65,
                "type": 2
              }
            }
          }
        },
        {
          "id": 264,
          "type": {
            "path": [
              "pallet_timestamp",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set",
                    "fields": [
                      {
                        "name": "now",
                        "type": 11,
                        "typeName": "T::Moment"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Set the current time.",
                      "",
                      "This call should be invoked exactly once per block. It will panic at the finalization",
                      "phase, if this call hasn't been invoked by that time.",
                      "",
                      "The timestamp should be greater than the previous one by the amount specified by",
                      "[`Config::MinimumPeriod`].",
                      "",
                      "The dispatch origin for this call must be _None_.",
                      "",
                      "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                      "that changing the complexity of this call could result exhausting the resources in a",
                      "block to execute any other calls.",
                      "",
                      "## Complexity",
                      "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                      "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                      "  `on_finalize`)",
                      "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 265,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "as_multi_threshold_1",
                    "fields": [
                      {
                        "name": "other_signatories",
                        "type": 79,
                        "typeName": "Vec<T::AccountId>"
                      },
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Immediately dispatch a multi-signature call using a single approval from the caller.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `other_signatories`: The accounts (other than the sender) who are part of the",
                      "multi-signature, but do not participate in the approval process.",
                      "- `call`: The call to be executed.",
                      "",
                      "Result is equivalent to the dispatched result.",
                      "",
                      "## Complexity",
                      "O(Z + C) where Z is the length of the call and C its execution weight."
                    ]
                  },
                  {
                    "name": "as_multi",
                    "fields": [
                      {
                        "name": "threshold",
                        "type": 41,
                        "typeName": "u16"
                      },
                      {
                        "name": "other_signatories",
                        "type": 79,
                        "typeName": "Vec<T::AccountId>"
                      },
                      {
                        "name": "maybe_timepoint",
                        "type": 266,
                        "typeName": "Option<Timepoint<BlockNumberFor<T>>>"
                      },
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Register approval for a dispatch to be made from a deterministic composite account if",
                      "approved by a total of `threshold - 1` of `other_signatories`.",
                      "",
                      "If there are enough, then dispatch the call.",
                      "",
                      "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                      "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                      "is cancelled.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                      "- `other_signatories`: The accounts (other than the sender) who can approve this",
                      "dispatch. May not be empty.",
                      "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                      "not the first approval, then it must be `Some`, with the timepoint (block number and",
                      "transaction index) of the first approval transaction.",
                      "- `call`: The call to be executed.",
                      "",
                      "NOTE: Unless this is the final approval, you will generally want to use",
                      "`approve_as_multi` instead, since it only requires a hash of the call.",
                      "",
                      "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                      "on success, result is `Ok` and the result from the interior call, if it was executed,",
                      "may be found in the deposited `MultisigExecuted` event.",
                      "",
                      "## Complexity",
                      "- `O(S + Z + Call)`.",
                      "- Up to one balance-reserve or unreserve operation.",
                      "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                      "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                      "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                      "- One encode & hash, both of complexity `O(S)`.",
                      "- Up to one binary search and insert (`O(logS + S)`).",
                      "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                      "- One event.",
                      "- The weight of the `call`.",
                      "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                      "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                    ]
                  },
                  {
                    "name": "approve_as_multi",
                    "fields": [
                      {
                        "name": "threshold",
                        "type": 41,
                        "typeName": "u16"
                      },
                      {
                        "name": "other_signatories",
                        "type": 79,
                        "typeName": "Vec<T::AccountId>"
                      },
                      {
                        "name": "maybe_timepoint",
                        "type": 266,
                        "typeName": "Option<Timepoint<BlockNumberFor<T>>>"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Register approval for a dispatch to be made from a deterministic composite account if",
                      "approved by a total of `threshold - 1` of `other_signatories`.",
                      "",
                      "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                      "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                      "is cancelled.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                      "- `other_signatories`: The accounts (other than the sender) who can approve this",
                      "dispatch. May not be empty.",
                      "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                      "not the first approval, then it must be `Some`, with the timepoint (block number and",
                      "transaction index) of the first approval transaction.",
                      "- `call_hash`: The hash of the call to be executed.",
                      "",
                      "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                      "",
                      "## Complexity",
                      "- `O(S)`.",
                      "- Up to one balance-reserve or unreserve operation.",
                      "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                      "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                      "- One encode & hash, both of complexity `O(S)`.",
                      "- Up to one binary search and insert (`O(logS + S)`).",
                      "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                      "- One event.",
                      "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                      "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
                    ]
                  },
                  {
                    "name": "cancel_as_multi",
                    "fields": [
                      {
                        "name": "threshold",
                        "type": 41,
                        "typeName": "u16"
                      },
                      {
                        "name": "other_signatories",
                        "type": 79,
                        "typeName": "Vec<T::AccountId>"
                      },
                      {
                        "name": "timepoint",
                        "type": 38,
                        "typeName": "Timepoint<BlockNumberFor<T>>"
                      },
                      {
                        "name": "call_hash",
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                      "for this operation will be unreserved on success.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                      "- `other_signatories`: The accounts (other than the sender) who can approve this",
                      "dispatch. May not be empty.",
                      "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                      "transaction for this dispatch.",
                      "- `call_hash`: The hash of the call to be executed.",
                      "",
                      "## Complexity",
                      "- `O(S)`.",
                      "- Up to one balance-reserve or unreserve operation.",
                      "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                      "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                      "- One encode & hash, both of complexity `O(S)`.",
                      "- One event.",
                      "- I/O: 1 read `O(S)`, one remove.",
                      "- Storage: removes one item."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 266,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 38
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 38
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 267,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "proxy",
                    "fields": [
                      {
                        "name": "real",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "force_proxy_type",
                        "type": 268,
                        "typeName": "Option<T::ProxyType>"
                      },
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Dispatch the given `call` from an account that the sender is authorised for through",
                      "`add_proxy`.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `real`: The account that the proxy will make a call on behalf of.",
                      "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                      "- `call`: The call to be made by the `real` account."
                    ]
                  },
                  {
                    "name": "add_proxy",
                    "fields": [
                      {
                        "name": "delegate",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "proxy_type",
                        "type": 40,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Register a proxy account for the sender that is able to make calls on its behalf.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `proxy`: The account that the `caller` would like to make a proxy.",
                      "- `proxy_type`: The permissions allowed for this proxy account.",
                      "- `delay`: The announcement period required of the initial proxy. Will generally be",
                      "zero."
                    ]
                  },
                  {
                    "name": "remove_proxy",
                    "fields": [
                      {
                        "name": "delegate",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "proxy_type",
                        "type": 40,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Unregister a proxy account for the sender.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                      "- `proxy_type`: The permissions currently enabled for the removed proxy account."
                    ]
                  },
                  {
                    "name": "remove_proxies",
                    "index": 3,
                    "docs": [
                      "Unregister all proxy accounts for the sender.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "WARNING: This may be called on accounts created by `pure`, however if done, then",
                      "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
                    ]
                  },
                  {
                    "name": "create_pure",
                    "fields": [
                      {
                        "name": "proxy_type",
                        "type": 40,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "index",
                        "type": 41,
                        "typeName": "u16"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                      "initialize it with a proxy of `proxy_type` for `origin` sender.",
                      "",
                      "Requires a `Signed` origin.",
                      "",
                      "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                      "new account. This will almost always be the most permissive `ProxyType` possible to",
                      "allow for maximum flexibility.",
                      "- `index`: A disambiguation index, in case this is called multiple times in the same",
                      "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                      "want to use `0`.",
                      "- `delay`: The announcement period required of the initial proxy. Will generally be",
                      "zero.",
                      "",
                      "Fails with `Duplicate` if this has already been called in this transaction, from the",
                      "same sender, with the same parameters.",
                      "",
                      "Fails if there are insufficient funds to pay for deposit."
                    ]
                  },
                  {
                    "name": "kill_pure",
                    "fields": [
                      {
                        "name": "spawner",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "proxy_type",
                        "type": 40,
                        "typeName": "T::ProxyType"
                      },
                      {
                        "name": "index",
                        "type": 41,
                        "typeName": "u16"
                      },
                      {
                        "name": "height",
                        "type": 50,
                        "typeName": "BlockNumberFor<T>"
                      },
                      {
                        "name": "ext_index",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Removes a previously spawned pure proxy.",
                      "",
                      "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                      "inaccessible.",
                      "",
                      "Requires a `Signed` origin, and the sender account must have been created by a call to",
                      "`pure` with corresponding parameters.",
                      "",
                      "- `spawner`: The account that originally called `pure` to create this account.",
                      "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                      "- `proxy_type`: The proxy type originally passed to `pure`.",
                      "- `height`: The height of the chain when the call to `pure` was processed.",
                      "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                      "",
                      "Fails with `NoPermission` in case the caller is not a previously created pure",
                      "account whose `pure` call has corresponding parameters."
                    ]
                  },
                  {
                    "name": "announce",
                    "fields": [
                      {
                        "name": "real",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "CallHashOf<T>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Publish the hash of a proxy-call that will be made in the future.",
                      "",
                      "This must be called some number of blocks before the corresponding `proxy` is attempted",
                      "if the delay associated with the proxy relationship is greater than zero.",
                      "",
                      "No more than `MaxPending` announcements may be made at any one time.",
                      "",
                      "This will take a deposit of `AnnouncementDepositFactor` as well as",
                      "`AnnouncementDepositBase` if there are no other pending announcements.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                      "",
                      "Parameters:",
                      "- `real`: The account that the proxy will make a call on behalf of.",
                      "- `call_hash`: The hash of the call to be made by the `real` account."
                    ]
                  },
                  {
                    "name": "remove_announcement",
                    "fields": [
                      {
                        "name": "real",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "CallHashOf<T>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Remove a given announcement.",
                      "",
                      "May be called by a proxy account to remove a call they previously announced and return",
                      "the deposit.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `real`: The account that the proxy will make a call on behalf of.",
                      "- `call_hash`: The hash of the call to be made by the `real` account."
                    ]
                  },
                  {
                    "name": "reject_announcement",
                    "fields": [
                      {
                        "name": "delegate",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "call_hash",
                        "type": 13,
                        "typeName": "CallHashOf<T>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Remove the given announcement of a delegate.",
                      "",
                      "May be called by a target (proxied) account to remove a call that one of their delegates",
                      "(`delegate`) has announced they want to execute. The deposit is returned.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `delegate`: The account that previously announced the call.",
                      "- `call_hash`: The hash of the call to be made."
                    ]
                  },
                  {
                    "name": "proxy_announced",
                    "fields": [
                      {
                        "name": "delegate",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "real",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "force_proxy_type",
                        "type": 268,
                        "typeName": "Option<T::ProxyType>"
                      },
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Dispatch the given `call` from an account that the sender is authorized for through",
                      "`add_proxy`.",
                      "",
                      "Removes any corresponding announcement(s).",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "Parameters:",
                      "- `real`: The account that the proxy will make a call on behalf of.",
                      "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                      "- `call`: The call to be made by the `real` account."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 268,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 40
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 40
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 269,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_validation_data",
                    "fields": [
                      {
                        "name": "data",
                        "type": 270,
                        "typeName": "ParachainInherentData"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Set the current validation data.",
                      "",
                      "This should be invoked exactly once per block. It will panic at the finalization",
                      "phase if the call was not invoked.",
                      "",
                      "The dispatch origin for this call must be `Inherent`",
                      "",
                      "As a side effect, this function upgrades the current validation function",
                      "if the appropriate time has come."
                    ]
                  },
                  {
                    "name": "sudo_send_upward_message",
                    "fields": [
                      {
                        "name": "message",
                        "type": 14,
                        "typeName": "UpwardMessage"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 270,
          "type": {
            "path": [
              "cumulus_primitives_parachain_inherent",
              "ParachainInherentData"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "validation_data",
                    "type": 271,
                    "typeName": "PersistedValidationData"
                  },
                  {
                    "name": "relay_chain_state",
                    "type": 273,
                    "typeName": "sp_trie::StorageProof"
                  },
                  {
                    "name": "downward_messages",
                    "type": 275,
                    "typeName": "Vec<InboundDownwardMessage>"
                  },
                  {
                    "name": "horizontal_messages",
                    "type": 277,
                    "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 271,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "PersistedValidationData"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parent_head",
                    "type": 272,
                    "typeName": "HeadData"
                  },
                  {
                    "name": "relay_parent_number",
                    "type": 4,
                    "typeName": "N"
                  },
                  {
                    "name": "relay_parent_storage_root",
                    "type": 13,
                    "typeName": "H"
                  },
                  {
                    "name": "max_pov_size",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 272,
          "type": {
            "path": [
              "polkadot_parachain_primitives",
              "primitives",
              "HeadData"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 273,
          "type": {
            "path": [
              "sp_trie",
              "storage_proof",
              "StorageProof"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "trie_nodes",
                    "type": 274,
                    "typeName": "BTreeSet<Vec<u8>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 274,
          "type": {
            "path": [
              "BTreeSet"
            ],
            "params": [
              {
                "name": "T",
                "type": 14
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 205
                  }
                ]
              }
            }
          }
        },
        {
          "id": 275,
          "type": {
            "def": {
              "sequence": {
                "type": 276
              }
            }
          }
        },
        {
          "id": 276,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "InboundDownwardMessage"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "sent_at",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "msg",
                    "type": 14,
                    "typeName": "DownwardMessage"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 277,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 174
              },
              {
                "name": "V",
                "type": 278
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 280
                  }
                ]
              }
            }
          }
        },
        {
          "id": 278,
          "type": {
            "def": {
              "sequence": {
                "type": 279
              }
            }
          }
        },
        {
          "id": 279,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "InboundHrmpMessage"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "sent_at",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "data",
                    "type": 14,
                    "typeName": "alloc::vec::Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 280,
          "type": {
            "def": {
              "sequence": {
                "type": 281
              }
            }
          }
        },
        {
          "id": 281,
          "type": {
            "def": {
              "tuple": [
                174,
                278
              ]
            }
          }
        },
        {
          "id": 282,
          "type": {
            "path": [
              "staging_parachain_info",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {}
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 283,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "transfer_allow_death",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Transfer some liquid free balance to another account.",
                      "",
                      "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                      "If the sender's account is below the existential deposit as a result",
                      "of the transfer, the account will be reaped.",
                      "",
                      "The dispatch origin for this call must be `Signed` by the transactor."
                    ]
                  },
                  {
                    "name": "force_transfer",
                    "fields": [
                      {
                        "name": "source",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                      "may be specified."
                    ]
                  },
                  {
                    "name": "transfer_keep_alive",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                      "kill the origin account.",
                      "",
                      "99% of the time you want [`transfer_allow_death`] instead.",
                      "",
                      "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
                    ]
                  },
                  {
                    "name": "transfer_all",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "keep_alive",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Transfer the entire transferable balance from the caller account.",
                      "",
                      "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                      "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                      "transferred by this function. To ensure that this function results in a killed account,",
                      "you might need to prepare the account by removing any reference counters, storage",
                      "deposits, etc...",
                      "",
                      "The dispatch origin of this call must be Signed.",
                      "",
                      "- `dest`: The recipient of the transfer.",
                      "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                      "  of the funds the account has, causing the sender account to be killed (false), or",
                      "  transfer everything except at least the existential deposit, which will guarantee to",
                      "  keep the sender account alive (true)."
                    ]
                  },
                  {
                    "name": "force_unreserve",
                    "fields": [
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Unreserve some balance from a user by force.",
                      "",
                      "Can only be called by ROOT."
                    ]
                  },
                  {
                    "name": "upgrade_accounts",
                    "fields": [
                      {
                        "name": "who",
                        "type": 79,
                        "typeName": "Vec<T::AccountId>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Upgrade a specified account.",
                      "",
                      "- `origin`: Must be `Signed`.",
                      "- `who`: The account to be upgraded.",
                      "",
                      "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                      "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                      "possibility of churn)."
                    ]
                  },
                  {
                    "name": "force_set_balance",
                    "fields": [
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "new_free",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Set the regular balance of a given account.",
                      "",
                      "The dispatch origin for this call is `root`."
                    ]
                  },
                  {
                    "name": "force_adjust_total_issuance",
                    "fields": [
                      {
                        "name": "direction",
                        "type": 284,
                        "typeName": "AdjustmentDirection"
                      },
                      {
                        "name": "delta",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Adjust the total issuance in a saturating way.",
                      "",
                      "Can only be called by root and always needs a positive `delta`.",
                      "",
                      "# Example"
                    ]
                  },
                  {
                    "name": "burn",
                    "fields": [
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "keep_alive",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Burn the specified liquid free balance from the origin account.",
                      "",
                      "If the origin's account ends up below the existential deposit as a result",
                      "of the burn and `keep_alive` is false, the account will be reaped.",
                      "",
                      "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                      "this `burn` operation will reduce total issuance by the amount _burned_."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 284,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "AdjustmentDirection"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Increase",
                    "index": 0
                  },
                  {
                    "name": "Decrease",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 285,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "vest",
                    "index": 0,
                    "docs": [
                      "Unlock any vested funds of the sender account.",
                      "",
                      "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                      "locked under this pallet.",
                      "",
                      "Emits either `VestingCompleted` or `VestingUpdated`.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "vest_other",
                    "fields": [
                      {
                        "name": "target",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Unlock any vested funds of a `target` account.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                      "locked under this pallet.",
                      "",
                      "Emits either `VestingCompleted` or `VestingUpdated`.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "vested_transfer",
                    "fields": [
                      {
                        "name": "target",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "schedule",
                        "type": 286,
                        "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Create a vested transfer.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `target`: The account receiving the vested funds.",
                      "- `schedule`: The vesting schedule attached to the transfer.",
                      "",
                      "Emits `VestingCreated`.",
                      "",
                      "NOTE: This will unlock all schedules through the current block.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "force_vested_transfer",
                    "fields": [
                      {
                        "name": "source",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "target",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "schedule",
                        "type": 286,
                        "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Force a vested transfer.",
                      "",
                      "The dispatch origin for this call must be _Root_.",
                      "",
                      "- `source`: The account whose funds should be transferred.",
                      "- `target`: The account that should be transferred the vested funds.",
                      "- `schedule`: The vesting schedule attached to the transfer.",
                      "",
                      "Emits `VestingCreated`.",
                      "",
                      "NOTE: This will unlock all schedules through the current block.",
                      "",
                      "## Complexity",
                      "- `O(1)`."
                    ]
                  },
                  {
                    "name": "merge_schedules",
                    "fields": [
                      {
                        "name": "schedule1_index",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "schedule2_index",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                      "the highest possible start and end blocks. If both schedules have already started the",
                      "current block will be used as the schedule start; with the caveat that if one schedule",
                      "is finished by the current block, the other will be treated as the new merged schedule,",
                      "unmodified.",
                      "",
                      "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                      "NOTE: This will unlock all schedules through the current block prior to merging.",
                      "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                      "and both will be removed.",
                      "",
                      "Merged schedule attributes:",
                      "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                      "  current_block)`.",
                      "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                      "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                      "",
                      "The dispatch origin for this call must be _Signed_.",
                      "",
                      "- `schedule1_index`: index of the first schedule to merge.",
                      "- `schedule2_index`: index of the second schedule to merge."
                    ]
                  },
                  {
                    "name": "force_remove_vesting_schedule",
                    "fields": [
                      {
                        "name": "target",
                        "type": 221,
                        "typeName": "<T::Lookup as StaticLookup>::Source"
                      },
                      {
                        "name": "schedule_index",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Force remove a vesting schedule",
                      "",
                      "The dispatch origin for this call must be _Root_.",
                      "",
                      "- `target`: An account that has a vesting schedule",
                      "- `schedule_index`: The vesting schedule index that should be removed"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 286,
          "type": {
            "path": [
              "pallet_vesting",
              "vesting_info",
              "VestingInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "locked",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "per_block",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "starting_block",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 287,
          "type": {
            "path": [
              "pallet_inflation",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "force_set_inflation_params",
                    "fields": [
                      {
                        "name": "params",
                        "type": 288,
                        "typeName": "InflationParameters"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Used to force-set the inflation parameters.",
                      "The parameters must be valid, all parts summing up to one whole (100%), otherwise the call will fail.",
                      "",
                      "Must be called by `root` origin.",
                      "",
                      "Purpose of the call is testing & handling unforeseen circumstances."
                    ]
                  },
                  {
                    "name": "force_inflation_recalculation",
                    "fields": [
                      {
                        "name": "next_era",
                        "type": 4,
                        "typeName": "EraNumber"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Used to force inflation recalculation.",
                      "This is done in the same way as it would be done in an appropriate block, but this call forces it.",
                      "",
                      "Must be called by `root` origin.",
                      "",
                      "Purpose of the call is testing & handling unforeseen circumstances."
                    ]
                  },
                  {
                    "name": "force_readjust_config",
                    "index": 2,
                    "docs": [
                      "Re-adjust the existing inflation configuration using the current inflation parameters.",
                      "",
                      "It might seem similar to forcing the inflation recalculation, but it's not.",
                      "This function adjusts the existing configuration, respecting the `max_emission` value used to calculate the current inflation config.",
                      "(The 'force' approach uses the current total issuance)",
                      "",
                      "This call should be used in case inflation parameters have changed during the cycle, and the configuration should be adjusted now.",
                      "",
                      "NOTE:",
                      "The call will do the best possible approximation of what the calculated max emission was at the moment when last inflation recalculation was done.",
                      "But due to rounding losses, it's not possible to get the exact same value. As a consequence, repeated calls to this function",
                      "might result in changes to the configuration, even though the inflation parameters haven't changed.",
                      "However, since this function isn't supposed to be called often, and changes are minimal, this is acceptable."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 288,
          "type": {
            "path": [
              "pallet_inflation",
              "InflationParameters"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_inflation_rate",
                    "type": 52,
                    "typeName": "Perquintill"
                  },
                  {
                    "name": "treasury_part",
                    "type": 52,
                    "typeName": "Perquintill"
                  },
                  {
                    "name": "collators_part",
                    "type": 52,
                    "typeName": "Perquintill"
                  },
                  {
                    "name": "dapps_part",
                    "type": 52,
                    "typeName": "Perquintill"
                  },
                  {
                    "name": "base_stakers_part",
                    "type": 52,
                    "typeName": "Perquintill"
                  },
                  {
                    "name": "adjustable_stakers_part",
                    "type": 52,
                    "typeName": "Perquintill"
                  },
                  {
                    "name": "bonus_part",
                    "type": 52,
                    "typeName": "Perquintill"
                  },
                  {
                    "name": "ideal_staking_rate",
                    "type": 52,
                    "typeName": "Perquintill"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 289,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "unbond_and_unstake",
                    "fields": [
                      {
                        "name": "contract_id",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Wrapper around _legacy-like_ `unbond_and_unstake`.",
                      "",
                      "Used to support legacy Ledger users so they can start the unlocking process for their funds."
                    ]
                  },
                  {
                    "name": "withdraw_unbonded",
                    "index": 5,
                    "docs": [
                      "Wrapper around _legacy-like_ `withdraw_unbonded`.",
                      "",
                      "Used to support legacy Ledger users so they can reclaim unlocked chunks back into",
                      "their _transferable_ free balance."
                    ]
                  },
                  {
                    "name": "maintenance_mode",
                    "fields": [
                      {
                        "name": "enabled",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Used to enable or disable maintenance mode.",
                      "Can only be called by manager origin."
                    ]
                  },
                  {
                    "name": "register",
                    "fields": [
                      {
                        "name": "owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Used to register a new contract for dApp staking.",
                      "",
                      "If successful, smart contract will be assigned a simple, unique numerical identifier.",
                      "Owner is set to be initial beneficiary & manager of the dApp."
                    ]
                  },
                  {
                    "name": "set_dapp_reward_beneficiary",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "beneficiary",
                        "type": 59,
                        "typeName": "Option<T::AccountId>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Used to modify the reward beneficiary account for a dApp.",
                      "",
                      "Caller has to be dApp owner.",
                      "If set to `None`, rewards will be deposited to the dApp owner.",
                      "After this call, all existing & future rewards will be paid out to the beneficiary."
                    ]
                  },
                  {
                    "name": "set_dapp_owner",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "new_owner",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Used to change dApp owner.",
                      "",
                      "Can be called by dApp owner or dApp staking manager origin.",
                      "This is useful in two cases:",
                      "1. when the dApp owner account is compromised, manager can change the owner to a new account",
                      "2. if project wants to transfer ownership to a new account (DAO, multisig, etc.)."
                    ]
                  },
                  {
                    "name": "unregister",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Unregister dApp from dApp staking protocol, making it ineligible for future rewards.",
                      "This doesn't remove the dApp completely from the system just yet, but it can no longer be used for staking.",
                      "",
                      "Can be called by dApp staking manager origin."
                    ]
                  },
                  {
                    "name": "lock",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Locks additional funds into dApp staking.",
                      "",
                      "In case caller account doesn't have sufficient balance to cover the specified amount, everything is locked.",
                      "After adjustment, lock amount must be greater than zero and in total must be equal or greater than the minimum locked amount.",
                      "",
                      "Locked amount can immediately be used for staking."
                    ]
                  },
                  {
                    "name": "unlock",
                    "fields": [
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Attempts to start the unlocking process for the specified amount.",
                      "",
                      "Only the amount that isn't actively used for staking can be unlocked.",
                      "If the amount is greater than the available amount for unlocking, everything is unlocked.",
                      "If the remaining locked amount would take the account below the minimum locked amount, everything is unlocked."
                    ]
                  },
                  {
                    "name": "claim_unlocked",
                    "index": 9,
                    "docs": [
                      "Claims all of fully unlocked chunks, removing the lock from them."
                    ]
                  },
                  {
                    "name": "relock_unlocking",
                    "index": 10
                  },
                  {
                    "name": "stake",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Stake the specified amount on a smart contract.",
                      "The precise `amount` specified **must** be available for staking.",
                      "The total amount staked on a dApp must be greater than the minimum required value.",
                      "",
                      "Depending on the period type, appropriate stake amount will be updated. During `Voting` subperiod, `voting` stake amount is updated,",
                      "and same for `Build&Earn` subperiod.",
                      "",
                      "Staked amount is only eligible for rewards from the next era onwards."
                    ]
                  },
                  {
                    "name": "unstake",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Unstake the specified amount from a smart contract.",
                      "The `amount` specified **must** not exceed what's staked, otherwise the call will fail.",
                      "",
                      "If unstaking the specified `amount` would take staker below the minimum stake threshold, everything is unstaked.",
                      "",
                      "Depending on the period type, appropriate stake amount will be updated.",
                      "In case amount is unstaked during `Voting` subperiod, the `voting` amount is reduced.",
                      "In case amount is unstaked during `Build&Earn` subperiod, first the `build_and_earn` is reduced,",
                      "and any spillover is subtracted from the `voting` amount."
                    ]
                  },
                  {
                    "name": "claim_staker_rewards",
                    "index": 13,
                    "docs": [
                      "Claims some staker rewards, if user has any.",
                      "In the case of a successful call, at least one era will be claimed, with the possibility of multiple claims happening."
                    ]
                  },
                  {
                    "name": "claim_bonus_reward",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Used to claim bonus reward for a smart contract, if eligible."
                    ]
                  },
                  {
                    "name": "claim_dapp_reward",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "era",
                        "type": 50,
                        "typeName": "EraNumber"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Used to claim dApp reward for the specified era."
                    ]
                  },
                  {
                    "name": "unstake_from_unregistered",
                    "fields": [
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Used to unstake funds from a contract that was unregistered after an account staked on it.",
                      "This is required if staker wants to re-stake these funds on another active contract during the ongoing period."
                    ]
                  },
                  {
                    "name": "cleanup_expired_entries",
                    "index": 17,
                    "docs": [
                      "Cleanup expired stake entries for the contract.",
                      "",
                      "Entry is considered to be expired if:",
                      "1. It's from a past period & the account did not maintain an eligible bonus status, meaning there's no claimable bonus reward.",
                      "2. It's from a period older than the oldest claimable period, regardless of whether the account had an eligible bonus status or not."
                    ]
                  },
                  {
                    "name": "force",
                    "fields": [
                      {
                        "name": "forcing_type",
                        "type": 60,
                        "typeName": "ForcingType"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Used to force a change of era or subperiod.",
                      "The effect isn't immediate but will happen on the next block.",
                      "",
                      "Used for testing purposes, when we want to force an era change, or a subperiod change.",
                      "Not intended to be used in production, except in case of unforeseen circumstances.",
                      "",
                      "Can only be called by the root origin."
                    ]
                  },
                  {
                    "name": "claim_staker_rewards_for",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Claims some staker rewards for the specified account, if they have any.",
                      "In the case of a successful call, at least one era will be claimed, with the possibility of multiple claims happening."
                    ]
                  },
                  {
                    "name": "claim_bonus_reward_for",
                    "fields": [
                      {
                        "name": "account",
                        "type": 0,
                        "typeName": "T::AccountId"
                      },
                      {
                        "name": "smart_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Used to claim bonus reward for a smart contract on behalf of the specified account, if eligible."
                    ]
                  },
                  {
                    "name": "move_stake",
                    "fields": [
                      {
                        "name": "source_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "destination_contract",
                        "type": 56,
                        "typeName": "T::SmartContract"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "Transfers stake between two smart contracts, ensuring bonus status preservation if eligible.",
                      "Emits a `StakeMoved` event."
                    ]
                  },
                  {
                    "name": "set_static_tier_params",
                    "fields": [
                      {
                        "name": "params",
                        "type": 61,
                        "typeName": "TierParameters<T::NumberOfTiers>"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Used to set static tier parameters, which are used to calculate tier configuration.",
                      "Tier configuration defines tier entry threshold values, number of slots, and reward portions.",
                      "",
                      "This is a delicate call and great care should be taken when changing these",
                      "values since it has a significant impact on the reward system."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 290,
          "type": {
            "path": [
              "pallet_assets",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "create",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "admin",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "min_balance",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Issue a new class of fungible assets from a public origin.",
                      "",
                      "This new asset class has no assets initially and its owner is the origin.",
                      "",
                      "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                      "",
                      "Funds of sender are reserved by `AssetDeposit`.",
                      "",
                      "Parameters:",
                      "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                      "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                      "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                      "member of the asset class's admin team.",
                      "- `min_balance`: The minimum balance of this new asset that any single account must",
                      "have. If an account's balance is reduced below this, then it collapses to zero.",
                      "",
                      "Emits `Created` event when successful.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "force_create",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "owner",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "is_sufficient",
                        "type": 8,
                        "typeName": "bool"
                      },
                      {
                        "name": "min_balance",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Issue a new class of fungible assets from a privileged origin.",
                      "",
                      "This new asset class has no assets initially.",
                      "",
                      "The origin must conform to `ForceOrigin`.",
                      "",
                      "Unlike `create`, no funds are reserved.",
                      "",
                      "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                      "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                      "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                      "over this asset, but may later change and configure the permissions using",
                      "`transfer_ownership` and `set_team`.",
                      "- `min_balance`: The minimum balance of this new asset that any single account must",
                      "have. If an account's balance is reduced below this, then it collapses to zero.",
                      "",
                      "Emits `ForceCreated` event when successful.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "start_destroy",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Start the process of destroying a fungible asset class.",
                      "",
                      "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                      "destruction of an asset class.",
                      "",
                      "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                      "",
                      "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                      "  asset."
                    ]
                  },
                  {
                    "name": "destroy_accounts",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Destroy all accounts associated with a given asset.",
                      "",
                      "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                      "asset is in a `Destroying` state.",
                      "",
                      "Due to weight restrictions, this function may need to be called multiple times to fully",
                      "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                      "",
                      "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                      "  asset.",
                      "",
                      "Each call emits the `Event::DestroyedAccounts` event."
                    ]
                  },
                  {
                    "name": "destroy_approvals",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                      "",
                      "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                      "asset is in a `Destroying` state.",
                      "",
                      "Due to weight restrictions, this function may need to be called multiple times to fully",
                      "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                      "",
                      "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                      "  asset.",
                      "",
                      "Each call emits the `Event::DestroyedApprovals` event."
                    ]
                  },
                  {
                    "name": "finish_destroy",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Complete destroying asset and unreserve currency.",
                      "",
                      "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                      "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                      "hand.",
                      "",
                      "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                      "  asset.",
                      "",
                      "Each successful call emits the `Event::Destroyed` event."
                    ]
                  },
                  {
                    "name": "mint",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Mint assets of a particular class.",
                      "",
                      "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                      "",
                      "- `id`: The identifier of the asset to have some amount minted.",
                      "- `beneficiary`: The account to be credited with the minted assets.",
                      "- `amount`: The amount of the asset to be minted.",
                      "",
                      "Emits `Issued` event when successful.",
                      "",
                      "Weight: `O(1)`",
                      "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
                    ]
                  },
                  {
                    "name": "burn",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                      "",
                      "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                      "",
                      "Bails with `NoAccount` if the `who` is already dead.",
                      "",
                      "- `id`: The identifier of the asset to have some amount burned.",
                      "- `who`: The account to be debited from.",
                      "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                      "",
                      "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                      "minimum for the asset, then the amount burned is increased to take it to zero.",
                      "",
                      "Weight: `O(1)`",
                      "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
                    ]
                  },
                  {
                    "name": "transfer",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "target",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Move some assets from the sender account to another.",
                      "",
                      "Origin must be Signed.",
                      "",
                      "- `id`: The identifier of the asset to have some amount transferred.",
                      "- `target`: The account to be credited.",
                      "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                      "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                      "the case that the transfer would otherwise take the sender balance above zero but below",
                      "the minimum balance. Must be greater than zero.",
                      "",
                      "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                      "to below the minimum for the asset, then the amount transferred is increased to take it",
                      "to zero.",
                      "",
                      "Weight: `O(1)`",
                      "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                      "`target`."
                    ]
                  },
                  {
                    "name": "transfer_keep_alive",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "target",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Move some assets from the sender account to another, keeping the sender account alive.",
                      "",
                      "Origin must be Signed.",
                      "",
                      "- `id`: The identifier of the asset to have some amount transferred.",
                      "- `target`: The account to be credited.",
                      "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                      "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                      "the case that the transfer would otherwise take the sender balance above zero but below",
                      "the minimum balance. Must be greater than zero.",
                      "",
                      "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                      "to below the minimum for the asset, then the amount transferred is increased to take it",
                      "to zero.",
                      "",
                      "Weight: `O(1)`",
                      "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                      "`target`."
                    ]
                  },
                  {
                    "name": "force_transfer",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "source",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Move some assets from one account to another.",
                      "",
                      "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                      "",
                      "- `id`: The identifier of the asset to have some amount transferred.",
                      "- `source`: The account to be debited.",
                      "- `dest`: The account to be credited.",
                      "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                      "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                      "the case that the transfer would otherwise take the `source` balance above zero but",
                      "below the minimum balance. Must be greater than zero.",
                      "",
                      "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                      "to below the minimum for the asset, then the amount transferred is increased to take it",
                      "to zero.",
                      "",
                      "Weight: `O(1)`",
                      "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                      "`dest`."
                    ]
                  },
                  {
                    "name": "freeze",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                      "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                      "account that does not have an entry, use `touch_other` first.",
                      "",
                      "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                      "",
                      "- `id`: The identifier of the asset to be frozen.",
                      "- `who`: The account to be frozen.",
                      "",
                      "Emits `Frozen`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "thaw",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Allow unprivileged transfers to and from an account again.",
                      "",
                      "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                      "",
                      "- `id`: The identifier of the asset to be frozen.",
                      "- `who`: The account to be unfrozen.",
                      "",
                      "Emits `Thawed`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "freeze_asset",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Disallow further unprivileged transfers for the asset class.",
                      "",
                      "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                      "",
                      "- `id`: The identifier of the asset to be frozen.",
                      "",
                      "Emits `Frozen`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "thaw_asset",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 14,
                    "docs": [
                      "Allow unprivileged transfers for the asset again.",
                      "",
                      "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                      "",
                      "- `id`: The identifier of the asset to be thawed.",
                      "",
                      "Emits `Thawed`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "transfer_ownership",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "owner",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 15,
                    "docs": [
                      "Change the Owner of an asset.",
                      "",
                      "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                      "",
                      "- `id`: The identifier of the asset.",
                      "- `owner`: The new Owner of this asset.",
                      "",
                      "Emits `OwnerChanged`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "set_team",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "issuer",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "admin",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "freezer",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 16,
                    "docs": [
                      "Change the Issuer, Admin and Freezer of an asset.",
                      "",
                      "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                      "",
                      "- `id`: The identifier of the asset to be frozen.",
                      "- `issuer`: The new Issuer of this asset.",
                      "- `admin`: The new Admin of this asset.",
                      "- `freezer`: The new Freezer of this asset.",
                      "",
                      "Emits `TeamChanged`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "set_metadata",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "symbol",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "decimals",
                        "type": 2,
                        "typeName": "u8"
                      }
                    ],
                    "index": 17,
                    "docs": [
                      "Set the metadata for an asset.",
                      "",
                      "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                      "",
                      "Funds of sender are reserved according to the formula:",
                      "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                      "account any already reserved funds.",
                      "",
                      "- `id`: The identifier of the asset to update.",
                      "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                      "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                      "- `decimals`: The number of decimals this asset uses to represent one unit.",
                      "",
                      "Emits `MetadataSet`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "clear_metadata",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 18,
                    "docs": [
                      "Clear the metadata for an asset.",
                      "",
                      "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                      "",
                      "Any deposit is freed for the asset owner.",
                      "",
                      "- `id`: The identifier of the asset to clear.",
                      "",
                      "Emits `MetadataCleared`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "force_set_metadata",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "symbol",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "decimals",
                        "type": 2,
                        "typeName": "u8"
                      },
                      {
                        "name": "is_frozen",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 19,
                    "docs": [
                      "Force the metadata for an asset to some value.",
                      "",
                      "Origin must be ForceOrigin.",
                      "",
                      "Any deposit is left alone.",
                      "",
                      "- `id`: The identifier of the asset to update.",
                      "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                      "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                      "- `decimals`: The number of decimals this asset uses to represent one unit.",
                      "",
                      "Emits `MetadataSet`.",
                      "",
                      "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
                    ]
                  },
                  {
                    "name": "force_clear_metadata",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 20,
                    "docs": [
                      "Clear the metadata for an asset.",
                      "",
                      "Origin must be ForceOrigin.",
                      "",
                      "Any deposit is returned.",
                      "",
                      "- `id`: The identifier of the asset to clear.",
                      "",
                      "Emits `MetadataCleared`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "force_asset_status",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "owner",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "issuer",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "admin",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "freezer",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "min_balance",
                        "type": 51,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "is_sufficient",
                        "type": 8,
                        "typeName": "bool"
                      },
                      {
                        "name": "is_frozen",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 21,
                    "docs": [
                      "Alter the attributes of a given asset.",
                      "",
                      "Origin must be `ForceOrigin`.",
                      "",
                      "- `id`: The identifier of the asset.",
                      "- `owner`: The new Owner of this asset.",
                      "- `issuer`: The new Issuer of this asset.",
                      "- `admin`: The new Admin of this asset.",
                      "- `freezer`: The new Freezer of this asset.",
                      "- `min_balance`: The minimum balance of this new asset that any single account must",
                      "have. If an account's balance is reduced below this, then it collapses to zero.",
                      "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                      "value to account for the state bloat associated with its balance storage. If set to",
                      "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                      "an ED in the Balances pallet or whatever else is used to control user-account state",
                      "growth).",
                      "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                      "instructions.",
                      "",
                      "Emits `AssetStatusChanged` with the identity of the asset.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "approve_transfer",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "delegate",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 22,
                    "docs": [
                      "Approve an amount of asset for transfer by a delegated third-party account.",
                      "",
                      "Origin must be Signed.",
                      "",
                      "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                      "for the purpose of holding the approval. If some non-zero amount of assets is already",
                      "approved from signing account to `delegate`, then it is topped up or unreserved to",
                      "meet the right value.",
                      "",
                      "NOTE: The signing account does not need to own `amount` of assets at the point of",
                      "making this call.",
                      "",
                      "- `id`: The identifier of the asset.",
                      "- `delegate`: The account to delegate permission to transfer asset.",
                      "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                      "already an approval in place, then this acts additively.",
                      "",
                      "Emits `ApprovedTransfer` on success.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "cancel_approval",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "delegate",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 23,
                    "docs": [
                      "Cancel all of some asset approved for delegated transfer by a third-party account.",
                      "",
                      "Origin must be Signed and there must be an approval in place between signer and",
                      "`delegate`.",
                      "",
                      "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                      "",
                      "- `id`: The identifier of the asset.",
                      "- `delegate`: The account delegated permission to transfer asset.",
                      "",
                      "Emits `ApprovalCancelled` on success.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "force_cancel_approval",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "owner",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "delegate",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 24,
                    "docs": [
                      "Cancel all of some asset approved for delegated transfer by a third-party account.",
                      "",
                      "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                      "account of the asset `id`.",
                      "",
                      "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                      "",
                      "- `id`: The identifier of the asset.",
                      "- `delegate`: The account delegated permission to transfer asset.",
                      "",
                      "Emits `ApprovalCancelled` on success.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "transfer_approved",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "owner",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "destination",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "amount",
                        "type": 51,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 25,
                    "docs": [
                      "Transfer some asset balance from a previously delegated account to some third-party",
                      "account.",
                      "",
                      "Origin must be Signed and there must be an approval in place by the `owner` to the",
                      "signer.",
                      "",
                      "If the entire amount approved for transfer is transferred, then any deposit previously",
                      "reserved by `approve_transfer` is unreserved.",
                      "",
                      "- `id`: The identifier of the asset.",
                      "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                      "from which the asset balance will be withdrawn.",
                      "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                      "- `amount`: The amount of assets to transfer.",
                      "",
                      "Emits `TransferredApproved` on success.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "touch",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      }
                    ],
                    "index": 26,
                    "docs": [
                      "Create an asset account for non-provider assets.",
                      "",
                      "A deposit will be taken from the signer account.",
                      "",
                      "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                      "  to be taken.",
                      "- `id`: The identifier of the asset for the account to be created.",
                      "",
                      "Emits `Touched` event when successful."
                    ]
                  },
                  {
                    "name": "refund",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "allow_burn",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 27,
                    "docs": [
                      "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                      "account.",
                      "",
                      "The origin must be Signed.",
                      "",
                      "- `id`: The identifier of the asset for which the caller would like the deposit",
                      "  refunded.",
                      "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                      "",
                      "Emits `Refunded` event when successful."
                    ]
                  },
                  {
                    "name": "set_min_balance",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "min_balance",
                        "type": 6,
                        "typeName": "T::Balance"
                      }
                    ],
                    "index": 28,
                    "docs": [
                      "Sets the minimum balance of an asset.",
                      "",
                      "Only works if there aren't any accounts that are holding the asset or if",
                      "the new value of `min_balance` is less than the old one.",
                      "",
                      "Origin must be Signed and the sender has to be the Owner of the",
                      "asset `id`.",
                      "",
                      "- `id`: The identifier of the asset.",
                      "- `min_balance`: The new value of `min_balance`.",
                      "",
                      "Emits `AssetMinBalanceChanged` event when successful."
                    ]
                  },
                  {
                    "name": "touch_other",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 29,
                    "docs": [
                      "Create an asset account for `who`.",
                      "",
                      "A deposit will be taken from the signer account.",
                      "",
                      "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                      "  must have sufficient funds for a deposit to be taken.",
                      "- `id`: The identifier of the asset for the account to be created.",
                      "- `who`: The account to be created.",
                      "",
                      "Emits `Touched` event when successful."
                    ]
                  },
                  {
                    "name": "refund_other",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 30,
                    "docs": [
                      "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                      "",
                      "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                      "order to burn a non-zero balance of the asset, the caller must be the account and should",
                      "use `refund`.",
                      "",
                      "- `id`: The identifier of the asset for the account holding a deposit.",
                      "- `who`: The account to refund.",
                      "",
                      "Emits `Refunded` event when successful."
                    ]
                  },
                  {
                    "name": "block",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 31,
                    "docs": [
                      "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                      "",
                      "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                      "",
                      "- `id`: The identifier of the account's asset.",
                      "- `who`: The account to be unblocked.",
                      "",
                      "Emits `Blocked`.",
                      "",
                      "Weight: `O(1)`"
                    ]
                  },
                  {
                    "name": "transfer_all",
                    "fields": [
                      {
                        "name": "id",
                        "type": 51,
                        "typeName": "T::AssetIdParameter"
                      },
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "keep_alive",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 32,
                    "docs": [
                      "Transfer the entire transferable balance from the caller asset account.",
                      "",
                      "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                      "any held, frozen, or minimum balance (when `keep_alive` is `true`), will not be",
                      "transferred by this function. To ensure that this function results in a killed account,",
                      "you might need to prepare the account by removing any reference counters, storage",
                      "deposits, etc...",
                      "",
                      "The dispatch origin of this call must be Signed.",
                      "",
                      "- `id`: The identifier of the asset for the account holding a deposit.",
                      "- `dest`: The recipient of the transfer.",
                      "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                      "  of the funds the asset account has, causing the sender asset account to be killed",
                      "  (false), or transfer everything except at least the minimum balance, which will",
                      "  guarantee to keep the sender asset account alive (true)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 291,
          "type": {
            "path": [
              "orml_oracle",
              "module",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "feed_values",
                    "fields": [
                      {
                        "name": "values",
                        "type": 292,
                        "typeName": "BoundedVec<(T::OracleKey, T::OracleValue), T::MaxFeedValues>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Feed the external value.",
                      "",
                      "Require authorized operator."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 292,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 75
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 74,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 293,
          "type": {
            "path": [
              "pallet_membership",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "add_member",
                    "fields": [
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Add a member `who` to the set.",
                      "",
                      "May only be called from `T::AddOrigin`."
                    ]
                  },
                  {
                    "name": "remove_member",
                    "fields": [
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Remove a member `who` from the set.",
                      "",
                      "May only be called from `T::RemoveOrigin`."
                    ]
                  },
                  {
                    "name": "swap_member",
                    "fields": [
                      {
                        "name": "remove",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "add",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Swap out one member `remove` for another `add`.",
                      "",
                      "May only be called from `T::SwapOrigin`.",
                      "",
                      "Prime membership is *not* passed from `remove` to `add`, if extant."
                    ]
                  },
                  {
                    "name": "reset_members",
                    "fields": [
                      {
                        "name": "members",
                        "type": 79,
                        "typeName": "Vec<T::AccountId>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Change the membership to a new set, disregarding the existing membership. Be nice and",
                      "pass `members` pre-sorted.",
                      "",
                      "May only be called from `T::ResetOrigin`."
                    ]
                  },
                  {
                    "name": "change_key",
                    "fields": [
                      {
                        "name": "new",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Swap out the sending member for some other key `new`.",
                      "",
                      "May only be called from `Signed` origin of a current member.",
                      "",
                      "Prime membership is passed from the origin account to `new`, if extant."
                    ]
                  },
                  {
                    "name": "set_prime",
                    "fields": [
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Set the prime member. Must be a current member.",
                      "",
                      "May only be called from `T::PrimeOrigin`."
                    ]
                  },
                  {
                    "name": "clear_prime",
                    "index": 6,
                    "docs": [
                      "Remove the prime member if it exists.",
                      "",
                      "May only be called from `T::PrimeOrigin`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 294,
          "type": {
            "path": [
              "pallet_collator_selection",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_invulnerables",
                    "fields": [
                      {
                        "name": "new",
                        "type": 79,
                        "typeName": "Vec<T::AccountId>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Set the list of invulnerable (fixed) collators."
                    ]
                  },
                  {
                    "name": "set_desired_candidates",
                    "fields": [
                      {
                        "name": "max",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Set the ideal number of collators (not including the invulnerables).",
                      "If lowering this number, then the number of running collators could be higher than this figure.",
                      "Aside from that edge case, there should be no other way to have more collators than the desired number."
                    ]
                  },
                  {
                    "name": "set_candidacy_bond",
                    "fields": [
                      {
                        "name": "bond",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Set the candidacy bond amount."
                    ]
                  },
                  {
                    "name": "register_as_candidate",
                    "index": 3,
                    "docs": [
                      "Register this account as a collator candidate. The account must (a) already have",
                      "registered session keys and (b) be able to reserve the `CandidacyBond`.",
                      "",
                      "This call is not available to `Invulnerable` collators."
                    ]
                  },
                  {
                    "name": "leave_intent",
                    "index": 4,
                    "docs": [
                      "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
                      "session change. The `CandidacyBond` will start un-bonding process.",
                      "",
                      "This call will fail if the total number of candidates would drop below `MinCandidates`.",
                      "",
                      "This call is not available to `Invulnerable` collators."
                    ]
                  },
                  {
                    "name": "withdraw_bond",
                    "index": 5,
                    "docs": [
                      "Withdraw `CandidacyBond` after un-bonding period has finished.",
                      "This call will fail called during un-bonding or if there's no `CandidacyBound` reserved."
                    ]
                  },
                  {
                    "name": "set_slash_destination",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 59,
                        "typeName": "Option<T::AccountId>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Set slash destination.",
                      "Use `Some` to deposit slashed balance into destination or `None` to burn it."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 295,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_keys",
                    "fields": [
                      {
                        "name": "keys",
                        "type": 296,
                        "typeName": "T::Keys"
                      },
                      {
                        "name": "proof",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Sets the session key(s) of the function caller to `keys`.",
                      "Allows an account to set its session key prior to becoming a validator.",
                      "This doesn't take effect until the next session.",
                      "",
                      "The dispatch origin of this function must be signed.",
                      "",
                      "## Complexity",
                      "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                      "  fixed."
                    ]
                  },
                  {
                    "name": "purge_keys",
                    "index": 1,
                    "docs": [
                      "Removes any session key(s) of the function caller.",
                      "",
                      "This doesn't take effect until the next session.",
                      "",
                      "The dispatch origin of this function must be Signed and the account must be either be",
                      "convertible to a validator ID using the chain's typical addressing system (this usually",
                      "means being a controller account) or directly convertible into a validator ID (which",
                      "usually means being a stash account).",
                      "",
                      "## Complexity",
                      "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                      "  `T::Keys::key_ids()` which is fixed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 296,
          "type": {
            "path": [
              "shiden_runtime",
              "SessionKeys"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "aura",
                    "type": 297,
                    "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 297,
          "type": {
            "path": [
              "sp_consensus_aura",
              "sr25519",
              "app_sr25519",
              "Public"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 1,
                    "typeName": "sr25519::Public"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 298,
          "type": {
            "path": [
              "cumulus_pallet_xcmp_queue",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "suspend_xcm_execution",
                    "index": 1,
                    "docs": [
                      "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                      "",
                      "- `origin`: Must pass `ControllerOrigin`."
                    ]
                  },
                  {
                    "name": "resume_xcm_execution",
                    "index": 2,
                    "docs": [
                      "Resumes all XCM executions for the XCMP queue.",
                      "",
                      "Note that this function doesn't change the status of the in/out bound channels.",
                      "",
                      "- `origin`: Must pass `ControllerOrigin`."
                    ]
                  },
                  {
                    "name": "update_suspend_threshold",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Overwrites the number of pages which must be in the queue for the other side to be",
                      "told to suspend their sending.",
                      "",
                      "- `origin`: Must pass `Root`.",
                      "- `new`: Desired value for `QueueConfigData.suspend_value`"
                    ]
                  },
                  {
                    "name": "update_drop_threshold",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Overwrites the number of pages which must be in the queue after which we drop any",
                      "further messages from the channel.",
                      "",
                      "- `origin`: Must pass `Root`.",
                      "- `new`: Desired value for `QueueConfigData.drop_threshold`"
                    ]
                  },
                  {
                    "name": "update_resume_threshold",
                    "fields": [
                      {
                        "name": "new",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Overwrites the number of pages which the queue must be reduced to before it signals",
                      "that message sending may recommence after it has been suspended.",
                      "",
                      "- `origin`: Must pass `Root`.",
                      "- `new`: Desired value for `QueueConfigData.resume_threshold`"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 299,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "send",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "message",
                        "type": 300,
                        "typeName": "Box<VersionedXcm<()>>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "teleport_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Teleport some assets from the local chain to some destination chain.",
                      "",
                      "**This function is deprecated: Use `limited_teleport_assets` instead.**",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                      "with all fees taken as needed from the asset.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` chain.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees."
                    ]
                  },
                  {
                    "name": "reserve_transfer_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Transfer some assets from the local chain to the destination chain through their local,",
                      "destination or remote reserve.",
                      "",
                      "`assets` must have same reserve location and may not be teleportable to `dest`.",
                      " - `assets` have local reserve: transfer assets to sovereign account of destination",
                      "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                      "   assets to `beneficiary`.",
                      " - `assets` have destination reserve: burn local assets and forward a notification to",
                      "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                      "   deposit them to `beneficiary`.",
                      " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                      "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                      "   to mint and deposit reserve-based assets to `beneficiary`.",
                      "",
                      "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                      "with all fees taken as needed from the asset.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` (and possibly reserve) chains.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees."
                    ]
                  },
                  {
                    "name": "execute",
                    "fields": [
                      {
                        "name": "message",
                        "type": 330,
                        "typeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Execute an XCM message from a local, signed, origin.",
                      "",
                      "An event is deposited indicating whether `msg` could be executed completely or only",
                      "partially.",
                      "",
                      "No more than `max_weight` will be used in its attempted execution. If this is less than",
                      "the maximum amount of weight that the message could take to be executed, then no",
                      "execution attempt will be made."
                    ]
                  },
                  {
                    "name": "force_xcm_version",
                    "fields": [
                      {
                        "name": "location",
                        "type": 85,
                        "typeName": "Box<Location>"
                      },
                      {
                        "name": "version",
                        "type": 4,
                        "typeName": "XcmVersion"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Extoll that a particular destination can be communicated with through a particular",
                      "version of XCM.",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `location`: The destination that is being described.",
                      "- `xcm_version`: The latest version of XCM that `location` supports."
                    ]
                  },
                  {
                    "name": "force_default_xcm_version",
                    "fields": [
                      {
                        "name": "maybe_xcm_version",
                        "type": 341,
                        "typeName": "Option<XcmVersion>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                      "version a destination can accept is unknown).",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
                    ]
                  },
                  {
                    "name": "force_subscribe_version_notify",
                    "fields": [
                      {
                        "name": "location",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Ask a location to notify us regarding their XCM version and any changes to it.",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `location`: The location to which we should subscribe for XCM version notifications."
                    ]
                  },
                  {
                    "name": "force_unsubscribe_version_notify",
                    "fields": [
                      {
                        "name": "location",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Require that a particular destination should no longer notify us regarding any XCM",
                      "version changes.",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `location`: The location to which we are currently subscribed for XCM version",
                      "  notifications which we no longer desire."
                    ]
                  },
                  {
                    "name": "limited_reserve_transfer_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Transfer some assets from the local chain to the destination chain through their local,",
                      "destination or remote reserve.",
                      "",
                      "`assets` must have same reserve location and may not be teleportable to `dest`.",
                      " - `assets` have local reserve: transfer assets to sovereign account of destination",
                      "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                      "   assets to `beneficiary`.",
                      " - `assets` have destination reserve: burn local assets and forward a notification to",
                      "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                      "   deposit them to `beneficiary`.",
                      " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                      "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                      "   to mint and deposit reserve-based assets to `beneficiary`.",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                      "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                      "at risk.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` (and possibly reserve) chains.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees.",
                      "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                    ]
                  },
                  {
                    "name": "limited_teleport_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "Teleport some assets from the local chain to some destination chain.",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                      "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                      "at risk.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` chain.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees.",
                      "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                    ]
                  },
                  {
                    "name": "force_suspension",
                    "fields": [
                      {
                        "name": "suspended",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 10,
                    "docs": [
                      "Set or unset the global suspension state of the XCM executor.",
                      "",
                      "- `origin`: Must be an origin specified by AdminOrigin.",
                      "- `suspended`: `true` to suspend, `false` to resume."
                    ]
                  },
                  {
                    "name": "transfer_assets",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_asset_item",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 11,
                    "docs": [
                      "Transfer some assets from the local chain to the destination chain through their local,",
                      "destination or remote reserve, or through teleports.",
                      "",
                      "Fee payment on the destination side is made from the asset in the `assets` vector of",
                      "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
                      "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
                      "operation will fail and the sent assets may be at risk.",
                      "",
                      "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
                      "to `dest`, no limitations imposed on `fees`.",
                      " - for local reserve: transfer assets to sovereign account of destination chain and",
                      "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
                      "   `beneficiary`.",
                      " - for destination reserve: burn local assets and forward a notification to `dest` chain",
                      "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
                      "   to `beneficiary`.",
                      " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
                      "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
                      "   and deposit reserve-based assets to `beneficiary`.",
                      " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
                      "   assets and deposit them to `beneficiary`.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
                      "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
                      "  from relay to parachain.",
                      "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                      "  generally be an `AccountId32` value.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` (and possibly reserve) chains.",
                      "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                      "  fees.",
                      "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                    ]
                  },
                  {
                    "name": "claim_assets",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "beneficiary",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      }
                    ],
                    "index": 12,
                    "docs": [
                      "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
                      "",
                      "- `origin`: Anyone can call this extrinsic.",
                      "- `assets`: The exact assets that were trapped. Use the version to specify what version",
                      "was the latest when they were trapped.",
                      "- `beneficiary`: The location/account where the claimed assets will be deposited."
                    ]
                  },
                  {
                    "name": "transfer_assets_using_type_and_then",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "assets_transfer_type",
                        "type": 342,
                        "typeName": "Box<TransferType>"
                      },
                      {
                        "name": "remote_fees_id",
                        "type": 343,
                        "typeName": "Box<VersionedAssetId>"
                      },
                      {
                        "name": "fees_transfer_type",
                        "type": 342,
                        "typeName": "Box<TransferType>"
                      },
                      {
                        "name": "custom_xcm_on_dest",
                        "type": 300,
                        "typeName": "Box<VersionedXcm<()>>"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 13,
                    "docs": [
                      "Transfer assets from the local chain to the destination chain using explicit transfer",
                      "types for assets and fees.",
                      "",
                      "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
                      "provide the `assets_transfer_type` to be used for `assets`:",
                      " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
                      "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                      "   assets to `beneficiary`.",
                      " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
                      "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                      "   deposit them to `beneficiary`.",
                      " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
                      "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
                      "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
                      "   the remote `reserve` is Asset Hub.",
                      " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
                      "   mint/teleport assets and deposit them to `beneficiary`.",
                      "",
                      "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
                      "buy execution using transferred `assets` identified by `remote_fees_id`.",
                      "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
                      "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
                      "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                      "at risk.",
                      "",
                      "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
                      "specified through `fees_transfer_type`.",
                      "",
                      "The caller needs to specify what should happen to the transferred assets once they reach",
                      "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
                      "contains the instructions to execute on `dest` as a final step.",
                      "  This is usually as simple as:",
                      "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
                      "  but could be something more exotic like sending the `assets` even further.",
                      "",
                      "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                      "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                      "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                      "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
                      "  parachain across a bridge to another ecosystem destination.",
                      "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                      "  fee on the `dest` (and possibly reserve) chains.",
                      "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
                      "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
                      "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
                      "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
                      "  transfer, which also determines what happens to the assets on the destination chain.",
                      "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 300,
          "type": {
            "path": [
              "xcm",
              "VersionedXcm"
            ],
            "params": [
              {
                "name": "RuntimeCall",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 301,
                        "typeName": "v3::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 317,
                        "typeName": "v4::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "V5",
                    "fields": [
                      {
                        "type": 100,
                        "typeName": "v5::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 301,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 302,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 302,
          "type": {
            "def": {
              "sequence": {
                "type": 303
              }
            }
          }
        },
        {
          "id": 303,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 304,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 312,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 138,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 138,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "dest",
                        "type": 142,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 121,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "call",
                        "type": 123,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 143,
                        "typeName": "InteriorMultiLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 313,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 142,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 138,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 142,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 142,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 313,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 301,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 301,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 138,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "ticket",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 312,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 305,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 313,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 313,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 146,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 143,
                        "typeName": "InteriorMultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "unlocker",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "target",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "owner",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "locker",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 312,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 47
                  }
                ]
              }
            }
          }
        },
        {
          "id": 304,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Response"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Null",
                    "index": 0
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ExecutionResult",
                    "fields": [
                      {
                        "type": 305,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Version",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "super::Version"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletsInfo",
                    "fields": [
                      {
                        "type": 308,
                        "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "DispatchResult",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 305,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 306
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 306
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 306,
          "type": {
            "def": {
              "tuple": [
                4,
                307
              ]
            }
          }
        },
        {
          "id": 307,
          "type": {
            "path": [
              "xcm",
              "v3",
              "traits",
              "Error"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Overflow",
                    "index": 0
                  },
                  {
                    "name": "Unimplemented",
                    "index": 1
                  },
                  {
                    "name": "UntrustedReserveLocation",
                    "index": 2
                  },
                  {
                    "name": "UntrustedTeleportLocation",
                    "index": 3
                  },
                  {
                    "name": "LocationFull",
                    "index": 4
                  },
                  {
                    "name": "LocationNotInvertible",
                    "index": 5
                  },
                  {
                    "name": "BadOrigin",
                    "index": 6
                  },
                  {
                    "name": "InvalidLocation",
                    "index": 7
                  },
                  {
                    "name": "AssetNotFound",
                    "index": 8
                  },
                  {
                    "name": "FailedToTransactAsset",
                    "index": 9
                  },
                  {
                    "name": "NotWithdrawable",
                    "index": 10
                  },
                  {
                    "name": "LocationCannotHold",
                    "index": 11
                  },
                  {
                    "name": "ExceedsMaxMessageSize",
                    "index": 12
                  },
                  {
                    "name": "DestinationUnsupported",
                    "index": 13
                  },
                  {
                    "name": "Transport",
                    "index": 14
                  },
                  {
                    "name": "Unroutable",
                    "index": 15
                  },
                  {
                    "name": "UnknownClaim",
                    "index": 16
                  },
                  {
                    "name": "FailedToDecode",
                    "index": 17
                  },
                  {
                    "name": "MaxWeightInvalid",
                    "index": 18
                  },
                  {
                    "name": "NotHoldingFees",
                    "index": 19
                  },
                  {
                    "name": "TooExpensive",
                    "index": 20
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 12,
                        "typeName": "u64"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "ExpectationFalse",
                    "index": 22
                  },
                  {
                    "name": "PalletNotFound",
                    "index": 23
                  },
                  {
                    "name": "NameMismatch",
                    "index": 24
                  },
                  {
                    "name": "VersionIncompatible",
                    "index": 25
                  },
                  {
                    "name": "HoldingWouldOverflow",
                    "index": 26
                  },
                  {
                    "name": "ExportError",
                    "index": 27
                  },
                  {
                    "name": "ReanchorFailed",
                    "index": 28
                  },
                  {
                    "name": "NoDeal",
                    "index": 29
                  },
                  {
                    "name": "FeesNotMet",
                    "index": 30
                  },
                  {
                    "name": "LockError",
                    "index": 31
                  },
                  {
                    "name": "NoPermission",
                    "index": 32
                  },
                  {
                    "name": "Unanchored",
                    "index": 33
                  },
                  {
                    "name": "NotDepositable",
                    "index": 34
                  },
                  {
                    "name": "UnhandledXcmVersion",
                    "index": 35
                  },
                  {
                    "name": "WeightLimitReached",
                    "fields": [
                      {
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "Barrier",
                    "index": 37
                  },
                  {
                    "name": "WeightNotComputable",
                    "index": 38
                  },
                  {
                    "name": "ExceedsStackLimit",
                    "index": 39
                  }
                ]
              }
            }
          }
        },
        {
          "id": 308,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 309
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 311,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 309,
          "type": {
            "path": [
              "xcm",
              "v3",
              "PalletInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "name",
                    "type": 310,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "module_name",
                    "type": 310,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "major",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "minor",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "patch",
                    "type": 50,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 310,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 311,
          "type": {
            "def": {
              "sequence": {
                "type": 309
              }
            }
          }
        },
        {
          "id": 312,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 142
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 142
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 313,
          "type": {
            "path": [
              "xcm",
              "v3",
              "QueryResponseInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "destination",
                    "type": 142,
                    "typeName": "MultiLocation"
                  },
                  {
                    "name": "query_id",
                    "type": 11,
                    "typeName": "QueryId"
                  },
                  {
                    "name": "max_weight",
                    "type": 10,
                    "typeName": "Weight"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 314,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "MultiAssetFilter"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Definite",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Wild",
                    "fields": [
                      {
                        "type": 315,
                        "typeName": "WildMultiAsset"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 315,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "WildMultiAsset"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "All",
                    "index": 0
                  },
                  {
                    "name": "AllOf",
                    "fields": [
                      {
                        "name": "id",
                        "type": 141,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 316,
                        "typeName": "WildFungibility"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AllCounted",
                    "fields": [
                      {
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AllOfCounted",
                    "fields": [
                      {
                        "name": "id",
                        "type": 141,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 316,
                        "typeName": "WildFungibility"
                      },
                      {
                        "name": "count",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 316,
          "type": {
            "path": [
              "xcm",
              "v3",
              "multiasset",
              "WildFungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 317,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 318,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 318,
          "type": {
            "def": {
              "sequence": {
                "type": 319
              }
            }
          }
        },
        {
          "id": 319,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 320,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 325,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 149,
                        "typeName": "Assets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 149,
                        "typeName": "Assets"
                      },
                      {
                        "name": "dest",
                        "type": 153,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 121,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "call",
                        "type": 123,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "InteriorLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 326,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 153,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 149,
                        "typeName": "Assets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 153,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 153,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 326,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 317,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 317,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 149,
                        "typeName": "Assets"
                      },
                      {
                        "name": "ticket",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 325,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 305,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 326,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 326,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 156,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 158,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 154,
                        "typeName": "InteriorLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "unlocker",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "target",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "owner",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "locker",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 325,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 47
                  }
                ]
              }
            }
          }
        },
        {
          "id": 320,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Response"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Null",
                    "index": 0
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ExecutionResult",
                    "fields": [
                      {
                        "type": 305,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Version",
                    "fields": [
                      {
                        "type": 4,
                        "typeName": "super::Version"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "PalletsInfo",
                    "fields": [
                      {
                        "type": 321,
                        "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "DispatchResult",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 321,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 322
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 324,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 322,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "PalletInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "name",
                    "type": 323,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "module_name",
                    "type": 323,
                    "typeName": "BoundedVec<u8, MaxPalletNameLen>"
                  },
                  {
                    "name": "major",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "minor",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "patch",
                    "type": 50,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 323,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 324,
          "type": {
            "def": {
              "sequence": {
                "type": 322
              }
            }
          }
        },
        {
          "id": 325,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 153
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 153
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 326,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "QueryResponseInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "destination",
                    "type": 153,
                    "typeName": "Location"
                  },
                  {
                    "name": "query_id",
                    "type": 11,
                    "typeName": "QueryId"
                  },
                  {
                    "name": "max_weight",
                    "type": 10,
                    "typeName": "Weight"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 327,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "AssetFilter"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Definite",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Wild",
                    "fields": [
                      {
                        "type": 328,
                        "typeName": "WildAsset"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 328,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "WildAsset"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "All",
                    "index": 0
                  },
                  {
                    "name": "AllOf",
                    "fields": [
                      {
                        "name": "id",
                        "type": 152,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 329,
                        "typeName": "WildFungibility"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "AllCounted",
                    "fields": [
                      {
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "AllOfCounted",
                    "fields": [
                      {
                        "name": "id",
                        "type": 152,
                        "typeName": "AssetId"
                      },
                      {
                        "name": "fun",
                        "type": 329,
                        "typeName": "WildFungibility"
                      },
                      {
                        "name": "count",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 329,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "asset",
              "WildFungibility"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fungible",
                    "index": 0
                  },
                  {
                    "name": "NonFungible",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 330,
          "type": {
            "path": [
              "xcm",
              "VersionedXcm"
            ],
            "params": [
              {
                "name": "RuntimeCall",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 331,
                        "typeName": "v3::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 335,
                        "typeName": "v4::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "V5",
                    "fields": [
                      {
                        "type": 338,
                        "typeName": "v5::Xcm<RuntimeCall>"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 331,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 332,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 332,
          "type": {
            "def": {
              "sequence": {
                "type": 333
              }
            }
          }
        },
        {
          "id": 333,
          "type": {
            "path": [
              "xcm",
              "v3",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 304,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 312,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 138,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 138,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "dest",
                        "type": 142,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 121,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "call",
                        "type": 334,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 143,
                        "typeName": "InteriorMultiLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 313,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 142,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 138,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 142,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 142,
                        "typeName": "MultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 313,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 314,
                        "typeName": "MultiAssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 331,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 331,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 138,
                        "typeName": "MultiAssets"
                      },
                      {
                        "name": "ticket",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 138,
                        "typeName": "MultiAssets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 312,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 305,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 313,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 313,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 144,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 146,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 143,
                        "typeName": "InteriorMultiLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 301,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "unlocker",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "target",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "owner",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 140,
                        "typeName": "MultiAsset"
                      },
                      {
                        "name": "locker",
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 142,
                        "typeName": "MultiLocation"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 312,
                        "typeName": "Option<MultiLocation>"
                      }
                    ],
                    "index": 47
                  }
                ]
              }
            }
          }
        },
        {
          "id": 334,
          "type": {
            "path": [
              "xcm",
              "double_encoded",
              "DoubleEncoded"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "encoded",
                    "type": 14,
                    "typeName": "Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 335,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 336,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 336,
          "type": {
            "def": {
              "sequence": {
                "type": 337
              }
            }
          }
        },
        {
          "id": 337,
          "type": {
            "path": [
              "staging_xcm",
              "v4",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 320,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 325,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 149,
                        "typeName": "Assets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 149,
                        "typeName": "Assets"
                      },
                      {
                        "name": "dest",
                        "type": 153,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 121,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "require_weight_at_most",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "call",
                        "type": 334,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 154,
                        "typeName": "InteriorLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 326,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 153,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 149,
                        "typeName": "Assets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 153,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 153,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 326,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 327,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 335,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 335,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 149,
                        "typeName": "Assets"
                      },
                      {
                        "name": "ticket",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 149,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 325,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 305,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 326,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 326,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 156,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 158,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 154,
                        "typeName": "InteriorLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 317,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "unlocker",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "target",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "owner",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 151,
                        "typeName": "Asset"
                      },
                      {
                        "name": "locker",
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 153,
                        "typeName": "Location"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 325,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 47
                  }
                ]
              }
            }
          }
        },
        {
          "id": 338,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "Xcm"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 339,
                    "typeName": "Vec<Instruction<Call>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 339,
          "type": {
            "def": {
              "sequence": {
                "type": 340
              }
            }
          }
        },
        {
          "id": 340,
          "type": {
            "path": [
              "staging_xcm",
              "v5",
              "Instruction"
            ],
            "params": [
              {
                "name": "Call",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "WithdrawAsset",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "ReserveAssetDeposited",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "ReceiveTeleportedAsset",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "QueryResponse",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "response",
                        "type": 111,
                        "typeName": "Response"
                      },
                      {
                        "name": "max_weight",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "querier",
                        "type": 120,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "TransferAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "beneficiary",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "TransferReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "dest",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Transact",
                    "fields": [
                      {
                        "name": "origin_kind",
                        "type": 121,
                        "typeName": "OriginKind"
                      },
                      {
                        "name": "fallback_max_weight",
                        "type": 122,
                        "typeName": "Option<Weight>"
                      },
                      {
                        "name": "call",
                        "type": 334,
                        "typeName": "DoubleEncoded<Call>"
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "HrmpNewChannelOpenRequest",
                    "fields": [
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_message_size",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "max_capacity",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "HrmpChannelAccepted",
                    "fields": [
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "HrmpChannelClosing",
                    "fields": [
                      {
                        "name": "initiator",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "sender",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "recipient",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "ClearOrigin",
                    "index": 10
                  },
                  {
                    "name": "DescendOrigin",
                    "fields": [
                      {
                        "type": 86,
                        "typeName": "InteriorLocation"
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "ReportError",
                    "fields": [
                      {
                        "type": 124,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "DepositAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "beneficiary",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "DepositReserveAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "ExchangeAsset",
                    "fields": [
                      {
                        "name": "give",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "want",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "maximal",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "InitiateReserveWithdraw",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "reserve",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "InitiateTeleport",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      },
                      {
                        "name": "dest",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "ReportHolding",
                    "fields": [
                      {
                        "name": "response_info",
                        "type": 124,
                        "typeName": "QueryResponseInfo"
                      },
                      {
                        "name": "assets",
                        "type": 125,
                        "typeName": "AssetFilter"
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "BuyExecution",
                    "fields": [
                      {
                        "name": "fees",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "RefundSurplus",
                    "index": 20
                  },
                  {
                    "name": "SetErrorHandler",
                    "fields": [
                      {
                        "type": 338,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "SetAppendix",
                    "fields": [
                      {
                        "type": 338,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "ClearError",
                    "index": 23
                  },
                  {
                    "name": "ClaimAsset",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 103,
                        "typeName": "Assets"
                      },
                      {
                        "name": "ticket",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Trap",
                    "fields": [
                      {
                        "type": 11,
                        "typeName": "u64"
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "SubscribeVersion",
                    "fields": [
                      {
                        "name": "query_id",
                        "type": 11,
                        "typeName": "QueryId"
                      },
                      {
                        "name": "max_response_weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "UnsubscribeVersion",
                    "index": 27
                  },
                  {
                    "name": "BurnAsset",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "ExpectAsset",
                    "fields": [
                      {
                        "type": 103,
                        "typeName": "Assets"
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "ExpectOrigin",
                    "fields": [
                      {
                        "type": 120,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "ExpectError",
                    "fields": [
                      {
                        "type": 112,
                        "typeName": "Option<(u32, Error)>"
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "ExpectTransactStatus",
                    "fields": [
                      {
                        "type": 118,
                        "typeName": "MaybeErrorCode"
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "QueryPallet",
                    "fields": [
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "response_info",
                        "type": 124,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "ExpectPallet",
                    "fields": [
                      {
                        "name": "index",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "module_name",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "crate_major",
                        "type": 50,
                        "typeName": "u32"
                      },
                      {
                        "name": "min_crate_minor",
                        "type": 50,
                        "typeName": "u32"
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "ReportTransactStatus",
                    "fields": [
                      {
                        "type": 124,
                        "typeName": "QueryResponseInfo"
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "ClearTransactStatus",
                    "index": 36
                  },
                  {
                    "name": "UniversalOrigin",
                    "fields": [
                      {
                        "type": 88,
                        "typeName": "Junction"
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "ExportMessage",
                    "fields": [
                      {
                        "name": "network",
                        "type": 90,
                        "typeName": "NetworkId"
                      },
                      {
                        "name": "destination",
                        "type": 86,
                        "typeName": "InteriorLocation"
                      },
                      {
                        "name": "xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "LockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "unlocker",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "UnlockAsset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "target",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "NoteUnlockable",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "owner",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "RequestUnlock",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      },
                      {
                        "name": "locker",
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "SetFeesMode",
                    "fields": [
                      {
                        "name": "jit_withdraw",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "SetTopic",
                    "fields": [
                      {
                        "type": 1,
                        "typeName": "[u8; 32]"
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "ClearTopic",
                    "index": 45
                  },
                  {
                    "name": "AliasOrigin",
                    "fields": [
                      {
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "UnpaidExecution",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      },
                      {
                        "name": "check_origin",
                        "type": 120,
                        "typeName": "Option<Location>"
                      }
                    ],
                    "index": 47
                  },
                  {
                    "name": "PayFees",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 105,
                        "typeName": "Asset"
                      }
                    ],
                    "index": 48
                  },
                  {
                    "name": "InitiateTransfer",
                    "fields": [
                      {
                        "name": "destination",
                        "type": 85,
                        "typeName": "Location"
                      },
                      {
                        "name": "remote_fees",
                        "type": 129,
                        "typeName": "Option<AssetTransferFilter>"
                      },
                      {
                        "name": "preserve_origin",
                        "type": 8,
                        "typeName": "bool"
                      },
                      {
                        "name": "assets",
                        "type": 131,
                        "typeName": "BoundedVec<AssetTransferFilter, MaxAssetTransferFilters>"
                      },
                      {
                        "name": "remote_xcm",
                        "type": 100,
                        "typeName": "Xcm<()>"
                      }
                    ],
                    "index": 49
                  },
                  {
                    "name": "ExecuteWithOrigin",
                    "fields": [
                      {
                        "name": "descendant_origin",
                        "type": 133,
                        "typeName": "Option<InteriorLocation>"
                      },
                      {
                        "name": "xcm",
                        "type": 338,
                        "typeName": "Xcm<Call>"
                      }
                    ],
                    "index": 50
                  },
                  {
                    "name": "SetHints",
                    "fields": [
                      {
                        "name": "hints",
                        "type": 134,
                        "typeName": "BoundedVec<Hint, HintNumVariants>"
                      }
                    ],
                    "index": 51
                  }
                ]
              }
            }
          }
        },
        {
          "id": 341,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 4
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 342,
          "type": {
            "path": [
              "staging_xcm_executor",
              "traits",
              "asset_transfer",
              "TransferType"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Teleport",
                    "index": 0
                  },
                  {
                    "name": "LocalReserve",
                    "index": 1
                  },
                  {
                    "name": "DestinationReserve",
                    "index": 2
                  },
                  {
                    "name": "RemoteReserve",
                    "fields": [
                      {
                        "type": 168,
                        "typeName": "VersionedLocation"
                      }
                    ],
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 343,
          "type": {
            "path": [
              "xcm",
              "VersionedAssetId"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 141,
                        "typeName": "v3::AssetId"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 152,
                        "typeName": "v4::AssetId"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "V5",
                    "fields": [
                      {
                        "type": 106,
                        "typeName": "v5::AssetId"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 344,
          "type": {
            "path": [
              "cumulus_pallet_xcm",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {}
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 345,
          "type": {
            "path": [
              "pallet_xc_asset_config",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "register_asset_location",
                    "fields": [
                      {
                        "name": "asset_location",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "asset_id",
                        "type": 51,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Register new asset location to asset Id mapping.",
                      "",
                      "This makes the asset eligible for XCM interaction."
                    ]
                  },
                  {
                    "name": "set_asset_units_per_second",
                    "fields": [
                      {
                        "name": "asset_location",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "units_per_second",
                        "type": 51,
                        "typeName": "u128"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Change the amount of units we are charging per execution second",
                      "for a given AssetLocation."
                    ]
                  },
                  {
                    "name": "change_existing_asset_location",
                    "fields": [
                      {
                        "name": "new_asset_location",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "asset_id",
                        "type": 51,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Change the xcm type mapping for a given asset Id.",
                      "The new asset type will inherit old `units per second` value."
                    ]
                  },
                  {
                    "name": "remove_payment_asset",
                    "fields": [
                      {
                        "name": "asset_location",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Removes asset from the set of supported payment assets.",
                      "",
                      "The asset can still be interacted with via XCM but it cannot be used to pay for execution time."
                    ]
                  },
                  {
                    "name": "remove_asset",
                    "fields": [
                      {
                        "name": "asset_id",
                        "type": 51,
                        "typeName": "T::AssetId"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Removes all information related to asset, removing it from XCM support."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 346,
          "type": {
            "path": [
              "orml_xtokens",
              "module",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "transfer",
                    "fields": [
                      {
                        "name": "currency_id",
                        "type": 6,
                        "typeName": "T::CurrencyId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "dest_weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Transfer native currencies.",
                      "",
                      "`dest_weight_limit` is the weight for XCM execution on the dest",
                      "chain, and it would be charged from the transferred assets. If set",
                      "below requirements, the execution may fail and assets wouldn't be",
                      "received.",
                      "",
                      "It's a no-op if any error on local XCM execution or message sending.",
                      "Note sending assets out per se doesn't guarantee they would be",
                      "received. Receiving depends on if the XCM message could be delivered",
                      "by the network, and if the receiving chain would handle",
                      "messages correctly."
                    ]
                  },
                  {
                    "name": "transfer_multiasset",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 347,
                        "typeName": "Box<VersionedAsset>"
                      },
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "dest_weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Transfer `Asset`.",
                      "",
                      "`dest_weight_limit` is the weight for XCM execution on the dest",
                      "chain, and it would be charged from the transferred assets. If set",
                      "below requirements, the execution may fail and assets wouldn't be",
                      "received.",
                      "",
                      "It's a no-op if any error on local XCM execution or message sending.",
                      "Note sending assets out per se doesn't guarantee they would be",
                      "received. Receiving depends on if the XCM message could be delivered",
                      "by the network, and if the receiving chain would handle",
                      "messages correctly."
                    ]
                  },
                  {
                    "name": "transfer_with_fee",
                    "fields": [
                      {
                        "name": "currency_id",
                        "type": 6,
                        "typeName": "T::CurrencyId"
                      },
                      {
                        "name": "amount",
                        "type": 6,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "fee",
                        "type": 6,
                        "typeName": "T::Balance"
                      },
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "dest_weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Transfer native currencies specifying the fee and amount as",
                      "separate.",
                      "",
                      "`dest_weight_limit` is the weight for XCM execution on the dest",
                      "chain, and it would be charged from the transferred assets. If set",
                      "below requirements, the execution may fail and assets wouldn't be",
                      "received.",
                      "",
                      "`fee` is the amount to be spent to pay for execution in destination",
                      "chain. Both fee and amount will be subtracted form the callers",
                      "balance.",
                      "",
                      "If `fee` is not high enough to cover for the execution costs in the",
                      "destination chain, then the assets will be trapped in the",
                      "destination chain",
                      "",
                      "It's a no-op if any error on local XCM execution or message sending.",
                      "Note sending assets out per se doesn't guarantee they would be",
                      "received. Receiving depends on if the XCM message could be delivered",
                      "by the network, and if the receiving chain would handle",
                      "messages correctly."
                    ]
                  },
                  {
                    "name": "transfer_multiasset_with_fee",
                    "fields": [
                      {
                        "name": "asset",
                        "type": 347,
                        "typeName": "Box<VersionedAsset>"
                      },
                      {
                        "name": "fee",
                        "type": 347,
                        "typeName": "Box<VersionedAsset>"
                      },
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "dest_weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Transfer `Asset` specifying the fee and amount as separate.",
                      "",
                      "`dest_weight_limit` is the weight for XCM execution on the dest",
                      "chain, and it would be charged from the transferred assets. If set",
                      "below requirements, the execution may fail and assets wouldn't be",
                      "received.",
                      "",
                      "`fee` is the Asset to be spent to pay for execution in",
                      "destination chain. Both fee and amount will be subtracted form the",
                      "callers balance For now we only accept fee and asset having the same",
                      "`Location` id.",
                      "",
                      "If `fee` is not high enough to cover for the execution costs in the",
                      "destination chain, then the assets will be trapped in the",
                      "destination chain",
                      "",
                      "It's a no-op if any error on local XCM execution or message sending.",
                      "Note sending assets out per se doesn't guarantee they would be",
                      "received. Receiving depends on if the XCM message could be delivered",
                      "by the network, and if the receiving chain would handle",
                      "messages correctly."
                    ]
                  },
                  {
                    "name": "transfer_multicurrencies",
                    "fields": [
                      {
                        "name": "currencies",
                        "type": 348,
                        "typeName": "Vec<(T::CurrencyId, T::Balance)>"
                      },
                      {
                        "name": "fee_item",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "dest_weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Transfer several currencies specifying the item to be used as fee",
                      "",
                      "`dest_weight_limit` is the weight for XCM execution on the dest",
                      "chain, and it would be charged from the transferred assets. If set",
                      "below requirements, the execution may fail and assets wouldn't be",
                      "received.",
                      "",
                      "`fee_item` is index of the currencies tuple that we want to use for",
                      "payment",
                      "",
                      "It's a no-op if any error on local XCM execution or message sending.",
                      "Note sending assets out per se doesn't guarantee they would be",
                      "received. Receiving depends on if the XCM message could be delivered",
                      "by the network, and if the receiving chain would handle",
                      "messages correctly."
                    ]
                  },
                  {
                    "name": "transfer_multiassets",
                    "fields": [
                      {
                        "name": "assets",
                        "type": 137,
                        "typeName": "Box<VersionedAssets>"
                      },
                      {
                        "name": "fee_item",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "dest",
                        "type": 168,
                        "typeName": "Box<VersionedLocation>"
                      },
                      {
                        "name": "dest_weight_limit",
                        "type": 128,
                        "typeName": "WeightLimit"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Transfer several `Asset` specifying the item to be used as fee",
                      "",
                      "`dest_weight_limit` is the weight for XCM execution on the dest",
                      "chain, and it would be charged from the transferred assets. If set",
                      "below requirements, the execution may fail and assets wouldn't be",
                      "received.",
                      "",
                      "`fee_item` is index of the Assets that we want to use for",
                      "payment",
                      "",
                      "It's a no-op if any error on local XCM execution or message sending.",
                      "Note sending assets out per se doesn't guarantee they would be",
                      "received. Receiving depends on if the XCM message could be delivered",
                      "by the network, and if the receiving chain would handle",
                      "messages correctly."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 347,
          "type": {
            "path": [
              "xcm",
              "VersionedAsset"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 140,
                        "typeName": "v3::MultiAsset"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 151,
                        "typeName": "v4::Asset"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "V5",
                    "fields": [
                      {
                        "type": 105,
                        "typeName": "v5::Asset"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 348,
          "type": {
            "def": {
              "sequence": {
                "type": 349
              }
            }
          }
        },
        {
          "id": 349,
          "type": {
            "def": {
              "tuple": [
                6,
                6
              ]
            }
          }
        },
        {
          "id": 350,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "reap_page",
                    "fields": [
                      {
                        "name": "message_origin",
                        "type": 173,
                        "typeName": "MessageOriginOf<T>"
                      },
                      {
                        "name": "page_index",
                        "type": 4,
                        "typeName": "PageIndex"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Remove a page which has no more messages remaining to be processed or is stale."
                    ]
                  },
                  {
                    "name": "execute_overweight",
                    "fields": [
                      {
                        "name": "message_origin",
                        "type": 173,
                        "typeName": "MessageOriginOf<T>"
                      },
                      {
                        "name": "page",
                        "type": 4,
                        "typeName": "PageIndex"
                      },
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "T::Size"
                      },
                      {
                        "name": "weight_limit",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Execute an overweight message.",
                      "",
                      "Temporary processing errors will be propagated whereas permanent errors are treated",
                      "as success condition.",
                      "",
                      "- `origin`: Must be `Signed`.",
                      "- `message_origin`: The origin from which the message to be executed arrived.",
                      "- `page`: The page in the queue in which the message to be executed is sitting.",
                      "- `index`: The index into the queue of the message to be executed.",
                      "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                      "  of the message.",
                      "",
                      "Benchmark complexity considerations: O(index + weight_limit)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 351,
          "type": {
            "path": [
              "pallet_evm",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "withdraw",
                    "fields": [
                      {
                        "name": "address",
                        "type": 57,
                        "typeName": "H160"
                      },
                      {
                        "name": "value",
                        "type": 6,
                        "typeName": "BalanceOf<T>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Withdraw balance from EVM into currency/balances pallet."
                    ]
                  },
                  {
                    "name": "call",
                    "fields": [
                      {
                        "name": "source",
                        "type": 57,
                        "typeName": "H160"
                      },
                      {
                        "name": "target",
                        "type": 57,
                        "typeName": "H160"
                      },
                      {
                        "name": "input",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "value",
                        "type": 189,
                        "typeName": "U256"
                      },
                      {
                        "name": "gas_limit",
                        "type": 12,
                        "typeName": "u64"
                      },
                      {
                        "name": "max_fee_per_gas",
                        "type": 189,
                        "typeName": "U256"
                      },
                      {
                        "name": "max_priority_fee_per_gas",
                        "type": 352,
                        "typeName": "Option<U256>"
                      },
                      {
                        "name": "nonce",
                        "type": 352,
                        "typeName": "Option<U256>"
                      },
                      {
                        "name": "access_list",
                        "type": 353,
                        "typeName": "Vec<(H160, Vec<H256>)>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
                    ]
                  },
                  {
                    "name": "create",
                    "fields": [
                      {
                        "name": "source",
                        "type": 57,
                        "typeName": "H160"
                      },
                      {
                        "name": "init",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "value",
                        "type": 189,
                        "typeName": "U256"
                      },
                      {
                        "name": "gas_limit",
                        "type": 12,
                        "typeName": "u64"
                      },
                      {
                        "name": "max_fee_per_gas",
                        "type": 189,
                        "typeName": "U256"
                      },
                      {
                        "name": "max_priority_fee_per_gas",
                        "type": 352,
                        "typeName": "Option<U256>"
                      },
                      {
                        "name": "nonce",
                        "type": 352,
                        "typeName": "Option<U256>"
                      },
                      {
                        "name": "access_list",
                        "type": 353,
                        "typeName": "Vec<(H160, Vec<H256>)>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Issue an EVM create operation. This is similar to a contract creation transaction in",
                      "Ethereum."
                    ]
                  },
                  {
                    "name": "create2",
                    "fields": [
                      {
                        "name": "source",
                        "type": 57,
                        "typeName": "H160"
                      },
                      {
                        "name": "init",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "salt",
                        "type": 13,
                        "typeName": "H256"
                      },
                      {
                        "name": "value",
                        "type": 189,
                        "typeName": "U256"
                      },
                      {
                        "name": "gas_limit",
                        "type": 12,
                        "typeName": "u64"
                      },
                      {
                        "name": "max_fee_per_gas",
                        "type": 189,
                        "typeName": "U256"
                      },
                      {
                        "name": "max_priority_fee_per_gas",
                        "type": 352,
                        "typeName": "Option<U256>"
                      },
                      {
                        "name": "nonce",
                        "type": 352,
                        "typeName": "Option<U256>"
                      },
                      {
                        "name": "access_list",
                        "type": 353,
                        "typeName": "Vec<(H160, Vec<H256>)>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Issue an EVM create2 operation."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 352,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 189
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 189
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 353,
          "type": {
            "def": {
              "sequence": {
                "type": 354
              }
            }
          }
        },
        {
          "id": 354,
          "type": {
            "def": {
              "tuple": [
                57,
                178
              ]
            }
          }
        },
        {
          "id": 355,
          "type": {
            "path": [
              "pallet_ethereum",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "transact",
                    "fields": [
                      {
                        "name": "transaction",
                        "type": 356,
                        "typeName": "Transaction"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Transact an Ethereum transaction."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 356,
          "type": {
            "path": [
              "ethereum",
              "transaction",
              "TransactionV2"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Legacy",
                    "fields": [
                      {
                        "type": 357,
                        "typeName": "LegacyTransaction"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "EIP2930",
                    "fields": [
                      {
                        "type": 361,
                        "typeName": "EIP2930Transaction"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "EIP1559",
                    "fields": [
                      {
                        "type": 364,
                        "typeName": "EIP1559Transaction"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 357,
          "type": {
            "path": [
              "ethereum",
              "transaction",
              "legacy",
              "LegacyTransaction"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "gas_price",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "gas_limit",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "action",
                    "type": 358,
                    "typeName": "TransactionAction"
                  },
                  {
                    "name": "value",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "input",
                    "type": 14,
                    "typeName": "Bytes"
                  },
                  {
                    "name": "signature",
                    "type": 359,
                    "typeName": "TransactionSignature"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 358,
          "type": {
            "path": [
              "ethereum",
              "transaction",
              "legacy",
              "TransactionAction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Call",
                    "fields": [
                      {
                        "type": 57,
                        "typeName": "H160"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Create",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 359,
          "type": {
            "path": [
              "ethereum",
              "transaction",
              "legacy",
              "TransactionSignature"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "v",
                    "type": 360,
                    "typeName": "TransactionRecoveryId"
                  },
                  {
                    "name": "r",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "s",
                    "type": 13,
                    "typeName": "H256"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 360,
          "type": {
            "path": [
              "ethereum",
              "transaction",
              "legacy",
              "TransactionRecoveryId"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 361,
          "type": {
            "path": [
              "ethereum",
              "transaction",
              "eip2930",
              "EIP2930Transaction"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "nonce",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "gas_price",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "gas_limit",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "action",
                    "type": 358,
                    "typeName": "TransactionAction"
                  },
                  {
                    "name": "value",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "input",
                    "type": 14,
                    "typeName": "Bytes"
                  },
                  {
                    "name": "access_list",
                    "type": 362,
                    "typeName": "AccessList"
                  },
                  {
                    "name": "odd_y_parity",
                    "type": 8,
                    "typeName": "bool"
                  },
                  {
                    "name": "r",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "s",
                    "type": 13,
                    "typeName": "H256"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 362,
          "type": {
            "def": {
              "sequence": {
                "type": 363
              }
            }
          }
        },
        {
          "id": 363,
          "type": {
            "path": [
              "ethereum",
              "transaction",
              "eip2930",
              "AccessListItem"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "address",
                    "type": 57,
                    "typeName": "Address"
                  },
                  {
                    "name": "storage_keys",
                    "type": 178,
                    "typeName": "Vec<H256>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 364,
          "type": {
            "path": [
              "ethereum",
              "transaction",
              "eip1559",
              "EIP1559Transaction"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "chain_id",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "nonce",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "max_priority_fee_per_gas",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "max_fee_per_gas",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "gas_limit",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "action",
                    "type": 358,
                    "typeName": "TransactionAction"
                  },
                  {
                    "name": "value",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "input",
                    "type": 14,
                    "typeName": "Bytes"
                  },
                  {
                    "name": "access_list",
                    "type": 362,
                    "typeName": "AccessList"
                  },
                  {
                    "name": "odd_y_parity",
                    "type": 8,
                    "typeName": "bool"
                  },
                  {
                    "name": "r",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "s",
                    "type": 13,
                    "typeName": "H256"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 365,
          "type": {
            "path": [
              "pallet_dynamic_evm_base_fee",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_base_fee_per_gas",
                    "fields": [
                      {
                        "name": "fee",
                        "type": 189,
                        "typeName": "U256"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "`root-only` extrinsic to set the `base_fee_per_gas` value manually.",
                      "The specified value has to respect min & max limits configured in the runtime."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 366,
          "type": {
            "path": [
              "pallet_contracts",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "call_old_weight",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "gas_limit",
                        "type": 11,
                        "typeName": "OldWeight"
                      },
                      {
                        "name": "storage_deposit_limit",
                        "type": 367,
                        "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                      },
                      {
                        "name": "data",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Deprecated version if [`Self::call`] for use in an in-storage `Call`."
                    ]
                  },
                  {
                    "name": "instantiate_with_code_old_weight",
                    "fields": [
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "gas_limit",
                        "type": 11,
                        "typeName": "OldWeight"
                      },
                      {
                        "name": "storage_deposit_limit",
                        "type": 367,
                        "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                      },
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "data",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "salt",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Deprecated version if [`Self::instantiate_with_code`] for use in an in-storage `Call`."
                    ]
                  },
                  {
                    "name": "instantiate_old_weight",
                    "fields": [
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "gas_limit",
                        "type": 11,
                        "typeName": "OldWeight"
                      },
                      {
                        "name": "storage_deposit_limit",
                        "type": 367,
                        "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                      },
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "CodeHash<T>"
                      },
                      {
                        "name": "data",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "salt",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Deprecated version if [`Self::instantiate`] for use in an in-storage `Call`."
                    ]
                  },
                  {
                    "name": "upload_code",
                    "fields": [
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "storage_deposit_limit",
                        "type": 367,
                        "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                      },
                      {
                        "name": "determinism",
                        "type": 368,
                        "typeName": "Determinism"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Upload new `code` without instantiating a contract from it.",
                      "",
                      "If the code does not already exist a deposit is reserved from the caller",
                      "and unreserved only when [`Self::remove_code`] is called. The size of the reserve",
                      "depends on the size of the supplied `code`.",
                      "",
                      "If the code already exists in storage it will still return `Ok` and upgrades",
                      "the in storage version to the current",
                      "[`InstructionWeights::version`](InstructionWeights).",
                      "",
                      "- `determinism`: If this is set to any other value but [`Determinism::Enforced`] then",
                      "  the only way to use this code is to delegate call into it from an offchain execution.",
                      "  Set to [`Determinism::Enforced`] if in doubt.",
                      "",
                      "# Note",
                      "",
                      "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.",
                      "To avoid this situation a constructor could employ access control so that it can",
                      "only be instantiated by permissioned entities. The same is true when uploading",
                      "through [`Self::instantiate_with_code`].",
                      "",
                      "Use [`Determinism::Relaxed`] exclusively for non-deterministic code. If the uploaded",
                      "code is deterministic, specifying [`Determinism::Relaxed`] will be disregarded and",
                      "result in higher gas costs."
                    ]
                  },
                  {
                    "name": "remove_code",
                    "fields": [
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "CodeHash<T>"
                      }
                    ],
                    "index": 4,
                    "docs": [
                      "Remove the code stored under `code_hash` and refund the deposit to its owner.",
                      "",
                      "A code can only be removed by its original uploader (its owner) and only if it is",
                      "not used by any contract."
                    ]
                  },
                  {
                    "name": "set_code",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "CodeHash<T>"
                      }
                    ],
                    "index": 5,
                    "docs": [
                      "Privileged function that changes the code of an existing contract.",
                      "",
                      "This takes care of updating refcounts and all other necessary operations. Returns",
                      "an error if either the `code_hash` or `dest` do not exist.",
                      "",
                      "# Note",
                      "",
                      "This does **not** change the address of the contract in question. This means",
                      "that the contract address is no longer derived from its code hash after calling",
                      "this dispatchable."
                    ]
                  },
                  {
                    "name": "call",
                    "fields": [
                      {
                        "name": "dest",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "gas_limit",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "storage_deposit_limit",
                        "type": 367,
                        "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                      },
                      {
                        "name": "data",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 6,
                    "docs": [
                      "Makes a call to an account, optionally transferring some balance.",
                      "",
                      "# Parameters",
                      "",
                      "* `dest`: Address of the contract to call.",
                      "* `value`: The balance to transfer from the `origin` to `dest`.",
                      "* `gas_limit`: The gas limit enforced when executing the constructor.",
                      "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the",
                      "  caller to pay for the storage consumed.",
                      "* `data`: The input data to pass to the contract.",
                      "",
                      "* If the account is a smart-contract account, the associated code will be",
                      "executed and any value will be transferred.",
                      "* If the account is a regular account, any value will be transferred.",
                      "* If no account exists and the call value is not less than `existential_deposit`,",
                      "a regular account will be created and any value will be transferred."
                    ]
                  },
                  {
                    "name": "instantiate_with_code",
                    "fields": [
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "gas_limit",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "storage_deposit_limit",
                        "type": 367,
                        "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                      },
                      {
                        "name": "code",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "data",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "salt",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 7,
                    "docs": [
                      "Instantiates a new contract from the supplied `code` optionally transferring",
                      "some balance.",
                      "",
                      "This dispatchable has the same effect as calling [`Self::upload_code`] +",
                      "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please",
                      "also check the documentation of [`Self::upload_code`].",
                      "",
                      "# Parameters",
                      "",
                      "* `value`: The balance to transfer from the `origin` to the newly created contract.",
                      "* `gas_limit`: The gas limit enforced when executing the constructor.",
                      "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved",
                      "  from the caller to pay for the storage consumed.",
                      "* `code`: The contract code to deploy in raw bytes.",
                      "* `data`: The input data to pass to the contract constructor.",
                      "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].",
                      "",
                      "Instantiation is executed as follows:",
                      "",
                      "- The supplied `code` is deployed, and a `code_hash` is created for that code.",
                      "- If the `code_hash` already exists on the chain the underlying `code` will be shared.",
                      "- The destination address is computed based on the sender, code_hash and the salt.",
                      "- The smart-contract account is created at the computed address.",
                      "- The `value` is transferred to the new account.",
                      "- The `deploy` function is executed in the context of the newly-created account."
                    ]
                  },
                  {
                    "name": "instantiate",
                    "fields": [
                      {
                        "name": "value",
                        "type": 51,
                        "typeName": "BalanceOf<T>"
                      },
                      {
                        "name": "gas_limit",
                        "type": 10,
                        "typeName": "Weight"
                      },
                      {
                        "name": "storage_deposit_limit",
                        "type": 367,
                        "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>"
                      },
                      {
                        "name": "code_hash",
                        "type": 13,
                        "typeName": "CodeHash<T>"
                      },
                      {
                        "name": "data",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      },
                      {
                        "name": "salt",
                        "type": 14,
                        "typeName": "Vec<u8>"
                      }
                    ],
                    "index": 8,
                    "docs": [
                      "Instantiates a contract from a previously deployed wasm binary.",
                      "",
                      "This function is identical to [`Self::instantiate_with_code`] but without the",
                      "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary",
                      "must be supplied."
                    ]
                  },
                  {
                    "name": "migrate",
                    "fields": [
                      {
                        "name": "weight_limit",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 9,
                    "docs": [
                      "When a migration is in progress, this dispatchable can be used to run migration steps.",
                      "Calls that contribute to advancing the migration have their fees waived, as it's helpful",
                      "for the chain. Note that while the migration is in progress, the pallet will also",
                      "leverage the `on_idle` hooks to run migration steps."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 367,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 51
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 51
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 368,
          "type": {
            "path": [
              "pallet_contracts",
              "wasm",
              "Determinism"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Enforced",
                    "index": 0
                  },
                  {
                    "name": "Relaxed",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 369,
          "type": {
            "path": [
              "pallet_sudo",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "sudo",
                    "fields": [
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Authenticates the sudo key and dispatches a function call with `Root` origin."
                    ]
                  },
                  {
                    "name": "sudo_unchecked_weight",
                    "fields": [
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      },
                      {
                        "name": "weight",
                        "type": 10,
                        "typeName": "Weight"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                      "This function does not check the weight of the call, and instead allows the",
                      "Sudo user to specify the weight of the call.",
                      "",
                      "The dispatch origin for this call must be _Signed_."
                    ]
                  },
                  {
                    "name": "set_key",
                    "fields": [
                      {
                        "name": "new",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      }
                    ],
                    "index": 2,
                    "docs": [
                      "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                      "key."
                    ]
                  },
                  {
                    "name": "sudo_as",
                    "fields": [
                      {
                        "name": "who",
                        "type": 221,
                        "typeName": "AccountIdLookupOf<T>"
                      },
                      {
                        "name": "call",
                        "type": 219,
                        "typeName": "Box<<T as Config>::RuntimeCall>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                      "a given account.",
                      "",
                      "The dispatch origin for this call must be _Signed_."
                    ]
                  },
                  {
                    "name": "remove_key",
                    "index": 4,
                    "docs": [
                      "Permanently removes the sudo key.",
                      "",
                      "**This cannot be un-done.**"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 370,
          "type": {
            "path": [
              "pallet_migrations",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "force_set_cursor",
                    "fields": [
                      {
                        "name": "cursor",
                        "type": 371,
                        "typeName": "Option<CursorOf<T>>"
                      }
                    ],
                    "index": 0,
                    "docs": [
                      "Allows root to set a cursor to forcefully start, stop or forward the migration process.",
                      "",
                      "Should normally not be needed and is only in place as emergency measure. Note that",
                      "restarting the migration process in this manner will not call the",
                      "[`MigrationStatusHandler::started`] hook or emit an `UpgradeStarted` event."
                    ]
                  },
                  {
                    "name": "force_set_active_cursor",
                    "fields": [
                      {
                        "name": "index",
                        "type": 4,
                        "typeName": "u32"
                      },
                      {
                        "name": "inner_cursor",
                        "type": 375,
                        "typeName": "Option<RawCursorOf<T>>"
                      },
                      {
                        "name": "started_at",
                        "type": 341,
                        "typeName": "Option<BlockNumberFor<T>>"
                      }
                    ],
                    "index": 1,
                    "docs": [
                      "Allows root to set an active cursor to forcefully start/forward the migration process.",
                      "",
                      "This is an edge-case version of [`Self::force_set_cursor`] that allows to set the",
                      "`started_at` value to the next block number. Otherwise this would not be possible, since",
                      "`force_set_cursor` takes an absolute block number. Setting `started_at` to `None`",
                      "indicates that the current block number plus one should be used."
                    ]
                  },
                  {
                    "name": "force_onboard_mbms",
                    "index": 2,
                    "docs": [
                      "Forces the onboarding of the migrations.",
                      "",
                      "This process happens automatically on a runtime upgrade. It is in place as an emergency",
                      "measurement. The cursor needs to be `None` for this to succeed."
                    ]
                  },
                  {
                    "name": "clear_historic",
                    "fields": [
                      {
                        "name": "selector",
                        "type": 376,
                        "typeName": "HistoricCleanupSelector<IdentifierOf<T>>"
                      }
                    ],
                    "index": 3,
                    "docs": [
                      "Clears the `Historic` set.",
                      "",
                      "`map_cursor` must be set to the last value that was returned by the",
                      "`HistoricCleared` event. The first time `None` can be used. `limit` must be chosen in a",
                      "way that will result in a sensible weight."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Contains a variant per dispatchable extrinsic that this pallet has."
            ]
          }
        },
        {
          "id": 371,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 372
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 372
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 372,
          "type": {
            "path": [
              "pallet_migrations",
              "MigrationCursor"
            ],
            "params": [
              {
                "name": "Cursor",
                "type": 373
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Active",
                    "fields": [
                      {
                        "type": 374,
                        "typeName": "ActiveCursor<Cursor, BlockNumber>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Stuck",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 373,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 374,
          "type": {
            "path": [
              "pallet_migrations",
              "ActiveCursor"
            ],
            "params": [
              {
                "name": "Cursor",
                "type": 373
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "inner_cursor",
                    "type": 375,
                    "typeName": "Option<Cursor>"
                  },
                  {
                    "name": "started_at",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 375,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 373
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 373
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 376,
          "type": {
            "path": [
              "pallet_migrations",
              "HistoricCleanupSelector"
            ],
            "params": [
              {
                "name": "Id",
                "type": 377
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Specific",
                    "fields": [
                      {
                        "type": 378,
                        "typeName": "Vec<Id>"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Wildcard",
                    "fields": [
                      {
                        "name": "limit",
                        "type": 341,
                        "typeName": "Option<u32>"
                      },
                      {
                        "name": "previous_cursor",
                        "type": 196,
                        "typeName": "Option<Vec<u8>>"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 377,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 378,
          "type": {
            "def": {
              "sequence": {
                "type": 377
              }
            }
          }
        },
        {
          "id": 379,
          "type": {
            "path": [
              "shiden_runtime",
              "OriginCaller"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "system",
                    "fields": [
                      {
                        "type": 380,
                        "typeName": "frame_system::Origin<Runtime>"
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "PolkadotXcm",
                    "fields": [
                      {
                        "type": 381,
                        "typeName": "pallet_xcm::Origin"
                      }
                    ],
                    "index": 51
                  },
                  {
                    "name": "CumulusXcm",
                    "fields": [
                      {
                        "type": 382,
                        "typeName": "cumulus_pallet_xcm::Origin"
                      }
                    ],
                    "index": 52
                  },
                  {
                    "name": "Ethereum",
                    "fields": [
                      {
                        "type": 383,
                        "typeName": "pallet_ethereum::Origin"
                      }
                    ],
                    "index": 61
                  }
                ]
              }
            }
          }
        },
        {
          "id": 380,
          "type": {
            "path": [
              "frame_support",
              "dispatch",
              "RawOrigin"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Root",
                    "index": 0
                  },
                  {
                    "name": "Signed",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "AccountId"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "None",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 381,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Origin"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Xcm",
                    "fields": [
                      {
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "Response",
                    "fields": [
                      {
                        "type": 85,
                        "typeName": "Location"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 382,
          "type": {
            "path": [
              "cumulus_pallet_xcm",
              "pallet",
              "Origin"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Relay",
                    "index": 0
                  },
                  {
                    "name": "SiblingParachain",
                    "fields": [
                      {
                        "type": 174,
                        "typeName": "ParaId"
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 383,
          "type": {
            "path": [
              "pallet_ethereum",
              "RawOrigin"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "EthereumTransaction",
                    "fields": [
                      {
                        "type": 57,
                        "typeName": "H160"
                      }
                    ],
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 384,
          "type": {
            "path": [
              "pallet_utility",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TooManyCalls",
                    "index": 0,
                    "docs": [
                      "Too many calls batched."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 385,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "Registration"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "MaxJudgements",
                "type": null
              },
              {
                "name": "IdentityInfo",
                "type": 223
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "judgements",
                    "type": 386,
                    "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "info",
                    "type": 223,
                    "typeName": "IdentityInfo"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 386,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 387
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 388,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 387,
          "type": {
            "def": {
              "tuple": [
                4,
                259
              ]
            }
          }
        },
        {
          "id": 388,
          "type": {
            "def": {
              "sequence": {
                "type": 387
              }
            }
          }
        },
        {
          "id": 389,
          "type": {
            "def": {
              "tuple": [
                6,
                390
              ]
            }
          }
        },
        {
          "id": 390,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 79,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 391,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 392
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 394,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 392,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 393
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 393
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 393,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "RegistrarInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "IdField",
                "type": 12
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "account",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "fee",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "fields",
                    "type": 12,
                    "typeName": "IdField"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 394,
          "type": {
            "def": {
              "sequence": {
                "type": 392
              }
            }
          }
        },
        {
          "id": 395,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 396,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "AuthorityProperties"
            ],
            "params": [
              {
                "name": "Account",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "account_id",
                    "type": 0,
                    "typeName": "Account"
                  },
                  {
                    "name": "allocation",
                    "type": 4,
                    "typeName": "Allocation"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 397,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "UsernameInformation"
            ],
            "params": [
              {
                "name": "Account",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "owner",
                    "type": 0,
                    "typeName": "Account"
                  },
                  {
                    "name": "provider",
                    "type": 398,
                    "typeName": "Provider<Balance>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 398,
          "type": {
            "path": [
              "pallet_identity",
              "types",
              "Provider"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Allocation",
                    "index": 0
                  },
                  {
                    "name": "AuthorityDeposit",
                    "fields": [
                      {
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "System",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 399,
          "type": {
            "def": {
              "tuple": [
                0,
                4,
                398
              ]
            }
          }
        },
        {
          "id": 400,
          "type": {
            "path": [
              "pallet_identity",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TooManySubAccounts",
                    "index": 0,
                    "docs": [
                      "Too many subs-accounts."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "index": 1,
                    "docs": [
                      "Account isn't found."
                    ]
                  },
                  {
                    "name": "NotNamed",
                    "index": 2,
                    "docs": [
                      "Account isn't named."
                    ]
                  },
                  {
                    "name": "EmptyIndex",
                    "index": 3,
                    "docs": [
                      "Empty index."
                    ]
                  },
                  {
                    "name": "FeeChanged",
                    "index": 4,
                    "docs": [
                      "Fee is changed."
                    ]
                  },
                  {
                    "name": "NoIdentity",
                    "index": 5,
                    "docs": [
                      "No identity found."
                    ]
                  },
                  {
                    "name": "StickyJudgement",
                    "index": 6,
                    "docs": [
                      "Sticky judgement."
                    ]
                  },
                  {
                    "name": "JudgementGiven",
                    "index": 7,
                    "docs": [
                      "Judgement given."
                    ]
                  },
                  {
                    "name": "InvalidJudgement",
                    "index": 8,
                    "docs": [
                      "Invalid judgement."
                    ]
                  },
                  {
                    "name": "InvalidIndex",
                    "index": 9,
                    "docs": [
                      "The index is invalid."
                    ]
                  },
                  {
                    "name": "InvalidTarget",
                    "index": 10,
                    "docs": [
                      "The target is invalid."
                    ]
                  },
                  {
                    "name": "TooManyRegistrars",
                    "index": 11,
                    "docs": [
                      "Maximum amount of registrars reached. Cannot add any more."
                    ]
                  },
                  {
                    "name": "AlreadyClaimed",
                    "index": 12,
                    "docs": [
                      "Account ID is already named."
                    ]
                  },
                  {
                    "name": "NotSub",
                    "index": 13,
                    "docs": [
                      "Sender is not a sub-account."
                    ]
                  },
                  {
                    "name": "NotOwned",
                    "index": 14,
                    "docs": [
                      "Sub-account isn't owned by sender."
                    ]
                  },
                  {
                    "name": "JudgementForDifferentIdentity",
                    "index": 15,
                    "docs": [
                      "The provided judgement was for a different identity."
                    ]
                  },
                  {
                    "name": "JudgementPaymentFailed",
                    "index": 16,
                    "docs": [
                      "Error that occurs when there is an issue paying for judgement."
                    ]
                  },
                  {
                    "name": "InvalidSuffix",
                    "index": 17,
                    "docs": [
                      "The provided suffix is too long."
                    ]
                  },
                  {
                    "name": "NotUsernameAuthority",
                    "index": 18,
                    "docs": [
                      "The sender does not have permission to issue a username."
                    ]
                  },
                  {
                    "name": "NoAllocation",
                    "index": 19,
                    "docs": [
                      "The authority cannot allocate any more usernames."
                    ]
                  },
                  {
                    "name": "InvalidSignature",
                    "index": 20,
                    "docs": [
                      "The signature on a username was not valid."
                    ]
                  },
                  {
                    "name": "RequiresSignature",
                    "index": 21,
                    "docs": [
                      "Setting this username requires a signature, but none was provided."
                    ]
                  },
                  {
                    "name": "InvalidUsername",
                    "index": 22,
                    "docs": [
                      "The username does not meet the requirements."
                    ]
                  },
                  {
                    "name": "UsernameTaken",
                    "index": 23,
                    "docs": [
                      "The username is already taken."
                    ]
                  },
                  {
                    "name": "NoUsername",
                    "index": 24,
                    "docs": [
                      "The requested username does not exist."
                    ]
                  },
                  {
                    "name": "NotExpired",
                    "index": 25,
                    "docs": [
                      "The username cannot be forcefully removed because it can still be accepted."
                    ]
                  },
                  {
                    "name": "TooEarly",
                    "index": 26,
                    "docs": [
                      "The username cannot be removed because it's still in the grace period."
                    ]
                  },
                  {
                    "name": "NotUnbinding",
                    "index": 27,
                    "docs": [
                      "The username cannot be removed because it is not unbinding."
                    ]
                  },
                  {
                    "name": "AlreadyUnbinding",
                    "index": 28,
                    "docs": [
                      "The username cannot be unbound because it is already unbinding."
                    ]
                  },
                  {
                    "name": "InsufficientPrivileges",
                    "index": 29,
                    "docs": [
                      "The action cannot be performed because of insufficient privileges (e.g. authority",
                      "trying to unbind a username provided by the system)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 401,
          "type": {
            "def": {
              "tuple": [
                0,
                1
              ]
            }
          }
        },
        {
          "id": 402,
          "type": {
            "path": [
              "pallet_multisig",
              "Multisig"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "MaxApprovals",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "when",
                    "type": 38,
                    "typeName": "Timepoint<BlockNumber>"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "depositor",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "approvals",
                    "type": 403,
                    "typeName": "BoundedVec<AccountId, MaxApprovals>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 403,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 79,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 404,
          "type": {
            "path": [
              "pallet_multisig",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MinimumThreshold",
                    "index": 0,
                    "docs": [
                      "Threshold must be 2 or greater."
                    ]
                  },
                  {
                    "name": "AlreadyApproved",
                    "index": 1,
                    "docs": [
                      "Call is already approved by this signatory."
                    ]
                  },
                  {
                    "name": "NoApprovalsNeeded",
                    "index": 2,
                    "docs": [
                      "Call doesn't need any (more) approvals."
                    ]
                  },
                  {
                    "name": "TooFewSignatories",
                    "index": 3,
                    "docs": [
                      "There are too few signatories in the list."
                    ]
                  },
                  {
                    "name": "TooManySignatories",
                    "index": 4,
                    "docs": [
                      "There are too many signatories in the list."
                    ]
                  },
                  {
                    "name": "SignatoriesOutOfOrder",
                    "index": 5,
                    "docs": [
                      "The signatories were provided out of order; they should be ordered."
                    ]
                  },
                  {
                    "name": "SenderInSignatories",
                    "index": 6,
                    "docs": [
                      "The sender was contained in the other signatories; it shouldn't be."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "index": 7,
                    "docs": [
                      "Multisig operation not found when attempting to cancel."
                    ]
                  },
                  {
                    "name": "NotOwner",
                    "index": 8,
                    "docs": [
                      "Only the account that originally created the multisig is able to cancel it."
                    ]
                  },
                  {
                    "name": "NoTimepoint",
                    "index": 9,
                    "docs": [
                      "No timepoint was given, yet the multisig operation is already underway."
                    ]
                  },
                  {
                    "name": "WrongTimepoint",
                    "index": 10,
                    "docs": [
                      "A different timepoint was given to the multisig operation that is underway."
                    ]
                  },
                  {
                    "name": "UnexpectedTimepoint",
                    "index": 11,
                    "docs": [
                      "A timepoint was given, yet no multisig operation is underway."
                    ]
                  },
                  {
                    "name": "MaxWeightTooLow",
                    "index": 12,
                    "docs": [
                      "The maximum weight information provided was too low."
                    ]
                  },
                  {
                    "name": "AlreadyStored",
                    "index": 13,
                    "docs": [
                      "The data to be stored is already stored."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 405,
          "type": {
            "def": {
              "tuple": [
                406,
                6
              ]
            }
          }
        },
        {
          "id": 406,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 407
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 408,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 407,
          "type": {
            "path": [
              "pallet_proxy",
              "ProxyDefinition"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "ProxyType",
                "type": 40
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "delegate",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "proxy_type",
                    "type": 40,
                    "typeName": "ProxyType"
                  },
                  {
                    "name": "delay",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 408,
          "type": {
            "def": {
              "sequence": {
                "type": 407
              }
            }
          }
        },
        {
          "id": 409,
          "type": {
            "def": {
              "tuple": [
                410,
                6
              ]
            }
          }
        },
        {
          "id": 410,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 411
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 412,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 411,
          "type": {
            "path": [
              "pallet_proxy",
              "Announcement"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Hash",
                "type": 13
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "real",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "call_hash",
                    "type": 13,
                    "typeName": "Hash"
                  },
                  {
                    "name": "height",
                    "type": 4,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 412,
          "type": {
            "def": {
              "sequence": {
                "type": 411
              }
            }
          }
        },
        {
          "id": 413,
          "type": {
            "path": [
              "pallet_proxy",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TooMany",
                    "index": 0,
                    "docs": [
                      "There are too many proxies registered or too many announcements pending."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "index": 1,
                    "docs": [
                      "Proxy registration not found."
                    ]
                  },
                  {
                    "name": "NotProxy",
                    "index": 2,
                    "docs": [
                      "Sender is not a proxy of the account to be proxied."
                    ]
                  },
                  {
                    "name": "Unproxyable",
                    "index": 3,
                    "docs": [
                      "A call which is incompatible with the proxy type's filter was attempted."
                    ]
                  },
                  {
                    "name": "Duplicate",
                    "index": 4,
                    "docs": [
                      "Account is already a proxy."
                    ]
                  },
                  {
                    "name": "NoPermission",
                    "index": 5,
                    "docs": [
                      "Call may not be made by proxy because it may escalate its privileges."
                    ]
                  },
                  {
                    "name": "Unannounced",
                    "index": 6,
                    "docs": [
                      "Announcement, if made at all, was made too recently."
                    ]
                  },
                  {
                    "name": "NoSelfProxy",
                    "index": 7,
                    "docs": [
                      "Cannot add self as proxy."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 414,
          "type": {
            "def": {
              "sequence": {
                "type": 415
              }
            }
          }
        },
        {
          "id": 415,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "unincluded_segment",
              "Ancestor"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "used_bandwidth",
                    "type": 416,
                    "typeName": "UsedBandwidth"
                  },
                  {
                    "name": "para_head_hash",
                    "type": 421,
                    "typeName": "Option<H>"
                  },
                  {
                    "name": "consumed_go_ahead_signal",
                    "type": 422,
                    "typeName": "Option<relay_chain::UpgradeGoAhead>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 416,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "unincluded_segment",
              "UsedBandwidth"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "ump_msg_count",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "ump_total_bytes",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_outgoing",
                    "type": 417,
                    "typeName": "BTreeMap<ParaId, HrmpChannelUpdate>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 417,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 174
              },
              {
                "name": "V",
                "type": 418
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 419
                  }
                ]
              }
            }
          }
        },
        {
          "id": 418,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "unincluded_segment",
              "HrmpChannelUpdate"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "msg_count",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "total_bytes",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 419,
          "type": {
            "def": {
              "sequence": {
                "type": 420
              }
            }
          }
        },
        {
          "id": 420,
          "type": {
            "def": {
              "tuple": [
                174,
                418
              ]
            }
          }
        },
        {
          "id": 421,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 13
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 13
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 422,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 423
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 423
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 423,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "UpgradeGoAhead"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Abort",
                    "index": 0
                  },
                  {
                    "name": "GoAhead",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 424,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "unincluded_segment",
              "SegmentTracker"
            ],
            "params": [
              {
                "name": "H",
                "type": 13
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "used_bandwidth",
                    "type": 416,
                    "typeName": "UsedBandwidth"
                  },
                  {
                    "name": "hrmp_watermark",
                    "type": 341,
                    "typeName": "Option<relay_chain::BlockNumber>"
                  },
                  {
                    "name": "consumed_go_ahead_signal",
                    "type": 422,
                    "typeName": "Option<relay_chain::UpgradeGoAhead>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 425,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 426
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 426
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 426,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "UpgradeRestriction"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Present",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 427,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "relay_state_snapshot",
              "MessagingStateSnapshot"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "dmq_mqc_head",
                    "type": 13,
                    "typeName": "relay_chain::Hash"
                  },
                  {
                    "name": "relay_dispatch_queue_remaining_capacity",
                    "type": 428,
                    "typeName": "RelayDispatchQueueRemainingCapacity"
                  },
                  {
                    "name": "ingress_channels",
                    "type": 429,
                    "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                  },
                  {
                    "name": "egress_channels",
                    "type": 429,
                    "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 428,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "relay_state_snapshot",
              "RelayDispatchQueueRemainingCapacity"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "remaining_count",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "remaining_size",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 429,
          "type": {
            "def": {
              "sequence": {
                "type": 430
              }
            }
          }
        },
        {
          "id": 430,
          "type": {
            "def": {
              "tuple": [
                174,
                431
              ]
            }
          }
        },
        {
          "id": 431,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "AbridgedHrmpChannel"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_capacity",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_total_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_message_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "msg_count",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "total_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "mqc_head",
                    "type": 421,
                    "typeName": "Option<Hash>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 432,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "AbridgedHostConfiguration"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_code_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_head_data_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_upward_queue_count",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_upward_queue_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_upward_message_size",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "max_upward_message_num_per_candidate",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "hrmp_max_message_num_per_candidate",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "validation_upgrade_cooldown",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "validation_upgrade_delay",
                    "type": 4,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "async_backing_params",
                    "type": 433,
                    "typeName": "AsyncBackingParams"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 433,
          "type": {
            "path": [
              "polkadot_primitives",
              "v8",
              "async_backing",
              "AsyncBackingParams"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max_candidate_depth",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "allowed_ancestry_len",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 434,
          "type": {
            "path": [
              "cumulus_primitives_parachain_inherent",
              "MessageQueueChain"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 13,
                    "typeName": "RelayHash"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 435,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 174
              },
              {
                "name": "V",
                "type": 434
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 436
                  }
                ]
              }
            }
          }
        },
        {
          "id": 436,
          "type": {
            "def": {
              "sequence": {
                "type": 437
              }
            }
          }
        },
        {
          "id": 437,
          "type": {
            "def": {
              "tuple": [
                174,
                434
              ]
            }
          }
        },
        {
          "id": 438,
          "type": {
            "def": {
              "sequence": {
                "type": 439
              }
            }
          }
        },
        {
          "id": 439,
          "type": {
            "path": [
              "polkadot_core_primitives",
              "OutboundHrmpMessage"
            ],
            "params": [
              {
                "name": "Id",
                "type": 174
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "recipient",
                    "type": 174,
                    "typeName": "Id"
                  },
                  {
                    "name": "data",
                    "type": 14,
                    "typeName": "alloc::vec::Vec<u8>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 440,
          "type": {
            "path": [
              "cumulus_pallet_parachain_system",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "OverlappingUpgrades",
                    "index": 0,
                    "docs": [
                      "Attempt to upgrade validation function while existing upgrade pending."
                    ]
                  },
                  {
                    "name": "ProhibitedByPolkadot",
                    "index": 1,
                    "docs": [
                      "Polkadot currently prohibits this parachain from upgrading its validation function."
                    ]
                  },
                  {
                    "name": "TooBig",
                    "index": 2,
                    "docs": [
                      "The supplied validation function has compiled into a blob larger than Polkadot is",
                      "willing to run."
                    ]
                  },
                  {
                    "name": "ValidationDataNotAvailable",
                    "index": 3,
                    "docs": [
                      "The inherent which supplies the validation data did not run this block."
                    ]
                  },
                  {
                    "name": "HostConfigurationNotAvailable",
                    "index": 4,
                    "docs": [
                      "The inherent which supplies the host configuration did not run this block."
                    ]
                  },
                  {
                    "name": "NotScheduled",
                    "index": 5,
                    "docs": [
                      "No validation function upgrade is currently scheduled."
                    ]
                  },
                  {
                    "name": "NothingAuthorized",
                    "index": 6,
                    "docs": [
                      "No code upgrade has been authorized."
                    ]
                  },
                  {
                    "name": "Unauthorized",
                    "index": 7,
                    "docs": [
                      "The given code upgrade has not been authorized."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 441,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "Releases"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1Ancient",
                    "index": 0
                  },
                  {
                    "name": "V2",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 442,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 443
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 445,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 443,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "BalanceLock"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 109,
                    "typeName": "LockIdentifier"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "reasons",
                    "type": 444,
                    "typeName": "Reasons"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 444,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "Reasons"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fee",
                    "index": 0
                  },
                  {
                    "name": "Misc",
                    "index": 1
                  },
                  {
                    "name": "All",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 445,
          "type": {
            "def": {
              "sequence": {
                "type": 443
              }
            }
          }
        },
        {
          "id": 446,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 447
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 448,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 447,
          "type": {
            "path": [
              "pallet_balances",
              "types",
              "ReserveData"
            ],
            "params": [
              {
                "name": "ReserveIdentifier",
                "type": 109
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 109,
                    "typeName": "ReserveIdentifier"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 448,
          "type": {
            "def": {
              "sequence": {
                "type": 447
              }
            }
          }
        },
        {
          "id": 449,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 450
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 453,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 450,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "misc",
              "IdAmount"
            ],
            "params": [
              {
                "name": "Id",
                "type": 451
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 451,
                    "typeName": "Id"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 451,
          "type": {
            "path": [
              "shiden_runtime",
              "RuntimeHoldReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Contracts",
                    "fields": [
                      {
                        "type": 452,
                        "typeName": "pallet_contracts::HoldReason"
                      }
                    ],
                    "index": 70
                  }
                ]
              }
            }
          }
        },
        {
          "id": 452,
          "type": {
            "path": [
              "pallet_contracts",
              "pallet",
              "HoldReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "CodeUploadDepositReserve",
                    "index": 0
                  },
                  {
                    "name": "StorageDepositReserve",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 453,
          "type": {
            "def": {
              "sequence": {
                "type": 450
              }
            }
          }
        },
        {
          "id": 454,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 455
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 458,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 455,
          "type": {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "misc",
              "IdAmount"
            ],
            "params": [
              {
                "name": "Id",
                "type": 456
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 456,
                    "typeName": "Id"
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 456,
          "type": {
            "path": [
              "shiden_runtime",
              "RuntimeFreezeReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "DappStaking",
                    "fields": [
                      {
                        "type": 457,
                        "typeName": "pallet_dapp_staking::FreezeReason"
                      }
                    ],
                    "index": 34
                  }
                ]
              }
            }
          }
        },
        {
          "id": 457,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "pallet",
              "FreezeReason"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "DAppStaking",
                    "index": 0
                  }
                ]
              }
            }
          }
        },
        {
          "id": 458,
          "type": {
            "def": {
              "sequence": {
                "type": 455
              }
            }
          }
        },
        {
          "id": 459,
          "type": {
            "path": [
              "pallet_balances",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "VestingBalance",
                    "index": 0,
                    "docs": [
                      "Vesting balance too high to send value."
                    ]
                  },
                  {
                    "name": "LiquidityRestrictions",
                    "index": 1,
                    "docs": [
                      "Account liquidity restrictions prevent withdrawal."
                    ]
                  },
                  {
                    "name": "InsufficientBalance",
                    "index": 2,
                    "docs": [
                      "Balance too low to send value."
                    ]
                  },
                  {
                    "name": "ExistentialDeposit",
                    "index": 3,
                    "docs": [
                      "Value too low to create account due to existential deposit."
                    ]
                  },
                  {
                    "name": "Expendability",
                    "index": 4,
                    "docs": [
                      "Transfer/payment would kill account."
                    ]
                  },
                  {
                    "name": "ExistingVestingSchedule",
                    "index": 5,
                    "docs": [
                      "A vesting schedule already exists for this account."
                    ]
                  },
                  {
                    "name": "DeadAccount",
                    "index": 6,
                    "docs": [
                      "Beneficiary account must pre-exist."
                    ]
                  },
                  {
                    "name": "TooManyReserves",
                    "index": 7,
                    "docs": [
                      "Number of named reserves exceed `MaxReserves`."
                    ]
                  },
                  {
                    "name": "TooManyHolds",
                    "index": 8,
                    "docs": [
                      "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
                    ]
                  },
                  {
                    "name": "TooManyFreezes",
                    "index": 9,
                    "docs": [
                      "Number of freezes exceed `MaxFreezes`."
                    ]
                  },
                  {
                    "name": "IssuanceDeactivated",
                    "index": 10,
                    "docs": [
                      "The issuance cannot be modified since it is already deactivated."
                    ]
                  },
                  {
                    "name": "DeltaZero",
                    "index": 11,
                    "docs": [
                      "The delta cannot be zero."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 460,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 286
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 461,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 461,
          "type": {
            "def": {
              "sequence": {
                "type": 286
              }
            }
          }
        },
        {
          "id": 462,
          "type": {
            "path": [
              "pallet_vesting",
              "Releases"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V0",
                    "index": 0
                  },
                  {
                    "name": "V1",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 463,
          "type": {
            "path": [
              "pallet_vesting",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotVesting",
                    "index": 0,
                    "docs": [
                      "The account given is not vesting."
                    ]
                  },
                  {
                    "name": "AtMaxVestingSchedules",
                    "index": 1,
                    "docs": [
                      "The account already has `MaxVestingSchedules` count of schedules and thus",
                      "cannot add another one. Consider merging existing schedules in order to add another."
                    ]
                  },
                  {
                    "name": "AmountLow",
                    "index": 2,
                    "docs": [
                      "Amount being transferred is too low to create a vesting schedule."
                    ]
                  },
                  {
                    "name": "ScheduleIndexOutOfBounds",
                    "index": 3,
                    "docs": [
                      "An index was out of bounds of the vesting schedules."
                    ]
                  },
                  {
                    "name": "InvalidScheduleParams",
                    "index": 4,
                    "docs": [
                      "Failed to create a new schedule because some parameter was invalid."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the vesting pallet."
            ]
          }
        },
        {
          "id": 464,
          "type": {
            "path": [
              "pallet_inflation",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidInflationParameters",
                    "index": 0,
                    "docs": [
                      "Sum of all parts must be one whole (100%)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 465,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "ProtocolState"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "era",
                    "type": 50,
                    "typeName": "EraNumber"
                  },
                  {
                    "name": "next_era_start",
                    "type": 50,
                    "typeName": "BlockNumber"
                  },
                  {
                    "name": "period_info",
                    "type": 466,
                    "typeName": "PeriodInfo"
                  },
                  {
                    "name": "maintenance",
                    "type": 8,
                    "typeName": "bool"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 466,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "PeriodInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "number",
                    "type": 50,
                    "typeName": "PeriodNumber"
                  },
                  {
                    "name": "subperiod",
                    "type": 55,
                    "typeName": "Subperiod"
                  },
                  {
                    "name": "next_subperiod_start_era",
                    "type": 50,
                    "typeName": "EraNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 467,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "DAppInfo"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "owner",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "id",
                    "type": 468,
                    "typeName": "DAppId"
                  },
                  {
                    "name": "reward_beneficiary",
                    "type": 59,
                    "typeName": "Option<AccountId>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 468,
          "type": {
            "def": {
              "compact": {
                "type": 41
              }
            }
          }
        },
        {
          "id": 469,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "AccountLedger"
            ],
            "params": [
              {
                "name": "UnlockingLen",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "locked",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "unlocking",
                    "type": 470,
                    "typeName": "BoundedVec<UnlockingChunk, UnlockingLen>"
                  },
                  {
                    "name": "staked",
                    "type": 473,
                    "typeName": "StakeAmount"
                  },
                  {
                    "name": "staked_future",
                    "type": 474,
                    "typeName": "Option<StakeAmount>"
                  },
                  {
                    "name": "contract_stake_count",
                    "type": 50,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 470,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 471
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 472,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 471,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "UnlockingChunk"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "amount",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "unlock_block",
                    "type": 50,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 472,
          "type": {
            "def": {
              "sequence": {
                "type": 471
              }
            }
          }
        },
        {
          "id": 473,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "StakeAmount"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "voting",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "build_and_earn",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "era",
                    "type": 50,
                    "typeName": "EraNumber"
                  },
                  {
                    "name": "period",
                    "type": 50,
                    "typeName": "PeriodNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 474,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 473
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 473
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 475,
          "type": {
            "def": {
              "tuple": [
                0,
                56
              ]
            }
          }
        },
        {
          "id": 476,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "SingularStakingInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "previous_staked",
                    "type": 473,
                    "typeName": "StakeAmount"
                  },
                  {
                    "name": "staked",
                    "type": 473,
                    "typeName": "StakeAmount"
                  },
                  {
                    "name": "bonus_status",
                    "type": 2,
                    "typeName": "BonusStatus"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 477,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "ContractStakeAmount"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "staked",
                    "type": 473,
                    "typeName": "StakeAmount"
                  },
                  {
                    "name": "staked_future",
                    "type": 474,
                    "typeName": "Option<StakeAmount>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 478,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "EraInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total_locked",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "unlocking",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "current_stake_amount",
                    "type": 473,
                    "typeName": "StakeAmount"
                  },
                  {
                    "name": "next_stake_amount",
                    "type": 473,
                    "typeName": "StakeAmount"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 479,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "EraRewardSpan"
            ],
            "params": [
              {
                "name": "SL",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "span",
                    "type": 480,
                    "typeName": "BoundedVec<EraReward, SL>"
                  },
                  {
                    "name": "first_era",
                    "type": 50,
                    "typeName": "EraNumber"
                  },
                  {
                    "name": "last_era",
                    "type": 50,
                    "typeName": "EraNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 480,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 481
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 482,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 481,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "EraReward"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "staker_reward_pool",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "staked",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "dapp_reward_pool",
                    "type": 51,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 482,
          "type": {
            "def": {
              "sequence": {
                "type": 481
              }
            }
          }
        },
        {
          "id": 483,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "PeriodEndInfo"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "bonus_reward_pool",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "total_vp_stake",
                    "type": 51,
                    "typeName": "Balance"
                  },
                  {
                    "name": "final_era",
                    "type": 50,
                    "typeName": "EraNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 484,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "TiersConfiguration"
            ],
            "params": [
              {
                "name": "NT",
                "type": null
              },
              {
                "name": "T",
                "type": null
              },
              {
                "name": "P",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "slots_per_tier",
                    "type": 485,
                    "typeName": "BoundedVec<u16, NT>"
                  },
                  {
                    "name": "reward_portion",
                    "type": 62,
                    "typeName": "BoundedVec<Permill, NT>"
                  },
                  {
                    "name": "tier_thresholds",
                    "type": 487,
                    "typeName": "BoundedVec<Balance, NT>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 485,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 41
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 486,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 486,
          "type": {
            "def": {
              "sequence": {
                "type": 41
              }
            }
          }
        },
        {
          "id": 487,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 488,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 488,
          "type": {
            "def": {
              "sequence": {
                "type": 6
              }
            }
          }
        },
        {
          "id": 489,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "DAppTierRewards"
            ],
            "params": [
              {
                "name": "MD",
                "type": null
              },
              {
                "name": "NT",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "dapps",
                    "type": 490,
                    "typeName": "BoundedBTreeMap<DAppId, RankedTier, MD>"
                  },
                  {
                    "name": "rewards",
                    "type": 487,
                    "typeName": "BoundedVec<Balance, NT>"
                  },
                  {
                    "name": "period",
                    "type": 50,
                    "typeName": "PeriodNumber"
                  },
                  {
                    "name": "rank_rewards",
                    "type": 487,
                    "typeName": "BoundedVec<Balance, NT>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 490,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_btree_map",
              "BoundedBTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 41
              },
              {
                "name": "V",
                "type": 491
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 492,
                    "typeName": "BTreeMap<K, V>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 491,
          "type": {
            "path": [
              "astar_primitives",
              "dapp_staking",
              "RankedTier"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 2,
                    "typeName": "u8"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 492,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 41
              },
              {
                "name": "V",
                "type": 491
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 493
                  }
                ]
              }
            }
          }
        },
        {
          "id": 493,
          "type": {
            "def": {
              "sequence": {
                "type": 494
              }
            }
          }
        },
        {
          "id": 494,
          "type": {
            "def": {
              "tuple": [
                41,
                491
              ]
            }
          }
        },
        {
          "id": 495,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "types",
              "CleanupMarker"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "era_reward_index",
                    "type": 50,
                    "typeName": "EraNumber"
                  },
                  {
                    "name": "dapp_tiers_index",
                    "type": 50,
                    "typeName": "EraNumber"
                  },
                  {
                    "name": "oldest_valid_era",
                    "type": 50,
                    "typeName": "EraNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 496,
          "type": {
            "path": [
              "pallet_dapp_staking",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Disabled",
                    "index": 0,
                    "docs": [
                      "Pallet is disabled/in maintenance mode."
                    ]
                  },
                  {
                    "name": "ContractAlreadyExists",
                    "index": 1,
                    "docs": [
                      "Smart contract already exists within dApp staking protocol."
                    ]
                  },
                  {
                    "name": "ExceededMaxNumberOfContracts",
                    "index": 2,
                    "docs": [
                      "Maximum number of smart contracts has been reached."
                    ]
                  },
                  {
                    "name": "NewDAppIdUnavailable",
                    "index": 3,
                    "docs": [
                      "Not possible to assign a new dApp Id.",
                      "This should never happen since current type can support up to 65536 - 1 unique dApps."
                    ]
                  },
                  {
                    "name": "ContractNotFound",
                    "index": 4,
                    "docs": [
                      "Specified smart contract does not exist in dApp staking."
                    ]
                  },
                  {
                    "name": "OriginNotOwner",
                    "index": 5,
                    "docs": [
                      "Call origin is not dApp owner."
                    ]
                  },
                  {
                    "name": "ZeroAmount",
                    "index": 6,
                    "docs": [
                      "Performing locking or staking with 0 amount."
                    ]
                  },
                  {
                    "name": "LockedAmountBelowThreshold",
                    "index": 7,
                    "docs": [
                      "Total locked amount for staker is below minimum threshold."
                    ]
                  },
                  {
                    "name": "AccountNotAvailableForDappStaking",
                    "index": 8,
                    "docs": [
                      "Account is not allowed to participate in dApp staking due to some external reason (e.g. account is already a collator)."
                    ]
                  },
                  {
                    "name": "TooManyUnlockingChunks",
                    "index": 9,
                    "docs": [
                      "Cannot add additional unlocking chunks due to capacity limit."
                    ]
                  },
                  {
                    "name": "RemainingStakePreventsFullUnlock",
                    "index": 10,
                    "docs": [
                      "Remaining stake prevents entire balance of starting the unlocking process."
                    ]
                  },
                  {
                    "name": "NoUnlockedChunksToClaim",
                    "index": 11,
                    "docs": [
                      "There are no eligible unlocked chunks to claim. This can happen either if no eligible chunks exist, or if user has no chunks at all."
                    ]
                  },
                  {
                    "name": "NoUnlockingChunks",
                    "index": 12,
                    "docs": [
                      "There are no unlocking chunks available to relock."
                    ]
                  },
                  {
                    "name": "UnavailableStakeFunds",
                    "index": 13,
                    "docs": [
                      "The amount being staked is too large compared to what's available for staking."
                    ]
                  },
                  {
                    "name": "UnclaimedRewards",
                    "index": 14,
                    "docs": [
                      "There are unclaimed rewards remaining from past eras or periods. They should be claimed before attempting any stake modification again."
                    ]
                  },
                  {
                    "name": "InternalStakeError",
                    "index": 15,
                    "docs": [
                      "An unexpected error occurred while trying to stake."
                    ]
                  },
                  {
                    "name": "InsufficientStakeAmount",
                    "index": 16,
                    "docs": [
                      "Total staked amount on contract is below the minimum required value."
                    ]
                  },
                  {
                    "name": "PeriodEndsInNextEra",
                    "index": 17,
                    "docs": [
                      "Stake operation is rejected since period ends in the next era."
                    ]
                  },
                  {
                    "name": "UnstakeFromPastPeriod",
                    "index": 18,
                    "docs": [
                      "Unstaking is rejected since the period in which past stake was active has passed."
                    ]
                  },
                  {
                    "name": "UnstakeAmountTooLarge",
                    "index": 19,
                    "docs": [
                      "Unstake amount is greater than the staked amount."
                    ]
                  },
                  {
                    "name": "NoStakingInfo",
                    "index": 20,
                    "docs": [
                      "Account has no staking information for the contract."
                    ]
                  },
                  {
                    "name": "InternalUnstakeError",
                    "index": 21,
                    "docs": [
                      "An unexpected error occurred while trying to unstake."
                    ]
                  },
                  {
                    "name": "RewardExpired",
                    "index": 22,
                    "docs": [
                      "Rewards are no longer claimable since they are too old."
                    ]
                  },
                  {
                    "name": "RewardPayoutFailed",
                    "index": 23,
                    "docs": [
                      "Reward payout has failed due to an unexpected reason."
                    ]
                  },
                  {
                    "name": "NoClaimableRewards",
                    "index": 24,
                    "docs": [
                      "There are no claimable rewards."
                    ]
                  },
                  {
                    "name": "InternalClaimStakerError",
                    "index": 25,
                    "docs": [
                      "An unexpected error occurred while trying to claim staker rewards."
                    ]
                  },
                  {
                    "name": "NotEligibleForBonusReward",
                    "index": 26,
                    "docs": [
                      "Account is has no eligible stake amount for bonus reward."
                    ]
                  },
                  {
                    "name": "InternalClaimBonusError",
                    "index": 27,
                    "docs": [
                      "An unexpected error occurred while trying to claim bonus reward."
                    ]
                  },
                  {
                    "name": "InvalidClaimEra",
                    "index": 28,
                    "docs": [
                      "Claim era is invalid - it must be in history, and rewards must exist for it."
                    ]
                  },
                  {
                    "name": "NoDAppTierInfo",
                    "index": 29,
                    "docs": [
                      "No dApp tier info exists for the specified era. This can be because era has expired",
                      "or because during the specified era there were no eligible rewards or protocol wasn't active."
                    ]
                  },
                  {
                    "name": "InternalClaimDAppError",
                    "index": 30,
                    "docs": [
                      "An unexpected error occurred while trying to claim dApp reward."
                    ]
                  },
                  {
                    "name": "ContractStillActive",
                    "index": 31,
                    "docs": [
                      "Contract is still active, not unregistered."
                    ]
                  },
                  {
                    "name": "TooManyStakedContracts",
                    "index": 32,
                    "docs": [
                      "There are too many contract stake entries for the account. This can be cleaned up by either unstaking or cleaning expired entries."
                    ]
                  },
                  {
                    "name": "NoExpiredEntries",
                    "index": 33,
                    "docs": [
                      "There are no expired entries to cleanup for the account."
                    ]
                  },
                  {
                    "name": "ForceNotAllowed",
                    "index": 34,
                    "docs": [
                      "Force call is not allowed in production."
                    ]
                  },
                  {
                    "name": "InvalidTierParams",
                    "index": 35,
                    "docs": [
                      "Invalid tier parameters were provided. This can happen if any number exceeds 100% or if number of elements does not match the number of tiers."
                    ]
                  },
                  {
                    "name": "SameContracts",
                    "index": 36,
                    "docs": [
                      "Same contract specified as source and destination."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 497,
          "type": {
            "path": [
              "pallet_assets",
              "types",
              "AssetDetails"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "DepositBalance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "owner",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "issuer",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "admin",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "freezer",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "supply",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance"
                  },
                  {
                    "name": "min_balance",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "is_sufficient",
                    "type": 8,
                    "typeName": "bool"
                  },
                  {
                    "name": "accounts",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "sufficients",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "approvals",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "status",
                    "type": 498,
                    "typeName": "AssetStatus"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 498,
          "type": {
            "path": [
              "pallet_assets",
              "types",
              "AssetStatus"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Live",
                    "index": 0
                  },
                  {
                    "name": "Frozen",
                    "index": 1
                  },
                  {
                    "name": "Destroying",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 499,
          "type": {
            "def": {
              "tuple": [
                6,
                0
              ]
            }
          }
        },
        {
          "id": 500,
          "type": {
            "path": [
              "pallet_assets",
              "types",
              "AssetAccount"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "DepositBalance",
                "type": 6
              },
              {
                "name": "Extra",
                "type": 34
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "balance",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "status",
                    "type": 501,
                    "typeName": "AccountStatus"
                  },
                  {
                    "name": "reason",
                    "type": 502,
                    "typeName": "ExistenceReason<DepositBalance, AccountId>"
                  },
                  {
                    "name": "extra",
                    "type": 34,
                    "typeName": "Extra"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 501,
          "type": {
            "path": [
              "pallet_assets",
              "types",
              "AccountStatus"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Liquid",
                    "index": 0
                  },
                  {
                    "name": "Frozen",
                    "index": 1
                  },
                  {
                    "name": "Blocked",
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 502,
          "type": {
            "path": [
              "pallet_assets",
              "types",
              "ExistenceReason"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Consumer",
                    "index": 0
                  },
                  {
                    "name": "Sufficient",
                    "index": 1
                  },
                  {
                    "name": "DepositHeld",
                    "fields": [
                      {
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "DepositRefunded",
                    "index": 3
                  },
                  {
                    "name": "DepositFrom",
                    "fields": [
                      {
                        "type": 0,
                        "typeName": "AccountId"
                      },
                      {
                        "type": 6,
                        "typeName": "Balance"
                      }
                    ],
                    "index": 4
                  }
                ]
              }
            }
          }
        },
        {
          "id": 503,
          "type": {
            "def": {
              "tuple": [
                6,
                0,
                0
              ]
            }
          }
        },
        {
          "id": 504,
          "type": {
            "path": [
              "pallet_assets",
              "types",
              "Approval"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "DepositBalance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 505,
          "type": {
            "path": [
              "pallet_assets",
              "types",
              "AssetMetadata"
            ],
            "params": [
              {
                "name": "DepositBalance",
                "type": 6
              },
              {
                "name": "BoundedString",
                "type": 506
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance"
                  },
                  {
                    "name": "name",
                    "type": 506,
                    "typeName": "BoundedString"
                  },
                  {
                    "name": "symbol",
                    "type": 506,
                    "typeName": "BoundedString"
                  },
                  {
                    "name": "decimals",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "is_frozen",
                    "type": 8,
                    "typeName": "bool"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 506,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 507,
          "type": {
            "path": [
              "pallet_assets",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BalanceLow",
                    "index": 0,
                    "docs": [
                      "Account balance must be greater than or equal to the transfer amount."
                    ]
                  },
                  {
                    "name": "NoAccount",
                    "index": 1,
                    "docs": [
                      "The account to alter does not exist."
                    ]
                  },
                  {
                    "name": "NoPermission",
                    "index": 2,
                    "docs": [
                      "The signing account has no permission to do the operation."
                    ]
                  },
                  {
                    "name": "Unknown",
                    "index": 3,
                    "docs": [
                      "The given asset ID is unknown."
                    ]
                  },
                  {
                    "name": "Frozen",
                    "index": 4,
                    "docs": [
                      "The origin account is frozen."
                    ]
                  },
                  {
                    "name": "InUse",
                    "index": 5,
                    "docs": [
                      "The asset ID is already taken."
                    ]
                  },
                  {
                    "name": "BadWitness",
                    "index": 6,
                    "docs": [
                      "Invalid witness data given."
                    ]
                  },
                  {
                    "name": "MinBalanceZero",
                    "index": 7,
                    "docs": [
                      "Minimum balance should be non-zero."
                    ]
                  },
                  {
                    "name": "UnavailableConsumer",
                    "index": 8,
                    "docs": [
                      "Unable to increment the consumer reference counters on the account. Either no provider",
                      "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                      "fewer then the maximum number of consumers has been reached."
                    ]
                  },
                  {
                    "name": "BadMetadata",
                    "index": 9,
                    "docs": [
                      "Invalid metadata given."
                    ]
                  },
                  {
                    "name": "Unapproved",
                    "index": 10,
                    "docs": [
                      "No approval exists that would allow the transfer."
                    ]
                  },
                  {
                    "name": "WouldDie",
                    "index": 11,
                    "docs": [
                      "The source account would not survive the transfer and it needs to stay alive."
                    ]
                  },
                  {
                    "name": "AlreadyExists",
                    "index": 12,
                    "docs": [
                      "The asset-account already exists."
                    ]
                  },
                  {
                    "name": "NoDeposit",
                    "index": 13,
                    "docs": [
                      "The asset-account doesn't have an associated deposit."
                    ]
                  },
                  {
                    "name": "WouldBurn",
                    "index": 14,
                    "docs": [
                      "The operation would result in funds being burned."
                    ]
                  },
                  {
                    "name": "LiveAsset",
                    "index": 15,
                    "docs": [
                      "The asset is a live asset and is actively being used. Usually emit for operations such",
                      "as `start_destroy` which require the asset to be in a destroying state."
                    ]
                  },
                  {
                    "name": "AssetNotLive",
                    "index": 16,
                    "docs": [
                      "The asset is not live, and likely being destroyed."
                    ]
                  },
                  {
                    "name": "IncorrectStatus",
                    "index": 17,
                    "docs": [
                      "The asset status is not the expected status."
                    ]
                  },
                  {
                    "name": "NotFrozen",
                    "index": 18,
                    "docs": [
                      "The asset should be frozen before the given operation."
                    ]
                  },
                  {
                    "name": "CallbackFailed",
                    "index": 19,
                    "docs": [
                      "Callback action resulted in error"
                    ]
                  },
                  {
                    "name": "BadAssetId",
                    "index": 20,
                    "docs": [
                      "The asset ID must be equal to the [`NextAssetId`]."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 508,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 72
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 509,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 509,
          "type": {
            "def": {
              "sequence": {
                "type": 72
              }
            }
          }
        },
        {
          "id": 510,
          "type": {
            "path": [
              "pallet_price_aggregator",
              "ValueAggregator"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total",
                    "type": 511,
                    "typeName": "CurrencyAmount"
                  },
                  {
                    "name": "count",
                    "type": 50,
                    "typeName": "u32"
                  },
                  {
                    "name": "limit_block",
                    "type": 50,
                    "typeName": "BlockNumber"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 511,
          "type": {
            "def": {
              "compact": {
                "type": 72
              }
            }
          }
        },
        {
          "id": 512,
          "type": {
            "path": [
              "pallet_price_aggregator",
              "CircularBuffer"
            ],
            "params": [
              {
                "name": "L",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "buffer",
                    "type": 513,
                    "typeName": "BoundedVec<CurrencyAmount, L>"
                  },
                  {
                    "name": "head",
                    "type": 50,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 513,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 72
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 509,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 514,
          "type": {
            "def": {
              "tuple": [
                0,
                76
              ]
            }
          }
        },
        {
          "id": 515,
          "type": {
            "path": [
              "orml_oracle",
              "module",
              "TimestampedValue"
            ],
            "params": [
              {
                "name": "Value",
                "type": 72
              },
              {
                "name": "Moment",
                "type": 12
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "value",
                    "type": 72,
                    "typeName": "Value"
                  },
                  {
                    "name": "timestamp",
                    "type": 12,
                    "typeName": "Moment"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 516,
          "type": {
            "path": [
              "orml_utilities",
              "ordered_set",
              "OrderedSet"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 517,
                    "typeName": "BoundedVec<T, S>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 517,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 79,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 518,
          "type": {
            "path": [
              "orml_oracle",
              "module",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NoPermission",
                    "index": 0,
                    "docs": [
                      "Sender does not have permission"
                    ]
                  },
                  {
                    "name": "AlreadyFeeded",
                    "index": 1,
                    "docs": [
                      "Feeder has already feeded at this block"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 519,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 79,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 520,
          "type": {
            "path": [
              "pallet_membership",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AlreadyMember",
                    "index": 0,
                    "docs": [
                      "Already a member."
                    ]
                  },
                  {
                    "name": "NotMember",
                    "index": 1,
                    "docs": [
                      "Not a member."
                    ]
                  },
                  {
                    "name": "TooManyMembers",
                    "index": 2,
                    "docs": [
                      "Too many members."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 521,
          "type": {
            "def": {
              "sequence": {
                "type": 522
              }
            }
          }
        },
        {
          "id": 522,
          "type": {
            "path": [
              "pallet_collator_selection",
              "pallet",
              "CandidateInfo"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId"
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 523,
          "type": {
            "def": {
              "tuple": [
                4,
                6
              ]
            }
          }
        },
        {
          "id": 524,
          "type": {
            "path": [
              "pallet_collator_selection",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "TooManyCandidates",
                    "index": 0,
                    "docs": [
                      "Too many candidates"
                    ]
                  },
                  {
                    "name": "TooFewCandidates",
                    "index": 1,
                    "docs": [
                      "Too few candidates"
                    ]
                  },
                  {
                    "name": "Unknown",
                    "index": 2,
                    "docs": [
                      "Unknown error"
                    ]
                  },
                  {
                    "name": "Permission",
                    "index": 3,
                    "docs": [
                      "Permission issue"
                    ]
                  },
                  {
                    "name": "AlreadyCandidate",
                    "index": 4,
                    "docs": [
                      "User is already a candidate"
                    ]
                  },
                  {
                    "name": "NotCandidate",
                    "index": 5,
                    "docs": [
                      "User is not a candidate"
                    ]
                  },
                  {
                    "name": "AlreadyInvulnerable",
                    "index": 6,
                    "docs": [
                      "User is already an Invulnerable"
                    ]
                  },
                  {
                    "name": "NoAssociatedValidatorId",
                    "index": 7,
                    "docs": [
                      "Account has no associated validator ID"
                    ]
                  },
                  {
                    "name": "ValidatorNotRegistered",
                    "index": 8,
                    "docs": [
                      "Validator ID is not yet registered"
                    ]
                  },
                  {
                    "name": "NotAllowedCandidate",
                    "index": 9,
                    "docs": [
                      "Account is now allowed to be a candidate due to an external reason (e.g. it might be participating in dApp staking)"
                    ]
                  },
                  {
                    "name": "BondStillLocked",
                    "index": 10,
                    "docs": [
                      "The candidacy bond is currently in the un-bonding period."
                    ]
                  },
                  {
                    "name": "NoCandidacyBond",
                    "index": 11,
                    "docs": [
                      "No candidacy bond available for withdrawal."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 525,
          "type": {
            "def": {
              "sequence": {
                "type": 526
              }
            }
          }
        },
        {
          "id": 526,
          "type": {
            "def": {
              "tuple": [
                0,
                296
              ]
            }
          }
        },
        {
          "id": 527,
          "type": {
            "def": {
              "sequence": {
                "type": 4
              }
            }
          }
        },
        {
          "id": 528,
          "type": {
            "def": {
              "tuple": [
                529,
                14
              ]
            }
          }
        },
        {
          "id": 529,
          "type": {
            "path": [
              "sp_core",
              "crypto",
              "KeyTypeId"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 18,
                    "typeName": "[u8; 4]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 530,
          "type": {
            "path": [
              "pallet_session",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidProof",
                    "index": 0,
                    "docs": [
                      "Invalid ownership proof."
                    ]
                  },
                  {
                    "name": "NoAssociatedValidatorId",
                    "index": 1,
                    "docs": [
                      "No associated validator ID for account."
                    ]
                  },
                  {
                    "name": "DuplicatedKey",
                    "index": 2,
                    "docs": [
                      "Registered duplicate key."
                    ]
                  },
                  {
                    "name": "NoKeys",
                    "index": 3,
                    "docs": [
                      "No keys are associated with this account."
                    ]
                  },
                  {
                    "name": "NoAccount",
                    "index": 4,
                    "docs": [
                      "Key setting account is not live, so it's impossible to associate keys."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the session pallet."
            ]
          }
        },
        {
          "id": 531,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 297
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 532,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 532,
          "type": {
            "def": {
              "sequence": {
                "type": 297
              }
            }
          }
        },
        {
          "id": 533,
          "type": {
            "path": [
              "sp_consensus_slots",
              "Slot"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 534,
          "type": {
            "def": {
              "tuple": [
                533,
                4
              ]
            }
          }
        },
        {
          "id": 535,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_btree_set",
              "BoundedBTreeSet"
            ],
            "params": [
              {
                "name": "T",
                "type": 174
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 536,
                    "typeName": "BTreeSet<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 536,
          "type": {
            "path": [
              "BTreeSet"
            ],
            "params": [
              {
                "name": "T",
                "type": 174
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 537
                  }
                ]
              }
            }
          }
        },
        {
          "id": 537,
          "type": {
            "def": {
              "sequence": {
                "type": 174
              }
            }
          }
        },
        {
          "id": 538,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 539
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 541,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 539,
          "type": {
            "path": [
              "cumulus_pallet_xcmp_queue",
              "OutboundChannelDetails"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "recipient",
                    "type": 174,
                    "typeName": "ParaId"
                  },
                  {
                    "name": "state",
                    "type": 540,
                    "typeName": "OutboundState"
                  },
                  {
                    "name": "signals_exist",
                    "type": 8,
                    "typeName": "bool"
                  },
                  {
                    "name": "first_index",
                    "type": 41,
                    "typeName": "u16"
                  },
                  {
                    "name": "last_index",
                    "type": 41,
                    "typeName": "u16"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 540,
          "type": {
            "path": [
              "cumulus_pallet_xcmp_queue",
              "OutboundState"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ok",
                    "index": 0
                  },
                  {
                    "name": "Suspended",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 541,
          "type": {
            "def": {
              "sequence": {
                "type": 539
              }
            }
          }
        },
        {
          "id": 542,
          "type": {
            "def": {
              "tuple": [
                174,
                41
              ]
            }
          }
        },
        {
          "id": 543,
          "type": {
            "path": [
              "bounded_collections",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 544,
          "type": {
            "path": [
              "cumulus_pallet_xcmp_queue",
              "QueueConfigData"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "suspend_threshold",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "drop_threshold",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "resume_threshold",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 545,
          "type": {
            "path": [
              "cumulus_pallet_xcmp_queue",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BadQueueConfig",
                    "index": 0,
                    "docs": [
                      "Setting the queue config failed since one of its values was invalid."
                    ]
                  },
                  {
                    "name": "AlreadySuspended",
                    "index": 1,
                    "docs": [
                      "The execution is already suspended."
                    ]
                  },
                  {
                    "name": "AlreadyResumed",
                    "index": 2,
                    "docs": [
                      "The execution is already resumed."
                    ]
                  },
                  {
                    "name": "TooManyActiveOutboundChannels",
                    "index": 3,
                    "docs": [
                      "There are too many active outbound channels."
                    ]
                  },
                  {
                    "name": "TooBig",
                    "index": 4,
                    "docs": [
                      "The message is too big."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 546,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "QueryStatus"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Pending",
                    "fields": [
                      {
                        "name": "responder",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "maybe_match_querier",
                        "type": 547,
                        "typeName": "Option<VersionedLocation>"
                      },
                      {
                        "name": "maybe_notify",
                        "type": 548,
                        "typeName": "Option<(u8, u8)>"
                      },
                      {
                        "name": "timeout",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "VersionNotifier",
                    "fields": [
                      {
                        "name": "origin",
                        "type": 168,
                        "typeName": "VersionedLocation"
                      },
                      {
                        "name": "is_active",
                        "type": 8,
                        "typeName": "bool"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Ready",
                    "fields": [
                      {
                        "name": "response",
                        "type": 550,
                        "typeName": "VersionedResponse"
                      },
                      {
                        "name": "at",
                        "type": 4,
                        "typeName": "BlockNumber"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 547,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 168
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 168
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 548,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 549
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 549
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 549,
          "type": {
            "def": {
              "tuple": [
                2,
                2
              ]
            }
          }
        },
        {
          "id": 550,
          "type": {
            "path": [
              "xcm",
              "VersionedResponse"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V3",
                    "fields": [
                      {
                        "type": 304,
                        "typeName": "v3::Response"
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "V4",
                    "fields": [
                      {
                        "type": 320,
                        "typeName": "v4::Response"
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "V5",
                    "fields": [
                      {
                        "type": 111,
                        "typeName": "v5::Response"
                      }
                    ],
                    "index": 5
                  }
                ]
              }
            }
          }
        },
        {
          "id": 551,
          "type": {
            "def": {
              "tuple": [
                4,
                168
              ]
            }
          }
        },
        {
          "id": 552,
          "type": {
            "def": {
              "tuple": [
                12,
                10,
                4
              ]
            }
          }
        },
        {
          "id": 553,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 554
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 555,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 554,
          "type": {
            "def": {
              "tuple": [
                168,
                4
              ]
            }
          }
        },
        {
          "id": 555,
          "type": {
            "def": {
              "sequence": {
                "type": 554
              }
            }
          }
        },
        {
          "id": 556,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "VersionMigrationStage"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MigrateSupportedVersion",
                    "index": 0
                  },
                  {
                    "name": "MigrateVersionNotifiers",
                    "index": 1
                  },
                  {
                    "name": "NotifyCurrentTargets",
                    "fields": [
                      {
                        "type": 196,
                        "typeName": "Option<Vec<u8>>"
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "MigrateAndNotifyOldTargets",
                    "index": 3
                  }
                ]
              }
            }
          }
        },
        {
          "id": 557,
          "type": {
            "def": {
              "tuple": [
                4,
                0,
                343
              ]
            }
          }
        },
        {
          "id": 558,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "RemoteLockedFungibleRecord"
            ],
            "params": [
              {
                "name": "ConsumerIdentifier",
                "type": 34
              },
              {
                "name": "MaxConsumers",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "u128"
                  },
                  {
                    "name": "owner",
                    "type": 168,
                    "typeName": "VersionedLocation"
                  },
                  {
                    "name": "locker",
                    "type": 168,
                    "typeName": "VersionedLocation"
                  },
                  {
                    "name": "consumers",
                    "type": 559,
                    "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 559,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 560
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 561,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 560,
          "type": {
            "def": {
              "tuple": [
                34,
                6
              ]
            }
          }
        },
        {
          "id": 561,
          "type": {
            "def": {
              "sequence": {
                "type": 560
              }
            }
          }
        },
        {
          "id": 562,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 563
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 564,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 563,
          "type": {
            "def": {
              "tuple": [
                6,
                168
              ]
            }
          }
        },
        {
          "id": 564,
          "type": {
            "def": {
              "sequence": {
                "type": 563
              }
            }
          }
        },
        {
          "id": 565,
          "type": {
            "path": [
              "pallet_xcm",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unreachable",
                    "index": 0,
                    "docs": [
                      "The desired destination was unreachable, generally because there is a no way of routing",
                      "to it."
                    ]
                  },
                  {
                    "name": "SendFailure",
                    "index": 1,
                    "docs": [
                      "There was some other issue (i.e. not to do with routing) in sending the message.",
                      "Perhaps a lack of space for buffering the message."
                    ]
                  },
                  {
                    "name": "Filtered",
                    "index": 2,
                    "docs": [
                      "The message execution fails the filter."
                    ]
                  },
                  {
                    "name": "UnweighableMessage",
                    "index": 3,
                    "docs": [
                      "The message's weight could not be determined."
                    ]
                  },
                  {
                    "name": "DestinationNotInvertible",
                    "index": 4,
                    "docs": [
                      "The destination `Location` provided cannot be inverted."
                    ]
                  },
                  {
                    "name": "Empty",
                    "index": 5,
                    "docs": [
                      "The assets to be sent are empty."
                    ]
                  },
                  {
                    "name": "CannotReanchor",
                    "index": 6,
                    "docs": [
                      "Could not re-anchor the assets to declare the fees for the destination chain."
                    ]
                  },
                  {
                    "name": "TooManyAssets",
                    "index": 7,
                    "docs": [
                      "Too many assets have been attempted for transfer."
                    ]
                  },
                  {
                    "name": "InvalidOrigin",
                    "index": 8,
                    "docs": [
                      "Origin is invalid for sending."
                    ]
                  },
                  {
                    "name": "BadVersion",
                    "index": 9,
                    "docs": [
                      "The version of the `Versioned` value used is not able to be interpreted."
                    ]
                  },
                  {
                    "name": "BadLocation",
                    "index": 10,
                    "docs": [
                      "The given location could not be used (e.g. because it cannot be expressed in the",
                      "desired version of XCM)."
                    ]
                  },
                  {
                    "name": "NoSubscription",
                    "index": 11,
                    "docs": [
                      "The referenced subscription could not be found."
                    ]
                  },
                  {
                    "name": "AlreadySubscribed",
                    "index": 12,
                    "docs": [
                      "The location is invalid since it already has a subscription from us."
                    ]
                  },
                  {
                    "name": "CannotCheckOutTeleport",
                    "index": 13,
                    "docs": [
                      "Could not check-out the assets for teleportation to the destination chain."
                    ]
                  },
                  {
                    "name": "LowBalance",
                    "index": 14,
                    "docs": [
                      "The owner does not own (all) of the asset that they wish to do the operation on."
                    ]
                  },
                  {
                    "name": "TooManyLocks",
                    "index": 15,
                    "docs": [
                      "The asset owner has too many locks on the asset."
                    ]
                  },
                  {
                    "name": "AccountNotSovereign",
                    "index": 16,
                    "docs": [
                      "The given account is not an identifiable sovereign account for any location."
                    ]
                  },
                  {
                    "name": "FeesNotMet",
                    "index": 17,
                    "docs": [
                      "The operation required fees to be paid which the initiator could not meet."
                    ]
                  },
                  {
                    "name": "LockNotFound",
                    "index": 18,
                    "docs": [
                      "A remote lock with the corresponding data could not be found."
                    ]
                  },
                  {
                    "name": "InUse",
                    "index": 19,
                    "docs": [
                      "The unlock operation cannot succeed because there are still consumers of the lock."
                    ]
                  },
                  {
                    "name": "InvalidAssetUnknownReserve",
                    "index": 21,
                    "docs": [
                      "Invalid asset, reserve chain could not be determined for it."
                    ]
                  },
                  {
                    "name": "InvalidAssetUnsupportedReserve",
                    "index": 22,
                    "docs": [
                      "Invalid asset, do not support remote asset reserves with different fees reserves."
                    ]
                  },
                  {
                    "name": "TooManyReserves",
                    "index": 23,
                    "docs": [
                      "Too many assets with different reserve locations have been attempted for transfer."
                    ]
                  },
                  {
                    "name": "LocalExecutionIncomplete",
                    "index": 24,
                    "docs": [
                      "Local XCM execution incomplete."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 566,
          "type": {
            "path": [
              "pallet_xc_asset_config",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AssetAlreadyRegistered",
                    "index": 0,
                    "docs": [
                      "Asset is already registered."
                    ]
                  },
                  {
                    "name": "AssetDoesNotExist",
                    "index": 1,
                    "docs": [
                      "Asset does not exist (hasn't been registered)."
                    ]
                  },
                  {
                    "name": "MultiLocationNotSupported",
                    "index": 2,
                    "docs": [
                      "Failed to convert to latest versioned Location"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 567,
          "type": {
            "path": [
              "orml_xtokens",
              "module",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "AssetHasNoReserve",
                    "index": 0,
                    "docs": [
                      "Asset has no reserve location."
                    ]
                  },
                  {
                    "name": "NotCrossChainTransfer",
                    "index": 1,
                    "docs": [
                      "Not cross-chain transfer."
                    ]
                  },
                  {
                    "name": "InvalidDest",
                    "index": 2,
                    "docs": [
                      "Invalid transfer destination."
                    ]
                  },
                  {
                    "name": "NotCrossChainTransferableCurrency",
                    "index": 3,
                    "docs": [
                      "Currency is not cross-chain transferable."
                    ]
                  },
                  {
                    "name": "UnweighableMessage",
                    "index": 4,
                    "docs": [
                      "The message's weight could not be determined."
                    ]
                  },
                  {
                    "name": "XcmExecutionFailed",
                    "index": 5,
                    "docs": [
                      "XCM execution failed."
                    ]
                  },
                  {
                    "name": "CannotReanchor",
                    "index": 6,
                    "docs": [
                      "Could not re-anchor the assets to declare the fees for the",
                      "destination chain."
                    ]
                  },
                  {
                    "name": "InvalidAncestry",
                    "index": 7,
                    "docs": [
                      "Could not get ancestry of asset reserve location."
                    ]
                  },
                  {
                    "name": "InvalidAsset",
                    "index": 8,
                    "docs": [
                      "The Asset is invalid."
                    ]
                  },
                  {
                    "name": "DestinationNotInvertible",
                    "index": 9,
                    "docs": [
                      "The destination `Location` provided cannot be inverted."
                    ]
                  },
                  {
                    "name": "BadVersion",
                    "index": 10,
                    "docs": [
                      "The version of the `Versioned` value used is not able to be",
                      "interpreted."
                    ]
                  },
                  {
                    "name": "DistinctReserveForAssetAndFee",
                    "index": 11,
                    "docs": [
                      "We tried sending distinct asset and fee but they have different",
                      "reserve chains."
                    ]
                  },
                  {
                    "name": "ZeroFee",
                    "index": 12,
                    "docs": [
                      "The fee is zero."
                    ]
                  },
                  {
                    "name": "ZeroAmount",
                    "index": 13,
                    "docs": [
                      "The transfering asset amount is zero."
                    ]
                  },
                  {
                    "name": "TooManyAssetsBeingSent",
                    "index": 14,
                    "docs": [
                      "The number of assets to be sent is over the maximum."
                    ]
                  },
                  {
                    "name": "AssetIndexNonExistent",
                    "index": 15,
                    "docs": [
                      "The specified index does not exist in a Assets struct."
                    ]
                  },
                  {
                    "name": "FeeNotEnough",
                    "index": 16,
                    "docs": [
                      "Fee is not enough."
                    ]
                  },
                  {
                    "name": "NotSupportedLocation",
                    "index": 17,
                    "docs": [
                      "Not supported Location"
                    ]
                  },
                  {
                    "name": "MinXcmFeeNotDefined",
                    "index": 18,
                    "docs": [
                      "MinXcmFee not registered for certain reserve location"
                    ]
                  },
                  {
                    "name": "RateLimited",
                    "index": 19,
                    "docs": [
                      "Asset transfer is limited by RateLimiter."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 568,
          "type": {
            "path": [
              "pallet_message_queue",
              "BookState"
            ],
            "params": [
              {
                "name": "MessageOrigin",
                "type": 173
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "begin",
                    "type": 4,
                    "typeName": "PageIndex"
                  },
                  {
                    "name": "end",
                    "type": 4,
                    "typeName": "PageIndex"
                  },
                  {
                    "name": "count",
                    "type": 4,
                    "typeName": "PageIndex"
                  },
                  {
                    "name": "ready_neighbours",
                    "type": 569,
                    "typeName": "Option<Neighbours<MessageOrigin>>"
                  },
                  {
                    "name": "message_count",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "size",
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 569,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 570
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 570
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 570,
          "type": {
            "path": [
              "pallet_message_queue",
              "Neighbours"
            ],
            "params": [
              {
                "name": "MessageOrigin",
                "type": 173
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "prev",
                    "type": 173,
                    "typeName": "MessageOrigin"
                  },
                  {
                    "name": "next",
                    "type": 173,
                    "typeName": "MessageOrigin"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 571,
          "type": {
            "def": {
              "tuple": [
                173,
                4
              ]
            }
          }
        },
        {
          "id": 572,
          "type": {
            "path": [
              "pallet_message_queue",
              "Page"
            ],
            "params": [
              {
                "name": "Size",
                "type": 4
              },
              {
                "name": "HeapSize",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "remaining",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "remaining_size",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "first_index",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "first",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "last",
                    "type": 4,
                    "typeName": "Size"
                  },
                  {
                    "name": "heap",
                    "type": 573,
                    "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 573,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 574,
          "type": {
            "path": [
              "pallet_message_queue",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotReapable",
                    "index": 0,
                    "docs": [
                      "Page is not reapable because it has items remaining to be processed and is not old",
                      "enough."
                    ]
                  },
                  {
                    "name": "NoPage",
                    "index": 1,
                    "docs": [
                      "Page to be reaped does not exist."
                    ]
                  },
                  {
                    "name": "NoMessage",
                    "index": 2,
                    "docs": [
                      "The referenced message could not be found."
                    ]
                  },
                  {
                    "name": "AlreadyProcessed",
                    "index": 3,
                    "docs": [
                      "The message was already processed and cannot be processed again."
                    ]
                  },
                  {
                    "name": "Queued",
                    "index": 4,
                    "docs": [
                      "The message is queued for future execution."
                    ]
                  },
                  {
                    "name": "InsufficientWeight",
                    "index": 5,
                    "docs": [
                      "There is temporarily not enough weight to continue servicing messages."
                    ]
                  },
                  {
                    "name": "TemporarilyUnprocessable",
                    "index": 6,
                    "docs": [
                      "This message is temporarily unprocessable.",
                      "",
                      "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                      "retrying."
                    ]
                  },
                  {
                    "name": "QueuePaused",
                    "index": 7,
                    "docs": [
                      "The queue is paused and no message can be executed from it.",
                      "",
                      "This can change at any time and may resolve in the future by re-trying."
                    ]
                  },
                  {
                    "name": "RecursiveDisallowed",
                    "index": 8,
                    "docs": [
                      "Another call is in progress and needs to finish before this call can happen."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 575,
          "type": {
            "path": [
              "pallet_evm",
              "CodeMetadata"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "size",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "hash",
                    "type": 13,
                    "typeName": "H256"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 576,
          "type": {
            "def": {
              "tuple": [
                57,
                13
              ]
            }
          }
        },
        {
          "id": 577,
          "type": {
            "path": [
              "pallet_evm",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BalanceLow",
                    "index": 0,
                    "docs": [
                      "Not enough balance to perform action"
                    ]
                  },
                  {
                    "name": "FeeOverflow",
                    "index": 1,
                    "docs": [
                      "Calculating total fee overflowed"
                    ]
                  },
                  {
                    "name": "PaymentOverflow",
                    "index": 2,
                    "docs": [
                      "Calculating total payment overflowed"
                    ]
                  },
                  {
                    "name": "WithdrawFailed",
                    "index": 3,
                    "docs": [
                      "Withdraw fee failed"
                    ]
                  },
                  {
                    "name": "GasPriceTooLow",
                    "index": 4,
                    "docs": [
                      "Gas price is too low."
                    ]
                  },
                  {
                    "name": "InvalidNonce",
                    "index": 5,
                    "docs": [
                      "Nonce is invalid"
                    ]
                  },
                  {
                    "name": "GasLimitTooLow",
                    "index": 6,
                    "docs": [
                      "Gas limit is too low."
                    ]
                  },
                  {
                    "name": "GasLimitTooHigh",
                    "index": 7,
                    "docs": [
                      "Gas limit is too high."
                    ]
                  },
                  {
                    "name": "InvalidChainId",
                    "index": 8,
                    "docs": [
                      "The chain id is invalid."
                    ]
                  },
                  {
                    "name": "InvalidSignature",
                    "index": 9,
                    "docs": [
                      "the signature is invalid."
                    ]
                  },
                  {
                    "name": "Reentrancy",
                    "index": 10,
                    "docs": [
                      "EVM reentrancy"
                    ]
                  },
                  {
                    "name": "TransactionMustComeFromEOA",
                    "index": 11,
                    "docs": [
                      "EIP-3607,"
                    ]
                  },
                  {
                    "name": "Undefined",
                    "index": 12,
                    "docs": [
                      "Undefined error."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 578,
          "type": {
            "def": {
              "tuple": [
                356,
                579,
                584
              ]
            }
          }
        },
        {
          "id": 579,
          "type": {
            "path": [
              "fp_rpc",
              "TransactionStatus"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "transaction_hash",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "transaction_index",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "from",
                    "type": 57,
                    "typeName": "Address"
                  },
                  {
                    "name": "to",
                    "type": 580,
                    "typeName": "Option<Address>"
                  },
                  {
                    "name": "contract_address",
                    "type": 580,
                    "typeName": "Option<Address>"
                  },
                  {
                    "name": "logs",
                    "type": 581,
                    "typeName": "Vec<Log>"
                  },
                  {
                    "name": "logs_bloom",
                    "type": 582,
                    "typeName": "Bloom"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 580,
          "type": {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 57
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "index": 0
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "type": 57
                      }
                    ],
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 581,
          "type": {
            "def": {
              "sequence": {
                "type": 177
              }
            }
          }
        },
        {
          "id": 582,
          "type": {
            "path": [
              "ethbloom",
              "Bloom"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 583,
                    "typeName": "[u8; BLOOM_SIZE]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 583,
          "type": {
            "def": {
              "array": {
                "len": 256,
                "type": 2
              }
            }
          }
        },
        {
          "id": 584,
          "type": {
            "path": [
              "ethereum",
              "receipt",
              "ReceiptV3"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Legacy",
                    "fields": [
                      {
                        "type": 585,
                        "typeName": "EIP658ReceiptData"
                      }
                    ],
                    "index": 0
                  },
                  {
                    "name": "EIP2930",
                    "fields": [
                      {
                        "type": 585,
                        "typeName": "EIP2930ReceiptData"
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "EIP1559",
                    "fields": [
                      {
                        "type": 585,
                        "typeName": "EIP1559ReceiptData"
                      }
                    ],
                    "index": 2
                  }
                ]
              }
            }
          }
        },
        {
          "id": 585,
          "type": {
            "path": [
              "ethereum",
              "receipt",
              "EIP658ReceiptData"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "status_code",
                    "type": 2,
                    "typeName": "u8"
                  },
                  {
                    "name": "used_gas",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "logs_bloom",
                    "type": 582,
                    "typeName": "Bloom"
                  },
                  {
                    "name": "logs",
                    "type": 581,
                    "typeName": "Vec<Log>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 586,
          "type": {
            "path": [
              "ethereum",
              "block",
              "Block"
            ],
            "params": [
              {
                "name": "T",
                "type": 356
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "header",
                    "type": 587,
                    "typeName": "Header"
                  },
                  {
                    "name": "transactions",
                    "type": 589,
                    "typeName": "Vec<T>"
                  },
                  {
                    "name": "ommers",
                    "type": 590,
                    "typeName": "Vec<Header>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 587,
          "type": {
            "path": [
              "ethereum",
              "header",
              "Header"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parent_hash",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "ommers_hash",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "beneficiary",
                    "type": 57,
                    "typeName": "H160"
                  },
                  {
                    "name": "state_root",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "transactions_root",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "receipts_root",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "logs_bloom",
                    "type": 582,
                    "typeName": "Bloom"
                  },
                  {
                    "name": "difficulty",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "number",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "gas_limit",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "gas_used",
                    "type": 189,
                    "typeName": "U256"
                  },
                  {
                    "name": "timestamp",
                    "type": 12,
                    "typeName": "u64"
                  },
                  {
                    "name": "extra_data",
                    "type": 14,
                    "typeName": "Bytes"
                  },
                  {
                    "name": "mix_hash",
                    "type": 13,
                    "typeName": "H256"
                  },
                  {
                    "name": "nonce",
                    "type": 588,
                    "typeName": "H64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 588,
          "type": {
            "path": [
              "ethereum_types",
              "hash",
              "H64"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 109,
                    "typeName": "[u8; 8]"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 589,
          "type": {
            "def": {
              "sequence": {
                "type": 356
              }
            }
          }
        },
        {
          "id": 590,
          "type": {
            "def": {
              "sequence": {
                "type": 587
              }
            }
          }
        },
        {
          "id": 591,
          "type": {
            "def": {
              "sequence": {
                "type": 584
              }
            }
          }
        },
        {
          "id": 592,
          "type": {
            "def": {
              "sequence": {
                "type": 579
              }
            }
          }
        },
        {
          "id": 593,
          "type": {
            "path": [
              "pallet_ethereum",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidSignature",
                    "index": 0,
                    "docs": [
                      "Signature is invalid."
                    ]
                  },
                  {
                    "name": "PreLogExists",
                    "index": 1,
                    "docs": [
                      "Pre-log is present, therefore transact is not allowed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 594,
          "type": {
            "path": [
              "pallet_dynamic_evm_base_fee",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ValueOutOfBounds",
                    "index": 0,
                    "docs": [
                      "Specified value is outside of the allowed range."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 595,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 596,
          "type": {
            "path": [
              "pallet_contracts",
              "wasm",
              "CodeInfo"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "owner",
                    "type": 0,
                    "typeName": "AccountIdOf<T>"
                  },
                  {
                    "name": "deposit",
                    "type": 51,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "refcount",
                    "type": 11,
                    "typeName": "u64"
                  },
                  {
                    "name": "determinism",
                    "type": 368,
                    "typeName": "Determinism"
                  },
                  {
                    "name": "code_len",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 597,
          "type": {
            "path": [
              "pallet_contracts",
              "storage",
              "ContractInfo"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "trie_id",
                    "type": 598,
                    "typeName": "TrieId"
                  },
                  {
                    "name": "code_hash",
                    "type": 13,
                    "typeName": "CodeHash<T>"
                  },
                  {
                    "name": "storage_bytes",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "storage_items",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "storage_byte_deposit",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "storage_item_deposit",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "storage_base_deposit",
                    "type": 6,
                    "typeName": "BalanceOf<T>"
                  },
                  {
                    "name": "delegate_dependencies",
                    "type": 599,
                    "typeName": "BoundedBTreeMap<CodeHash<T>, BalanceOf<T>, T::\nMaxDelegateDependencies>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 598,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 599,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_btree_map",
              "BoundedBTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 13
              },
              {
                "name": "V",
                "type": 6
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 600,
                    "typeName": "BTreeMap<K, V>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 600,
          "type": {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 13
              },
              {
                "name": "V",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 601
                  }
                ]
              }
            }
          }
        },
        {
          "id": 601,
          "type": {
            "def": {
              "sequence": {
                "type": 602
              }
            }
          }
        },
        {
          "id": 602,
          "type": {
            "def": {
              "tuple": [
                13,
                6
              ]
            }
          }
        },
        {
          "id": 603,
          "type": {
            "path": [
              "pallet_contracts",
              "storage",
              "DeletionQueueManager"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "insert_counter",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "delete_counter",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 604,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 605,
          "type": {
            "path": [
              "pallet_contracts",
              "schedule",
              "Schedule"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "limits",
                    "type": 606,
                    "typeName": "Limits"
                  },
                  {
                    "name": "instruction_weights",
                    "type": 607,
                    "typeName": "InstructionWeights<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 606,
          "type": {
            "path": [
              "pallet_contracts",
              "schedule",
              "Limits"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "event_topics",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "memory_pages",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "subject_len",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "payload_len",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "runtime_memory",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "validator_runtime_memory",
                    "type": 4,
                    "typeName": "u32"
                  },
                  {
                    "name": "event_ref_time",
                    "type": 12,
                    "typeName": "u64"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 607,
          "type": {
            "path": [
              "pallet_contracts",
              "schedule",
              "InstructionWeights"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "base",
                    "type": 4,
                    "typeName": "u32"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 608,
          "type": {
            "path": [
              "pallet_contracts",
              "Environment"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "account_id",
                    "type": 609,
                    "typeName": "EnvironmentType<AccountIdOf<T>>"
                  },
                  {
                    "name": "balance",
                    "type": 610,
                    "typeName": "EnvironmentType<BalanceOf<T>>"
                  },
                  {
                    "name": "hash",
                    "type": 611,
                    "typeName": "EnvironmentType<<T as frame_system::Config>::Hash>"
                  },
                  {
                    "name": "hasher",
                    "type": 612,
                    "typeName": "EnvironmentType<<T as frame_system::Config>::Hashing>"
                  },
                  {
                    "name": "timestamp",
                    "type": 614,
                    "typeName": "EnvironmentType<MomentOf<T>>"
                  },
                  {
                    "name": "block_number",
                    "type": 615,
                    "typeName": "EnvironmentType<BlockNumberFor<T>>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 609,
          "type": {
            "path": [
              "pallet_contracts",
              "EnvironmentType"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 610,
          "type": {
            "path": [
              "pallet_contracts",
              "EnvironmentType"
            ],
            "params": [
              {
                "name": "T",
                "type": 6
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 611,
          "type": {
            "path": [
              "pallet_contracts",
              "EnvironmentType"
            ],
            "params": [
              {
                "name": "T",
                "type": 13
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 612,
          "type": {
            "path": [
              "pallet_contracts",
              "EnvironmentType"
            ],
            "params": [
              {
                "name": "T",
                "type": 613
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 613,
          "type": {
            "path": [
              "sp_runtime",
              "traits",
              "BlakeTwo256"
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 614,
          "type": {
            "path": [
              "pallet_contracts",
              "EnvironmentType"
            ],
            "params": [
              {
                "name": "T",
                "type": 12
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 615,
          "type": {
            "path": [
              "pallet_contracts",
              "EnvironmentType"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 616,
          "type": {
            "path": [
              "pallet_contracts",
              "ApiVersion"
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 41,
                    "typeName": "u16"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 617,
          "type": {
            "path": [
              "pallet_contracts",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InvalidSchedule",
                    "index": 0,
                    "docs": [
                      "Invalid schedule supplied, e.g. with zero weight of a basic operation."
                    ]
                  },
                  {
                    "name": "InvalidCallFlags",
                    "index": 1,
                    "docs": [
                      "Invalid combination of flags supplied to `seal_call` or `seal_delegate_call`."
                    ]
                  },
                  {
                    "name": "OutOfGas",
                    "index": 2,
                    "docs": [
                      "The executed contract exhausted its gas limit."
                    ]
                  },
                  {
                    "name": "OutputBufferTooSmall",
                    "index": 3,
                    "docs": [
                      "The output buffer supplied to a contract API call was too small."
                    ]
                  },
                  {
                    "name": "TransferFailed",
                    "index": 4,
                    "docs": [
                      "Performing the requested transfer failed. Probably because there isn't enough",
                      "free balance in the sender's account."
                    ]
                  },
                  {
                    "name": "MaxCallDepthReached",
                    "index": 5,
                    "docs": [
                      "Performing a call was denied because the calling depth reached the limit",
                      "of what is specified in the schedule."
                    ]
                  },
                  {
                    "name": "ContractNotFound",
                    "index": 6,
                    "docs": [
                      "No contract was found at the specified address."
                    ]
                  },
                  {
                    "name": "CodeTooLarge",
                    "index": 7,
                    "docs": [
                      "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
                      "current schedule."
                    ]
                  },
                  {
                    "name": "CodeNotFound",
                    "index": 8,
                    "docs": [
                      "No code could be found at the supplied code hash."
                    ]
                  },
                  {
                    "name": "CodeInfoNotFound",
                    "index": 9,
                    "docs": [
                      "No code info could be found at the supplied code hash."
                    ]
                  },
                  {
                    "name": "OutOfBounds",
                    "index": 10,
                    "docs": [
                      "A buffer outside of sandbox memory was passed to a contract API function."
                    ]
                  },
                  {
                    "name": "DecodingFailed",
                    "index": 11,
                    "docs": [
                      "Input passed to a contract API function failed to decode as expected type."
                    ]
                  },
                  {
                    "name": "ContractTrapped",
                    "index": 12,
                    "docs": [
                      "Contract trapped during execution."
                    ]
                  },
                  {
                    "name": "ValueTooLarge",
                    "index": 13,
                    "docs": [
                      "The size defined in `T::MaxValueSize` was exceeded."
                    ]
                  },
                  {
                    "name": "TerminatedWhileReentrant",
                    "index": 14,
                    "docs": [
                      "Termination of a contract is not allowed while the contract is already",
                      "on the call stack. Can be triggered by `seal_terminate`."
                    ]
                  },
                  {
                    "name": "InputForwarded",
                    "index": 15,
                    "docs": [
                      "`seal_call` forwarded this contracts input. It therefore is no longer available."
                    ]
                  },
                  {
                    "name": "RandomSubjectTooLong",
                    "index": 16,
                    "docs": [
                      "The subject passed to `seal_random` exceeds the limit."
                    ]
                  },
                  {
                    "name": "TooManyTopics",
                    "index": 17,
                    "docs": [
                      "The amount of topics passed to `seal_deposit_events` exceeds the limit."
                    ]
                  },
                  {
                    "name": "NoChainExtension",
                    "index": 18,
                    "docs": [
                      "The chain does not provide a chain extension. Calling the chain extension results",
                      "in this error. Note that this usually  shouldn't happen as deploying such contracts",
                      "is rejected."
                    ]
                  },
                  {
                    "name": "XCMDecodeFailed",
                    "index": 19,
                    "docs": [
                      "Failed to decode the XCM program."
                    ]
                  },
                  {
                    "name": "DuplicateContract",
                    "index": 20,
                    "docs": [
                      "A contract with the same AccountId already exists."
                    ]
                  },
                  {
                    "name": "TerminatedInConstructor",
                    "index": 21,
                    "docs": [
                      "A contract self destructed in its constructor.",
                      "",
                      "This can be triggered by a call to `seal_terminate`."
                    ]
                  },
                  {
                    "name": "ReentranceDenied",
                    "index": 22,
                    "docs": [
                      "A call tried to invoke a contract that is flagged as non-reentrant.",
                      "The only other cause is that a call from a contract into the runtime tried to call back",
                      "into `pallet-contracts`. This would make the whole pallet reentrant with regard to",
                      "contract code execution which is not supported."
                    ]
                  },
                  {
                    "name": "StateChangeDenied",
                    "index": 23,
                    "docs": [
                      "A contract attempted to invoke a state modifying API while being in read-only mode."
                    ]
                  },
                  {
                    "name": "StorageDepositNotEnoughFunds",
                    "index": 24,
                    "docs": [
                      "Origin doesn't have enough balance to pay the required storage deposits."
                    ]
                  },
                  {
                    "name": "StorageDepositLimitExhausted",
                    "index": 25,
                    "docs": [
                      "More storage was created than allowed by the storage deposit limit."
                    ]
                  },
                  {
                    "name": "CodeInUse",
                    "index": 26,
                    "docs": [
                      "Code removal was denied because the code is still in use by at least one contract."
                    ]
                  },
                  {
                    "name": "ContractReverted",
                    "index": 27,
                    "docs": [
                      "The contract ran to completion but decided to revert its storage changes.",
                      "Please note that this error is only returned from extrinsics. When called directly",
                      "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
                      "to determine whether a reversion has taken place."
                    ]
                  },
                  {
                    "name": "CodeRejected",
                    "index": 28,
                    "docs": [
                      "The contract's code was found to be invalid during validation.",
                      "",
                      "The most likely cause of this is that an API was used which is not supported by the",
                      "node. This happens if an older node is used with a new version of ink!. Try updating",
                      "your node to the newest available version.",
                      "",
                      "A more detailed error can be found on the node console if debug messages are enabled",
                      "by supplying `-lruntime::contracts=debug`."
                    ]
                  },
                  {
                    "name": "Indeterministic",
                    "index": 29,
                    "docs": [
                      "An indeterministic code was used in a context where this is not permitted."
                    ]
                  },
                  {
                    "name": "MigrationInProgress",
                    "index": 30,
                    "docs": [
                      "A pending migration needs to complete before the extrinsic can be called."
                    ]
                  },
                  {
                    "name": "NoMigrationPerformed",
                    "index": 31,
                    "docs": [
                      "Migrate dispatch call was attempted but no migration was performed."
                    ]
                  },
                  {
                    "name": "MaxDelegateDependenciesReached",
                    "index": 32,
                    "docs": [
                      "The contract has reached its maximum number of delegate dependencies."
                    ]
                  },
                  {
                    "name": "DelegateDependencyNotFound",
                    "index": 33,
                    "docs": [
                      "The dependency was not found in the contract's delegate dependencies."
                    ]
                  },
                  {
                    "name": "DelegateDependencyAlreadyExists",
                    "index": 34,
                    "docs": [
                      "The contract already depends on the given delegate dependency."
                    ]
                  },
                  {
                    "name": "CannotAddSelfAsDelegateDependency",
                    "index": 35,
                    "docs": [
                      "Can not add a delegate dependency to the code hash of the contract itself."
                    ]
                  },
                  {
                    "name": "OutOfTransientStorage",
                    "index": 36,
                    "docs": [
                      "Can not add more data to transient storage."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 618,
          "type": {
            "path": [
              "bounded_collections",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 13
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 178,
                    "typeName": "Vec<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 619,
          "type": {
            "path": [
              "pallet_sudo",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "RequireSudo",
                    "index": 0,
                    "docs": [
                      "Sender must be the Sudo account."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the Sudo pallet."
            ]
          }
        },
        {
          "id": 620,
          "type": {
            "path": [
              "pallet_migrations",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ongoing",
                    "index": 0,
                    "docs": [
                      "The operation cannot complete since some MBMs are ongoing."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The `Error` enum of this pallet."
            ]
          }
        },
        {
          "id": 621,
          "type": {
            "path": [
              "fp_self_contained",
              "unchecked_extrinsic",
              "UncheckedExtrinsic"
            ],
            "params": [
              {
                "name": "Address",
                "type": 221
              },
              {
                "name": "Call",
                "type": 219
              },
              {
                "name": "Signature",
                "type": 261
              },
              {
                "name": "Extension",
                "type": 622
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 633,
                    "typeName": "generic::UncheckedExtrinsic<Address, Call, Signature, Extension>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 622,
          "type": {
            "def": {
              "tuple": [
                623,
                624,
                625,
                626,
                628,
                629,
                630,
                631
              ]
            }
          }
        },
        {
          "id": 623,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_spec_version",
              "CheckSpecVersion"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 624,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_tx_version",
              "CheckTxVersion"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 625,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_genesis",
              "CheckGenesis"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 626,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_mortality",
              "CheckMortality"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 627,
                    "typeName": "Era"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 627,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "era",
              "Era"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Immortal",
                    "index": 0
                  },
                  {
                    "name": "Mortal1",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 1
                  },
                  {
                    "name": "Mortal2",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 2
                  },
                  {
                    "name": "Mortal3",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 3
                  },
                  {
                    "name": "Mortal4",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 4
                  },
                  {
                    "name": "Mortal5",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 5
                  },
                  {
                    "name": "Mortal6",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 6
                  },
                  {
                    "name": "Mortal7",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 7
                  },
                  {
                    "name": "Mortal8",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 8
                  },
                  {
                    "name": "Mortal9",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 9
                  },
                  {
                    "name": "Mortal10",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 10
                  },
                  {
                    "name": "Mortal11",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 11
                  },
                  {
                    "name": "Mortal12",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 12
                  },
                  {
                    "name": "Mortal13",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 13
                  },
                  {
                    "name": "Mortal14",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 14
                  },
                  {
                    "name": "Mortal15",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 15
                  },
                  {
                    "name": "Mortal16",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 16
                  },
                  {
                    "name": "Mortal17",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 17
                  },
                  {
                    "name": "Mortal18",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 18
                  },
                  {
                    "name": "Mortal19",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 19
                  },
                  {
                    "name": "Mortal20",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 20
                  },
                  {
                    "name": "Mortal21",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 21
                  },
                  {
                    "name": "Mortal22",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 22
                  },
                  {
                    "name": "Mortal23",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 23
                  },
                  {
                    "name": "Mortal24",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 24
                  },
                  {
                    "name": "Mortal25",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 25
                  },
                  {
                    "name": "Mortal26",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 26
                  },
                  {
                    "name": "Mortal27",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 27
                  },
                  {
                    "name": "Mortal28",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 28
                  },
                  {
                    "name": "Mortal29",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 29
                  },
                  {
                    "name": "Mortal30",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 30
                  },
                  {
                    "name": "Mortal31",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 31
                  },
                  {
                    "name": "Mortal32",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 32
                  },
                  {
                    "name": "Mortal33",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 33
                  },
                  {
                    "name": "Mortal34",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 34
                  },
                  {
                    "name": "Mortal35",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 35
                  },
                  {
                    "name": "Mortal36",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 36
                  },
                  {
                    "name": "Mortal37",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 37
                  },
                  {
                    "name": "Mortal38",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 38
                  },
                  {
                    "name": "Mortal39",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 39
                  },
                  {
                    "name": "Mortal40",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 40
                  },
                  {
                    "name": "Mortal41",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 41
                  },
                  {
                    "name": "Mortal42",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 42
                  },
                  {
                    "name": "Mortal43",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 43
                  },
                  {
                    "name": "Mortal44",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 44
                  },
                  {
                    "name": "Mortal45",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 45
                  },
                  {
                    "name": "Mortal46",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 46
                  },
                  {
                    "name": "Mortal47",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 47
                  },
                  {
                    "name": "Mortal48",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 48
                  },
                  {
                    "name": "Mortal49",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 49
                  },
                  {
                    "name": "Mortal50",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 50
                  },
                  {
                    "name": "Mortal51",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 51
                  },
                  {
                    "name": "Mortal52",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 52
                  },
                  {
                    "name": "Mortal53",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 53
                  },
                  {
                    "name": "Mortal54",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 54
                  },
                  {
                    "name": "Mortal55",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 55
                  },
                  {
                    "name": "Mortal56",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 56
                  },
                  {
                    "name": "Mortal57",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 57
                  },
                  {
                    "name": "Mortal58",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 58
                  },
                  {
                    "name": "Mortal59",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 59
                  },
                  {
                    "name": "Mortal60",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 60
                  },
                  {
                    "name": "Mortal61",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 61
                  },
                  {
                    "name": "Mortal62",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 62
                  },
                  {
                    "name": "Mortal63",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 63
                  },
                  {
                    "name": "Mortal64",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 64
                  },
                  {
                    "name": "Mortal65",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 65
                  },
                  {
                    "name": "Mortal66",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 66
                  },
                  {
                    "name": "Mortal67",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 67
                  },
                  {
                    "name": "Mortal68",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 68
                  },
                  {
                    "name": "Mortal69",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 69
                  },
                  {
                    "name": "Mortal70",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 70
                  },
                  {
                    "name": "Mortal71",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 71
                  },
                  {
                    "name": "Mortal72",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 72
                  },
                  {
                    "name": "Mortal73",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 73
                  },
                  {
                    "name": "Mortal74",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 74
                  },
                  {
                    "name": "Mortal75",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 75
                  },
                  {
                    "name": "Mortal76",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 76
                  },
                  {
                    "name": "Mortal77",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 77
                  },
                  {
                    "name": "Mortal78",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 78
                  },
                  {
                    "name": "Mortal79",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 79
                  },
                  {
                    "name": "Mortal80",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 80
                  },
                  {
                    "name": "Mortal81",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 81
                  },
                  {
                    "name": "Mortal82",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 82
                  },
                  {
                    "name": "Mortal83",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 83
                  },
                  {
                    "name": "Mortal84",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 84
                  },
                  {
                    "name": "Mortal85",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 85
                  },
                  {
                    "name": "Mortal86",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 86
                  },
                  {
                    "name": "Mortal87",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 87
                  },
                  {
                    "name": "Mortal88",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 88
                  },
                  {
                    "name": "Mortal89",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 89
                  },
                  {
                    "name": "Mortal90",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 90
                  },
                  {
                    "name": "Mortal91",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 91
                  },
                  {
                    "name": "Mortal92",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 92
                  },
                  {
                    "name": "Mortal93",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 93
                  },
                  {
                    "name": "Mortal94",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 94
                  },
                  {
                    "name": "Mortal95",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 95
                  },
                  {
                    "name": "Mortal96",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 96
                  },
                  {
                    "name": "Mortal97",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 97
                  },
                  {
                    "name": "Mortal98",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 98
                  },
                  {
                    "name": "Mortal99",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 99
                  },
                  {
                    "name": "Mortal100",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 100
                  },
                  {
                    "name": "Mortal101",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 101
                  },
                  {
                    "name": "Mortal102",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 102
                  },
                  {
                    "name": "Mortal103",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 103
                  },
                  {
                    "name": "Mortal104",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 104
                  },
                  {
                    "name": "Mortal105",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 105
                  },
                  {
                    "name": "Mortal106",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 106
                  },
                  {
                    "name": "Mortal107",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 107
                  },
                  {
                    "name": "Mortal108",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 108
                  },
                  {
                    "name": "Mortal109",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 109
                  },
                  {
                    "name": "Mortal110",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 110
                  },
                  {
                    "name": "Mortal111",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 111
                  },
                  {
                    "name": "Mortal112",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 112
                  },
                  {
                    "name": "Mortal113",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 113
                  },
                  {
                    "name": "Mortal114",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 114
                  },
                  {
                    "name": "Mortal115",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 115
                  },
                  {
                    "name": "Mortal116",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 116
                  },
                  {
                    "name": "Mortal117",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 117
                  },
                  {
                    "name": "Mortal118",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 118
                  },
                  {
                    "name": "Mortal119",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 119
                  },
                  {
                    "name": "Mortal120",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 120
                  },
                  {
                    "name": "Mortal121",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 121
                  },
                  {
                    "name": "Mortal122",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 122
                  },
                  {
                    "name": "Mortal123",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 123
                  },
                  {
                    "name": "Mortal124",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 124
                  },
                  {
                    "name": "Mortal125",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 125
                  },
                  {
                    "name": "Mortal126",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 126
                  },
                  {
                    "name": "Mortal127",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 127
                  },
                  {
                    "name": "Mortal128",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 128
                  },
                  {
                    "name": "Mortal129",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 129
                  },
                  {
                    "name": "Mortal130",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 130
                  },
                  {
                    "name": "Mortal131",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 131
                  },
                  {
                    "name": "Mortal132",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 132
                  },
                  {
                    "name": "Mortal133",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 133
                  },
                  {
                    "name": "Mortal134",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 134
                  },
                  {
                    "name": "Mortal135",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 135
                  },
                  {
                    "name": "Mortal136",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 136
                  },
                  {
                    "name": "Mortal137",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 137
                  },
                  {
                    "name": "Mortal138",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 138
                  },
                  {
                    "name": "Mortal139",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 139
                  },
                  {
                    "name": "Mortal140",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 140
                  },
                  {
                    "name": "Mortal141",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 141
                  },
                  {
                    "name": "Mortal142",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 142
                  },
                  {
                    "name": "Mortal143",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 143
                  },
                  {
                    "name": "Mortal144",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 144
                  },
                  {
                    "name": "Mortal145",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 145
                  },
                  {
                    "name": "Mortal146",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 146
                  },
                  {
                    "name": "Mortal147",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 147
                  },
                  {
                    "name": "Mortal148",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 148
                  },
                  {
                    "name": "Mortal149",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 149
                  },
                  {
                    "name": "Mortal150",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 150
                  },
                  {
                    "name": "Mortal151",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 151
                  },
                  {
                    "name": "Mortal152",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 152
                  },
                  {
                    "name": "Mortal153",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 153
                  },
                  {
                    "name": "Mortal154",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 154
                  },
                  {
                    "name": "Mortal155",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 155
                  },
                  {
                    "name": "Mortal156",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 156
                  },
                  {
                    "name": "Mortal157",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 157
                  },
                  {
                    "name": "Mortal158",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 158
                  },
                  {
                    "name": "Mortal159",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 159
                  },
                  {
                    "name": "Mortal160",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 160
                  },
                  {
                    "name": "Mortal161",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 161
                  },
                  {
                    "name": "Mortal162",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 162
                  },
                  {
                    "name": "Mortal163",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 163
                  },
                  {
                    "name": "Mortal164",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 164
                  },
                  {
                    "name": "Mortal165",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 165
                  },
                  {
                    "name": "Mortal166",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 166
                  },
                  {
                    "name": "Mortal167",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 167
                  },
                  {
                    "name": "Mortal168",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 168
                  },
                  {
                    "name": "Mortal169",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 169
                  },
                  {
                    "name": "Mortal170",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 170
                  },
                  {
                    "name": "Mortal171",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 171
                  },
                  {
                    "name": "Mortal172",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 172
                  },
                  {
                    "name": "Mortal173",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 173
                  },
                  {
                    "name": "Mortal174",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 174
                  },
                  {
                    "name": "Mortal175",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 175
                  },
                  {
                    "name": "Mortal176",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 176
                  },
                  {
                    "name": "Mortal177",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 177
                  },
                  {
                    "name": "Mortal178",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 178
                  },
                  {
                    "name": "Mortal179",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 179
                  },
                  {
                    "name": "Mortal180",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 180
                  },
                  {
                    "name": "Mortal181",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 181
                  },
                  {
                    "name": "Mortal182",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 182
                  },
                  {
                    "name": "Mortal183",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 183
                  },
                  {
                    "name": "Mortal184",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 184
                  },
                  {
                    "name": "Mortal185",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 185
                  },
                  {
                    "name": "Mortal186",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 186
                  },
                  {
                    "name": "Mortal187",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 187
                  },
                  {
                    "name": "Mortal188",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 188
                  },
                  {
                    "name": "Mortal189",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 189
                  },
                  {
                    "name": "Mortal190",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 190
                  },
                  {
                    "name": "Mortal191",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 191
                  },
                  {
                    "name": "Mortal192",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 192
                  },
                  {
                    "name": "Mortal193",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 193
                  },
                  {
                    "name": "Mortal194",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 194
                  },
                  {
                    "name": "Mortal195",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 195
                  },
                  {
                    "name": "Mortal196",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 196
                  },
                  {
                    "name": "Mortal197",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 197
                  },
                  {
                    "name": "Mortal198",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 198
                  },
                  {
                    "name": "Mortal199",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 199
                  },
                  {
                    "name": "Mortal200",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 200
                  },
                  {
                    "name": "Mortal201",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 201
                  },
                  {
                    "name": "Mortal202",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 202
                  },
                  {
                    "name": "Mortal203",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 203
                  },
                  {
                    "name": "Mortal204",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 204
                  },
                  {
                    "name": "Mortal205",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 205
                  },
                  {
                    "name": "Mortal206",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 206
                  },
                  {
                    "name": "Mortal207",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 207
                  },
                  {
                    "name": "Mortal208",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 208
                  },
                  {
                    "name": "Mortal209",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 209
                  },
                  {
                    "name": "Mortal210",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 210
                  },
                  {
                    "name": "Mortal211",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 211
                  },
                  {
                    "name": "Mortal212",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 212
                  },
                  {
                    "name": "Mortal213",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 213
                  },
                  {
                    "name": "Mortal214",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 214
                  },
                  {
                    "name": "Mortal215",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 215
                  },
                  {
                    "name": "Mortal216",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 216
                  },
                  {
                    "name": "Mortal217",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 217
                  },
                  {
                    "name": "Mortal218",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 218
                  },
                  {
                    "name": "Mortal219",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 219
                  },
                  {
                    "name": "Mortal220",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 220
                  },
                  {
                    "name": "Mortal221",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 221
                  },
                  {
                    "name": "Mortal222",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 222
                  },
                  {
                    "name": "Mortal223",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 223
                  },
                  {
                    "name": "Mortal224",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 224
                  },
                  {
                    "name": "Mortal225",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 225
                  },
                  {
                    "name": "Mortal226",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 226
                  },
                  {
                    "name": "Mortal227",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 227
                  },
                  {
                    "name": "Mortal228",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 228
                  },
                  {
                    "name": "Mortal229",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 229
                  },
                  {
                    "name": "Mortal230",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 230
                  },
                  {
                    "name": "Mortal231",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 231
                  },
                  {
                    "name": "Mortal232",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 232
                  },
                  {
                    "name": "Mortal233",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 233
                  },
                  {
                    "name": "Mortal234",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 234
                  },
                  {
                    "name": "Mortal235",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 235
                  },
                  {
                    "name": "Mortal236",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 236
                  },
                  {
                    "name": "Mortal237",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 237
                  },
                  {
                    "name": "Mortal238",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 238
                  },
                  {
                    "name": "Mortal239",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 239
                  },
                  {
                    "name": "Mortal240",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 240
                  },
                  {
                    "name": "Mortal241",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 241
                  },
                  {
                    "name": "Mortal242",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 242
                  },
                  {
                    "name": "Mortal243",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 243
                  },
                  {
                    "name": "Mortal244",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 244
                  },
                  {
                    "name": "Mortal245",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 245
                  },
                  {
                    "name": "Mortal246",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 246
                  },
                  {
                    "name": "Mortal247",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 247
                  },
                  {
                    "name": "Mortal248",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 248
                  },
                  {
                    "name": "Mortal249",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 249
                  },
                  {
                    "name": "Mortal250",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 250
                  },
                  {
                    "name": "Mortal251",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 251
                  },
                  {
                    "name": "Mortal252",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 252
                  },
                  {
                    "name": "Mortal253",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 253
                  },
                  {
                    "name": "Mortal254",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 254
                  },
                  {
                    "name": "Mortal255",
                    "fields": [
                      {
                        "type": 2
                      }
                    ],
                    "index": 255
                  }
                ]
              }
            }
          }
        },
        {
          "id": 628,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_nonce",
              "CheckNonce"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 50,
                    "typeName": "T::Nonce"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 629,
          "type": {
            "path": [
              "frame_system",
              "extensions",
              "check_weight",
              "CheckWeight"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {}
            }
          }
        },
        {
          "id": 630,
          "type": {
            "path": [
              "pallet_transaction_payment",
              "ChargeTransactionPayment"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 51,
                    "typeName": "BalanceOf<T>"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 631,
          "type": {
            "path": [
              "frame_metadata_hash_extension",
              "CheckMetadataHash"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "mode",
                    "type": 632,
                    "typeName": "Mode"
                  }
                ]
              }
            }
          }
        },
        {
          "id": 632,
          "type": {
            "path": [
              "frame_metadata_hash_extension",
              "Mode"
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Disabled",
                    "index": 0
                  },
                  {
                    "name": "Enabled",
                    "index": 1
                  }
                ]
              }
            }
          }
        },
        {
          "id": 633,
          "type": {
            "path": [
              "sp_runtime",
              "generic",
              "unchecked_extrinsic",
              "UncheckedExtrinsic"
            ],
            "params": [
              {
                "name": "Address",
                "type": 221
              },
              {
                "name": "Call",
                "type": 219
              },
              {
                "name": "Signature",
                "type": 261
              },
              {
                "name": "Extra",
                "type": 622
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "type": 14
                  }
                ]
              }
            }
          }
        }
      ]
    },
    "pallets": [
      {
        "name": "System",
        "storage": {
          "prefix": "System",
          "entries": [
            {
              "name": "Account",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 3
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                128
              ],
              "docs": [
                " The full account information for a particular account ID."
              ]
            },
            {
              "name": "ExtrinsicCount",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Total extrinsics count for the current block."
              ]
            },
            {
              "name": "InherentsApplied",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Whether all inherents have been applied."
              ]
            },
            {
              "name": "BlockWeight",
              "modifier": "Default",
              "ty": {
                "Plain": 9
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current weight for the block."
              ]
            },
            {
              "name": "AllExtrinsicsLen",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Total length (in bytes) for all extrinsics put together, for the current block."
              ]
            },
            {
              "name": "BlockHash",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 13
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Map of block numbers to block hashes."
              ]
            },
            {
              "name": "ExtrinsicData",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 14
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
              ]
            },
            {
              "name": "Number",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current block number being processed. Set by `execute_block`."
              ]
            },
            {
              "name": "ParentHash",
              "modifier": "Default",
              "ty": {
                "Plain": 13
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Hash of the previous block."
              ]
            },
            {
              "name": "Digest",
              "modifier": "Default",
              "ty": {
                "Plain": 15
              },
              "default": [
                0
              ],
              "docs": [
                " Digest of the current block, also part of the block header."
              ]
            },
            {
              "name": "Events",
              "modifier": "Default",
              "ty": {
                "Plain": 19
              },
              "default": [
                0
              ],
              "docs": [
                " Events deposited for the current block.",
                "",
                " NOTE: The item is unbound and should therefore never be read on chain.",
                " It could otherwise inflate the PoV size of a block.",
                "",
                " Events have a large in-memory size. Box the events to not go out-of-memory",
                " just in case someone still reads them from within the runtime."
              ]
            },
            {
              "name": "EventCount",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of events in the `Events<T>` list."
              ]
            },
            {
              "name": "EventTopics",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 13,
                  "value": 198
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                " of events in the `<Events<T>>` list.",
                "",
                " All topic vectors have deterministic storage locations depending on the topic. This",
                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                " in case of changes fetch the list of events of interest.",
                "",
                " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                " the `EventIndex` then in case if the topic has the same contents on the next block",
                " no notification will be triggered thus the event might be lost."
              ]
            },
            {
              "name": "LastRuntimeUpgrade",
              "modifier": "Optional",
              "ty": {
                "Plain": 200
              },
              "default": [
                0
              ],
              "docs": [
                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
              ]
            },
            {
              "name": "UpgradedToU32RefCount",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
              ]
            },
            {
              "name": "UpgradedToTripleRefCount",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                " (default) if not."
              ]
            },
            {
              "name": "ExecutionPhase",
              "modifier": "Optional",
              "ty": {
                "Plain": 197
              },
              "default": [
                0
              ],
              "docs": [
                " The execution phase of the block."
              ]
            },
            {
              "name": "AuthorizedUpgrade",
              "modifier": "Optional",
              "ty": {
                "Plain": 201
              },
              "default": [
                0
              ],
              "docs": [
                " `Some` if a code upgrade has been authorized."
              ]
            }
          ]
        },
        "calls": {
          "ty": 202
        },
        "event": {
          "ty": 22
        },
        "constants": [
          {
            "name": "BlockWeights",
            "ty": 206,
            "value": [
              194,
              160,
              231,
              102,
              0,
              11,
              0,
              32,
              74,
              169,
              209,
              1,
              2,
              0,
              64,
              1,
              34,
              97,
              201,
              25,
              0,
              1,
              11,
              184,
              111,
              151,
              167,
              46,
              1,
              2,
              0,
              208,
              0,
              1,
              11,
              0,
              152,
              247,
              62,
              93,
              1,
              2,
              0,
              240,
              0,
              1,
              0,
              0,
              34,
              97,
              201,
              25,
              0,
              1,
              11,
              184,
              247,
              233,
              17,
              163,
              1,
              2,
              0,
              32,
              1,
              1,
              11,
              0,
              32,
              74,
              169,
              209,
              1,
              2,
              0,
              64,
              1,
              1,
              7,
              0,
              136,
              82,
              106,
              116,
              2,
              0,
              80,
              0,
              34,
              97,
              201,
              25,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Block & extrinsics weights: base values and limits."
            ]
          },
          {
            "name": "BlockLength",
            "ty": 209,
            "value": [
              0,
              0,
              60,
              0,
              0,
              0,
              80,
              0,
              0,
              0,
              80,
              0
            ],
            "docs": [
              " The maximum length of a block (in bytes)."
            ]
          },
          {
            "name": "BlockHashCount",
            "ty": 4,
            "value": [
              0,
              16,
              0,
              0
            ],
            "docs": [
              " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
            ]
          },
          {
            "name": "DbWeight",
            "ty": 211,
            "value": [
              64,
              120,
              125,
              1,
              0,
              0,
              0,
              0,
              0,
              225,
              245,
              5,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The weight of runtime database operations the runtime can invoke."
            ]
          },
          {
            "name": "Version",
            "ty": 212,
            "value": [
              24,
              115,
              104,
              105,
              100,
              101,
              110,
              24,
              115,
              104,
              105,
              100,
              101,
              110,
              1,
              0,
              0,
              0,
              221,
              5,
              0,
              0,
              0,
              0,
              0,
              0,
              80,
              223,
              106,
              203,
              104,
              153,
              7,
              96,
              155,
              5,
              0,
              0,
              0,
              55,
              227,
              151,
              252,
              124,
              145,
              245,
              228,
              2,
              0,
              0,
              0,
              221,
              113,
              141,
              92,
              197,
              50,
              98,
              212,
              1,
              0,
              0,
              0,
              215,
              189,
              216,
              162,
              114,
              202,
              13,
              101,
              1,
              0,
              0,
              0,
              64,
              254,
              58,
              212,
              1,
              248,
              149,
              154,
              6,
              0,
              0,
              0,
              210,
              188,
              152,
              151,
              238,
              208,
              143,
              21,
              3,
              0,
              0,
              0,
              247,
              139,
              39,
              139,
              229,
              63,
              69,
              76,
              2,
              0,
              0,
              0,
              188,
              157,
              137,
              144,
              79,
              91,
              146,
              63,
              1,
              0,
              0,
              0,
              55,
              200,
              187,
              19,
              80,
              169,
              162,
              168,
              4,
              0,
              0,
              0,
              243,
              255,
              20,
              213,
              171,
              82,
              112,
              89,
              3,
              0,
              0,
              0,
              171,
              60,
              5,
              114,
              41,
              31,
              235,
              139,
              1,
              0,
              0,
              0,
              234,
              147,
              227,
              241,
              111,
              61,
              105,
              98,
              2,
              0,
              0,
              0,
              88,
              34,
              17,
              246,
              91,
              177,
              75,
              137,
              5,
              0,
              0,
              0,
              230,
              91,
              0,
              228,
              108,
              237,
              208,
              170,
              2,
              0,
              0,
              0,
              104,
              182,
              107,
              161,
              34,
              201,
              63,
              167,
              2,
              0,
              0,
              0,
              232,
              172,
              203,
              130,
              251,
              21,
              41,
              81,
              2,
              0,
              0,
              0,
              111,
              245,
              46,
              232,
              88,
              230,
              197,
              189,
              1,
              0,
              0,
              0,
              145,
              177,
              200,
              177,
              99,
              40,
              235,
              146,
              2,
              0,
              0,
              0,
              38,
              9,
              190,
              131,
              172,
              68,
              104,
              220,
              1,
              0,
              0,
              0,
              251,
              197,
              119,
              185,
              215,
              71,
              239,
              214,
              1,
              0,
              0,
              0,
              3,
              0,
              0,
              0,
              1
            ],
            "docs": [
              " Get the chain's in-code version."
            ]
          },
          {
            "name": "SS58Prefix",
            "ty": 41,
            "value": [
              5,
              0
            ],
            "docs": [
              " The designated SS58 prefix of this chain.",
              "",
              " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
              " that the runtime should know about the prefix in order to make use of it as",
              " an identifier of the chain."
            ]
          }
        ],
        "error": {
          "ty": 216
        },
        "index": 10
      },
      {
        "name": "Utility",
        "storage": null,
        "calls": {
          "ty": 217
        },
        "event": {
          "ty": 32
        },
        "constants": [
          {
            "name": "batched_calls_limit",
            "ty": 4,
            "value": [
              170,
              42,
              0,
              0
            ],
            "docs": [
              " The limit on the number of batched calls."
            ]
          }
        ],
        "error": {
          "ty": 384
        },
        "index": 11
      },
      {
        "name": "Identity",
        "storage": {
          "prefix": "Identity",
          "entries": [
            {
              "name": "IdentityOf",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 385
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Information that is pertinent to identify the entity behind an account. First item is the",
                " registration, second is the account's primary username.",
                "",
                " TWOX-NOTE: OK ― `AccountId` is a secure hash."
              ]
            },
            {
              "name": "UsernameOf",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 36
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Identifies the primary username of an account."
              ]
            },
            {
              "name": "SuperOf",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 258
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                " context. If the account is not some other account's sub-identity, then just `None`."
              ]
            },
            {
              "name": "SubsOf",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 389
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Alternative \"sub\" identities of this account.",
                "",
                " The first item is the deposit, the second is a vector of the accounts.",
                "",
                " TWOX-NOTE: OK ― `AccountId` is a secure hash."
              ]
            },
            {
              "name": "Registrars",
              "modifier": "Default",
              "ty": {
                "Plain": 391
              },
              "default": [
                0
              ],
              "docs": [
                " The set of registrars. Not expected to get very big as can only be added through a",
                " special origin (likely a council motion).",
                "",
                " The index into this can be cast to `RegistrarIndex` to get a valid value."
              ]
            },
            {
              "name": "AuthorityOf",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 395,
                  "value": 396
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A map of the accounts who are authorized to grant usernames."
              ]
            },
            {
              "name": "UsernameInfoOf",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 36,
                  "value": 397
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Reverse lookup from `username` to the `AccountId` that has registered it and the provider of",
                " the username. The `owner` value should be a key in the `UsernameOf` map, but it may not if",
                " the user has cleared their username or it has been removed.",
                "",
                " Multiple usernames may map to the same `AccountId`, but `UsernameOf` will only map to one",
                " primary username."
              ]
            },
            {
              "name": "PendingUsernames",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 36,
                  "value": 399
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Usernames that an authority has granted, but that the account controller has not confirmed",
                " that they want it. Used primarily in cases where the `AccountId` cannot provide a signature",
                " because they are a pure proxy, multisig, etc. In order to confirm it, they should call",
                " [accept_username](`Call::accept_username`).",
                "",
                " First tuple item is the account and second is the acceptance deadline."
              ]
            },
            {
              "name": "UnbindingUsernames",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 36,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Usernames for which the authority that granted them has started the removal process by",
                " unbinding them. Each unbinding username maps to its grace period expiry, which is the first",
                " block in which the username could be deleted through a",
                " [remove_username](`Call::remove_username`) call."
              ]
            }
          ]
        },
        "calls": {
          "ty": 220
        },
        "event": {
          "ty": 35
        },
        "constants": [
          {
            "name": "BasicDeposit",
            "ty": 6,
            "value": [
              0,
              32,
              114,
              180,
              108,
              188,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount held on deposit for a registered identity."
            ]
          },
          {
            "name": "ByteDeposit",
            "ty": 6,
            "value": [
              0,
              208,
              237,
              144,
              46,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount held on deposit per encoded byte for a registered identity."
            ]
          },
          {
            "name": "UsernameDeposit",
            "ty": 6,
            "value": [
              0,
              0,
              186,
              29,
              210,
              5,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount held on deposit per registered username. This value should change only in",
              " runtime upgrades with proper migration of existing deposits."
            ]
          },
          {
            "name": "SubAccountDeposit",
            "ty": 6,
            "value": [
              0,
              144,
              2,
              166,
              34,
              151,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount held on deposit for a registered subaccount. This should account for the fact",
              " that one storage item's value will increase by the size of an account ID, and there will",
              " be another trie item whose value is the size of an account ID plus 32 bytes."
            ]
          },
          {
            "name": "MaxSubAccounts",
            "ty": 4,
            "value": [
              100,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of sub-accounts allowed per identified account."
            ]
          },
          {
            "name": "MaxRegistrars",
            "ty": 4,
            "value": [
              20,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum number of registrars allowed in the system. Needed to bound the complexity",
              " of, e.g., updating judgements."
            ]
          },
          {
            "name": "PendingUsernameExpiration",
            "ty": 4,
            "value": [
              192,
              137,
              1,
              0
            ],
            "docs": [
              " The number of blocks within which a username grant must be accepted."
            ]
          },
          {
            "name": "UsernameGracePeriod",
            "ty": 4,
            "value": [
              192,
              137,
              1,
              0
            ],
            "docs": [
              " The number of blocks that must pass to enable the permanent deletion of a username by",
              " its respective authority."
            ]
          },
          {
            "name": "MaxSuffixLength",
            "ty": 4,
            "value": [
              7,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum length of a suffix."
            ]
          },
          {
            "name": "MaxUsernameLength",
            "ty": 4,
            "value": [
              32,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum length of a username, including its suffix and any system-added delimiters."
            ]
          }
        ],
        "error": {
          "ty": 400
        },
        "index": 12
      },
      {
        "name": "Timestamp",
        "storage": {
          "prefix": "Timestamp",
          "entries": [
            {
              "name": "Now",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current time for the current block."
              ]
            },
            {
              "name": "DidUpdate",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Whether the timestamp has been updated in this block.",
                "",
                " This value is updated to `true` upon successful submission of a timestamp by a node.",
                " It is then checked at the end of each block execution in the `on_finalize` hook."
              ]
            }
          ]
        },
        "calls": {
          "ty": 264
        },
        "event": null,
        "constants": [
          {
            "name": "MinimumPeriod",
            "ty": 12,
            "value": [
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum period between blocks.",
              "",
              " Be aware that this is different to the *expected* period that the block production",
              " apparatus provides. Your chosen consensus system will generally work with this to",
              " determine a sensible block time. For example, in the Aura pallet it will be double this",
              " period on default settings."
            ]
          }
        ],
        "error": null,
        "index": 13
      },
      {
        "name": "Multisig",
        "storage": {
          "prefix": "Multisig",
          "entries": [
            {
              "name": "Multisigs",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 401,
                  "value": 402
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The set of open multisig operations."
              ]
            }
          ]
        },
        "calls": {
          "ty": 265
        },
        "event": {
          "ty": 37
        },
        "constants": [
          {
            "name": "DepositBase",
            "ty": 6,
            "value": [
              0,
              0,
              134,
              118,
              128,
              157,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The base amount of currency needed to reserve for creating a multisig execution or to",
              " store a dispatch call for later.",
              "",
              " This is held for an additional storage item whose value size is",
              " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
              " `32 + sizeof(AccountId)` bytes."
            ]
          },
          {
            "name": "DepositFactor",
            "ty": 6,
            "value": [
              0,
              0,
              186,
              29,
              210,
              5,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of currency needed per unit threshold when creating a multisig execution.",
              "",
              " This is held for adding 32 bytes more into a pre-existing storage value."
            ]
          },
          {
            "name": "MaxSignatories",
            "ty": 4,
            "value": [
              100,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum amount of signatories allowed in the multisig."
            ]
          }
        ],
        "error": {
          "ty": 404
        },
        "index": 14
      },
      {
        "name": "Proxy",
        "storage": {
          "prefix": "Proxy",
          "entries": [
            {
              "name": "Proxies",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 405
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The set of account proxies. Maps the account which has delegated to the accounts",
                " which are being delegated to, together with the amount held on deposit."
              ]
            },
            {
              "name": "Announcements",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 409
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The announcements made by the proxy (key)."
              ]
            }
          ]
        },
        "calls": {
          "ty": 267
        },
        "event": {
          "ty": 39
        },
        "constants": [
          {
            "name": "ProxyDepositBase",
            "ty": 6,
            "value": [
              0,
              0,
              53,
              44,
              243,
              142,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The base amount of currency needed to reserve for creating a proxy.",
              "",
              " This is held for an additional storage item whose value size is",
              " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
            ]
          },
          {
            "name": "ProxyDepositFactor",
            "ty": 6,
            "value": [
              0,
              208,
              167,
              174,
              0,
              6,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of currency needed per proxy added.",
              "",
              " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
              " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
              " into account `32 + proxy_type.encode().len()` bytes of data."
            ]
          },
          {
            "name": "MaxProxies",
            "ty": 4,
            "value": [
              32,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum amount of proxies allowed for a single account."
            ]
          },
          {
            "name": "MaxPending",
            "ty": 4,
            "value": [
              32,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum amount of time-delayed announcements that are allowed to be pending."
            ]
          },
          {
            "name": "AnnouncementDepositBase",
            "ty": 6,
            "value": [
              0,
              0,
              53,
              44,
              243,
              142,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The base amount of currency needed to reserve for creating an announcement.",
              "",
              " This is held when a new storage item holding a `Balance` is created (typically 16",
              " bytes)."
            ]
          },
          {
            "name": "AnnouncementDepositFactor",
            "ty": 6,
            "value": [
              0,
              160,
              79,
              93,
              1,
              12,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of currency needed per announcement made.",
              "",
              " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
              " into a pre-existing storage value."
            ]
          }
        ],
        "error": {
          "ty": 413
        },
        "index": 15
      },
      {
        "name": "ParachainSystem",
        "storage": {
          "prefix": "ParachainSystem",
          "entries": [
            {
              "name": "UnincludedSegment",
              "modifier": "Default",
              "ty": {
                "Plain": 414
              },
              "default": [
                0
              ],
              "docs": [
                " Latest included block descendants the runtime accepted. In other words, these are",
                " ancestors of the currently executing block which have not been included in the observed",
                " relay-chain state.",
                "",
                " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
                " in the pallet."
              ]
            },
            {
              "name": "AggregatedUnincludedSegment",
              "modifier": "Optional",
              "ty": {
                "Plain": 424
              },
              "default": [
                0
              ],
              "docs": [
                " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
                " latest HRMP watermark. Used for limiting the acceptance of new blocks with",
                " respect to relay chain constraints."
              ]
            },
            {
              "name": "PendingValidationCode",
              "modifier": "Default",
              "ty": {
                "Plain": 14
              },
              "default": [
                0
              ],
              "docs": [
                " In case of a scheduled upgrade, this storage field contains the validation code to be",
                " applied.",
                "",
                " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
                " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
                " with the new validation code. This concludes the upgrade process."
              ]
            },
            {
              "name": "NewValidationCode",
              "modifier": "Optional",
              "ty": {
                "Plain": 14
              },
              "default": [
                0
              ],
              "docs": [
                " Validation code that is set by the parachain and is to be communicated to collator and",
                " consequently the relay-chain.",
                "",
                " This will be cleared in `on_initialize` of each new block if no other pallet already set",
                " the value."
              ]
            },
            {
              "name": "ValidationData",
              "modifier": "Optional",
              "ty": {
                "Plain": 271
              },
              "default": [
                0
              ],
              "docs": [
                " The [`PersistedValidationData`] set for this block.",
                " This value is expected to be set only once per block and it's never stored",
                " in the trie."
              ]
            },
            {
              "name": "DidSetValidationCode",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Were the validation data set to notify the relay chain?"
              ]
            },
            {
              "name": "LastRelayChainBlockNumber",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The relay chain block number associated with the last parachain block.",
                "",
                " This is updated in `on_finalize`."
              ]
            },
            {
              "name": "UpgradeRestrictionSignal",
              "modifier": "Default",
              "ty": {
                "Plain": 425
              },
              "default": [
                0
              ],
              "docs": [
                " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
                " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
                " candidate will be invalid.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "name": "UpgradeGoAhead",
              "modifier": "Default",
              "ty": {
                "Plain": 422
              },
              "default": [
                0
              ],
              "docs": [
                " Optional upgrade go-ahead signal from the relay-chain.",
                "",
                " This storage item is a mirror of the corresponding value for the current parachain from the",
                " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
                " set after the inherent."
              ]
            },
            {
              "name": "RelayStateProof",
              "modifier": "Optional",
              "ty": {
                "Plain": 273
              },
              "default": [
                0
              ],
              "docs": [
                " The state proof for the last relay parent block.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "name": "RelevantMessagingState",
              "modifier": "Optional",
              "ty": {
                "Plain": 427
              },
              "default": [
                0
              ],
              "docs": [
                " The snapshot of some state related to messaging relevant to the current parachain as per",
                " the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "name": "HostConfiguration",
              "modifier": "Optional",
              "ty": {
                "Plain": 432
              },
              "default": [
                0
              ],
              "docs": [
                " The parachain host configuration that was obtained from the relay parent.",
                "",
                " This field is meant to be updated each block with the validation data inherent. Therefore,",
                " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
                "",
                " This data is also absent from the genesis."
              ]
            },
            {
              "name": "LastDmqMqcHead",
              "modifier": "Default",
              "ty": {
                "Plain": 434
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The last downward message queue chain head we have observed.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "name": "LastHrmpMqcHeads",
              "modifier": "Default",
              "ty": {
                "Plain": 435
              },
              "default": [
                0
              ],
              "docs": [
                " The message queue chain heads we have observed per each channel incoming channel.",
                "",
                " This value is loaded before and saved after processing inbound downward messages carried",
                " by the system inherent."
              ]
            },
            {
              "name": "ProcessedDownwardMessages",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of downward messages processed in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "name": "HrmpWatermark",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " HRMP watermark that was set in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "name": "HrmpOutboundMessages",
              "modifier": "Default",
              "ty": {
                "Plain": 438
              },
              "default": [
                0
              ],
              "docs": [
                " HRMP messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "name": "UpwardMessages",
              "modifier": "Default",
              "ty": {
                "Plain": 205
              },
              "default": [
                0
              ],
              "docs": [
                " Upward messages that were sent in a block.",
                "",
                " This will be cleared in `on_initialize` of each new block."
              ]
            },
            {
              "name": "PendingUpwardMessages",
              "modifier": "Default",
              "ty": {
                "Plain": 205
              },
              "default": [
                0
              ],
              "docs": [
                " Upward messages that are still pending and not yet send to the relay chain."
              ]
            },
            {
              "name": "UpwardDeliveryFeeFactor",
              "modifier": "Default",
              "ty": {
                "Plain": 72
              },
              "default": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The factor to multiply the base delivery fee by for UMP."
              ]
            },
            {
              "name": "AnnouncedHrmpMessagesPerCandidate",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
                " announcing the weight of `on_initialize` and `on_finalize`."
              ]
            },
            {
              "name": "ReservedXcmpWeightOverride",
              "modifier": "Optional",
              "ty": {
                "Plain": 10
              },
              "default": [
                0
              ],
              "docs": [
                " The weight we reserve at the beginning of the block for processing XCMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "name": "ReservedDmpWeightOverride",
              "modifier": "Optional",
              "ty": {
                "Plain": 10
              },
              "default": [
                0
              ],
              "docs": [
                " The weight we reserve at the beginning of the block for processing DMP messages. This",
                " overrides the amount set in the Config trait."
              ]
            },
            {
              "name": "CustomValidationHeadData",
              "modifier": "Optional",
              "ty": {
                "Plain": 14
              },
              "default": [
                0
              ],
              "docs": [
                " A custom head data that should be returned as result of `validate_block`.",
                "",
                " See `Pallet::set_custom_validation_head_data` for more information."
              ]
            }
          ]
        },
        "calls": {
          "ty": 269
        },
        "event": {
          "ty": 42
        },
        "constants": [
          {
            "name": "SelfParaId",
            "ty": 174,
            "value": [
              100,
              0,
              0,
              0
            ],
            "docs": [
              " Returns the parachain ID we are running with."
            ]
          }
        ],
        "error": {
          "ty": 440
        },
        "index": 20
      },
      {
        "name": "ParachainInfo",
        "storage": {
          "prefix": "ParachainInfo",
          "entries": [
            {
              "name": "ParachainId",
              "modifier": "Default",
              "ty": {
                "Plain": 174
              },
              "default": [
                100,
                0,
                0,
                0
              ],
              "docs": []
            }
          ]
        },
        "calls": {
          "ty": 282
        },
        "event": null,
        "constants": [],
        "error": null,
        "index": 21
      },
      {
        "name": "TransactionPayment",
        "storage": {
          "prefix": "TransactionPayment",
          "entries": [
            {
              "name": "NextFeeMultiplier",
              "modifier": "Default",
              "ty": {
                "Plain": 72
              },
              "default": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "StorageVersion",
              "modifier": "Default",
              "ty": {
                "Plain": 441
              },
              "default": [
                0
              ],
              "docs": []
            }
          ]
        },
        "calls": null,
        "event": {
          "ty": 44
        },
        "constants": [
          {
            "name": "OperationalFeeMultiplier",
            "ty": 2,
            "value": [
              5
            ],
            "docs": [
              " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
              " `priority`",
              "",
              " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
              " added to a tip component in regular `priority` calculations.",
              " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
              " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
              "",
              " ```rust,ignore",
              " // For `Normal`",
              " let priority = priority_calc(tip);",
              "",
              " // For `Operational`",
              " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
              " let priority = priority_calc(tip + virtual_tip);",
              " ```",
              "",
              " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
              " sent with the transaction. So, not only does the transaction get a priority bump based",
              " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
              " transactions."
            ]
          }
        ],
        "error": null,
        "index": 30
      },
      {
        "name": "Balances",
        "storage": {
          "prefix": "Balances",
          "entries": [
            {
              "name": "TotalIssuance",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The total units issued in the system."
              ]
            },
            {
              "name": "InactiveIssuance",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The total units of outstanding deactivated balance in the system."
              ]
            },
            {
              "name": "Account",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 5
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                128
              ],
              "docs": [
                " The Balances pallet example of storing the balance of an account.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                "  }",
                " ```",
                "",
                " You can also store the balance of an account in the `System` pallet.",
                "",
                " # Example",
                "",
                " ```nocompile",
                "  impl pallet_balances::Config for Runtime {",
                "   type AccountStore = System",
                "  }",
                " ```",
                "",
                " But this comes with tradeoffs, storing account balances in the system pallet stores",
                " `frame_system` data alongside the account data contrary to storing account balances in the",
                " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                " NOTE: This is only used in the case that this pallet is used to store balances."
              ]
            },
            {
              "name": "Locks",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 442
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Any liquidity locks on some account balances.",
                " NOTE: Should only be accessed when setting, changing and freeing a lock.",
                "",
                " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "Reserves",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 446
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Named reserves on some account balances.",
                "",
                " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
              ]
            },
            {
              "name": "Holds",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 449
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Holds on account balances."
              ]
            },
            {
              "name": "Freezes",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 454
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Freeze locks on account balances."
              ]
            }
          ]
        },
        "calls": {
          "ty": 283
        },
        "event": {
          "ty": 45
        },
        "constants": [
          {
            "name": "ExistentialDeposit",
            "ty": 6,
            "value": [
              64,
              66,
              15,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
              "",
              " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
              " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
              " In case you have multiple sources of provider references, you may also get unexpected",
              " behaviour if you set this to zero.",
              "",
              " Bottom line: Do yourself a favour and make it at least one!"
            ]
          },
          {
            "name": "MaxLocks",
            "ty": 4,
            "value": [
              50,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of locks that should exist on an account.",
              " Not strictly enforced, but used for weight estimation.",
              "",
              " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "name": "MaxReserves",
            "ty": 4,
            "value": [
              50,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of named reserves that can exist on an account.",
              "",
              " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
            ]
          },
          {
            "name": "MaxFreezes",
            "ty": 4,
            "value": [
              1,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of individual freeze locks that can exist on an account at any time."
            ]
          }
        ],
        "error": {
          "ty": 459
        },
        "index": 31
      },
      {
        "name": "Vesting",
        "storage": {
          "prefix": "Vesting",
          "entries": [
            {
              "name": "Vesting",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 460
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Information regarding the vesting of a given account."
              ]
            },
            {
              "name": "StorageVersion",
              "modifier": "Default",
              "ty": {
                "Plain": 462
              },
              "default": [
                0
              ],
              "docs": [
                " Storage version of the pallet.",
                "",
                " New networks start with latest version, as determined by the genesis build."
              ]
            }
          ]
        },
        "calls": {
          "ty": 285
        },
        "event": {
          "ty": 47
        },
        "constants": [
          {
            "name": "MinVestedTransfer",
            "ty": 6,
            "value": [
              0,
              0,
              100,
              167,
              179,
              182,
              224,
              13,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The minimum amount transferred to call `vested_transfer`."
            ]
          },
          {
            "name": "MaxVestingSchedules",
            "ty": 4,
            "value": [
              28,
              0,
              0,
              0
            ],
            "docs": []
          }
        ],
        "error": {
          "ty": 463
        },
        "index": 32
      },
      {
        "name": "Inflation",
        "storage": {
          "prefix": "Inflation",
          "entries": [
            {
              "name": "ActiveInflationConfig",
              "modifier": "Default",
              "ty": {
                "Plain": 49
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Active inflation configuration parameters.",
                " They describe current rewards, when inflation needs to be recalculated, etc."
              ]
            },
            {
              "name": "InflationParams",
              "modifier": "Default",
              "ty": {
                "Plain": 288
              },
              "default": [
                15,
                0,
                0,
                71,
                14,
                161,
                176,
                248,
                15,
                0,
                0,
                197,
                46,
                188,
                162,
                177,
                15,
                0,
                0,
                67,
                79,
                215,
                148,
                106,
                19,
                0,
                0,
                20,
                187,
                240,
                138,
                198,
                2,
                19,
                0,
                0,
                217,
                233,
                172,
                45,
                120,
                3,
                19,
                0,
                0,
                99,
                71,
                37,
                115,
                219,
                4,
                19,
                0,
                0,
                12,
                61,
                93,
                83,
                170,
                1,
                19,
                0,
                0,
                178,
                211,
                89,
                91,
                240,
                6
              ],
              "docs": [
                " Static inflation parameters - used to calculate active inflation configuration at certain points in time."
              ]
            },
            {
              "name": "DoRecalculation",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Flag indicating whether on the first possible opportunity, recalculation of the inflation config should be done."
              ]
            }
          ]
        },
        "calls": {
          "ty": 287
        },
        "event": {
          "ty": 48
        },
        "constants": [],
        "error": {
          "ty": 464
        },
        "index": 33
      },
      {
        "name": "DappStaking",
        "storage": {
          "prefix": "DappStaking",
          "entries": [
            {
              "name": "ActiveProtocolState",
              "modifier": "Default",
              "ty": {
                "Plain": 465
              },
              "default": [
                4,
                8,
                4,
                0,
                8,
                0
              ],
              "docs": [
                " General information about dApp staking protocol state."
              ]
            },
            {
              "name": "NextDAppId",
              "modifier": "Default",
              "ty": {
                "Plain": 41
              },
              "default": [
                0,
                0
              ],
              "docs": [
                " Counter for unique dApp identifiers."
              ]
            },
            {
              "name": "IntegratedDApps",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 56,
                  "value": 467
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Map of all dApps integrated into dApp staking protocol.",
                "",
                " Even though dApp is integrated, it does not mean it's still actively participating in dApp staking.",
                " It might have been unregistered at some point in history."
              ]
            },
            {
              "name": "CounterForIntegratedDApps",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "Ledger",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 469
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " General locked/staked information for each account."
              ]
            },
            {
              "name": "StakerInfo",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 475,
                  "value": 476
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Information about how much each staker has staked for each smart contract in some period."
              ]
            },
            {
              "name": "ContractStake",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 41,
                  "value": 477
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Information about how much has been staked on a smart contract in some era or period."
              ]
            },
            {
              "name": "CurrentEraInfo",
              "modifier": "Default",
              "ty": {
                "Plain": 478
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " General information about the current era."
              ]
            },
            {
              "name": "EraRewards",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 479
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Information about rewards for each era.",
                "",
                " Since each entry is a 'span', covering up to `T::EraRewardSpanLength` entries, only certain era value keys can exist in storage.",
                " For the sake of simplicity, valid `era` keys are calculated as:",
                "",
                " era_key = era - (era % T::EraRewardSpanLength)",
                "",
                " This means that e.g. in case `EraRewardSpanLength = 8`, only era values 0, 8, 16, 24, etc. can exist in storage.",
                " Eras 1-7 will be stored in the same entry as era 0, eras 9-15 will be stored in the same entry as era 8, etc."
              ]
            },
            {
              "name": "PeriodEnd",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 483
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Information about period's end."
              ]
            },
            {
              "name": "StaticTierParams",
              "modifier": "Default",
              "ty": {
                "Plain": 61
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Static tier parameters used to calculate tier configuration."
              ]
            },
            {
              "name": "TierConfig",
              "modifier": "Default",
              "ty": {
                "Plain": 484
              },
              "default": [
                0,
                0,
                0
              ],
              "docs": [
                " Tier configuration user for current & preceding eras."
              ]
            },
            {
              "name": "DAppTiers",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 489
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Information about which tier a dApp belonged to in a specific era."
              ]
            },
            {
              "name": "HistoryCleanupMarker",
              "modifier": "Default",
              "ty": {
                "Plain": 495
              },
              "default": [
                0,
                0,
                0
              ],
              "docs": [
                " History cleanup marker - holds information about which DB entries should be cleaned up next, when applicable."
              ]
            },
            {
              "name": "Safeguard",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                1
              ],
              "docs": [
                " Safeguard to prevent unwanted operations in production.",
                " Kept as a storage without extrinsic setter, so we can still enable it for some",
                " chain-fork debugging if required."
              ]
            }
          ]
        },
        "calls": {
          "ty": 289
        },
        "event": {
          "ty": 54
        },
        "constants": [
          {
            "name": "BaseNativeCurrencyPrice",
            "ty": 72,
            "value": [
              0,
              0,
              197,
              46,
              188,
              162,
              177,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Base native currency price used to calculate base number of slots.",
              " This is used to adjust tier configuration, tier thresholds specifically, based on the native token price changes.",
              "",
              " When dApp staking thresholds were modeled, a base price was set from which the initial configuration is derived.",
              " E.g. for a price of 0.05$, we get 100 slots, and certain tier thresholds.",
              " Using these values as the base, we can adjust the configuration based on the current price.",
              "",
              " This is connected with the `TierSlots` associated type, since it's used to calculate the total number of slots for the given price."
            ]
          },
          {
            "name": "EraRewardSpanLength",
            "ty": 4,
            "value": [
              16,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum length of a single era reward span length entry."
            ]
          },
          {
            "name": "RewardRetentionInPeriods",
            "ty": 4,
            "value": [
              3,
              0,
              0,
              0
            ],
            "docs": [
              " Number of periods for which we keep rewards available for claiming.",
              " After that period, they are no longer claimable."
            ]
          },
          {
            "name": "MaxNumberOfContracts",
            "ty": 4,
            "value": [
              244,
              1,
              0,
              0
            ],
            "docs": [
              " Maximum number of contracts that can be integrated into dApp staking at once."
            ]
          },
          {
            "name": "MaxUnlockingChunks",
            "ty": 4,
            "value": [
              8,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum number of unlocking chunks that can exist per account at a time."
            ]
          },
          {
            "name": "MinimumLockedAmount",
            "ty": 6,
            "value": [
              0,
              0,
              136,
              177,
              22,
              175,
              227,
              181,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Minimum amount an account has to lock in dApp staking in order to participate."
            ]
          },
          {
            "name": "UnlockingPeriod",
            "ty": 4,
            "value": [
              4,
              0,
              0,
              0
            ],
            "docs": [
              " Number of standard eras that need to pass before unlocking chunk can be claimed.",
              " Even though it's expressed in 'eras', it's actually measured in number of blocks."
            ]
          },
          {
            "name": "MaxNumberOfStakedContracts",
            "ty": 4,
            "value": [
              16,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum amount of stake contract entries an account is allowed to have at once."
            ]
          },
          {
            "name": "MinimumStakeAmount",
            "ty": 6,
            "value": [
              0,
              0,
              136,
              177,
              22,
              175,
              227,
              181,
              2,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Minimum amount staker can stake on a contract."
            ]
          },
          {
            "name": "NumberOfTiers",
            "ty": 4,
            "value": [
              4,
              0,
              0,
              0
            ],
            "docs": [
              " Number of different tiers."
            ]
          },
          {
            "name": "RankingEnabled",
            "ty": 8,
            "value": [
              1
            ],
            "docs": [
              " Tier ranking enabled."
            ]
          },
          {
            "name": "MaxBonusSafeMovesPerPeriod",
            "ty": 2,
            "value": [
              2
            ],
            "docs": [
              " The maximum number of 'safe move actions' allowed within a single period while",
              " retaining eligibility for bonus rewards. Exceeding this limit will result in the",
              " forfeiture of the bonus rewards for the affected stake."
            ]
          }
        ],
        "error": {
          "ty": 496
        },
        "index": 34
      },
      {
        "name": "Assets",
        "storage": {
          "prefix": "Assets",
          "entries": [
            {
              "name": "Asset",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 6,
                  "value": 497
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Details of an asset."
              ]
            },
            {
              "name": "Account",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 499,
                  "value": 500
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The holdings of a specific account for a specific asset."
              ]
            },
            {
              "name": "Approvals",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat",
                    "Blake2_128Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 503,
                  "value": 504
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Approved balance transfers. First balance is the amount approved for transfer. Second",
                " is the amount of `T::Currency` reserved for storing this.",
                " First key is the asset ID, second key is the owner and third key is the delegate."
              ]
            },
            {
              "name": "Metadata",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 6,
                  "value": 505
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Metadata of an asset."
              ]
            },
            {
              "name": "NextAssetId",
              "modifier": "Optional",
              "ty": {
                "Plain": 6
              },
              "default": [
                0
              ],
              "docs": [
                " The asset ID enforced for the next asset creation, if any present. Otherwise, this storage",
                " item has no effect.",
                "",
                " This can be useful for setting up constraints for IDs of the new assets. For example, by",
                " providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an",
                " auto-increment model can be applied to all new asset IDs.",
                "",
                " The initial next asset ID can be set using the [`GenesisConfig`] or the",
                " [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration."
              ]
            }
          ]
        },
        "calls": {
          "ty": 290
        },
        "event": {
          "ty": 70
        },
        "constants": [
          {
            "name": "RemoveItemsLimit",
            "ty": 4,
            "value": [
              232,
              3,
              0,
              0
            ],
            "docs": [
              " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
              "",
              " Must be configured to result in a weight that makes each call fit in a block."
            ]
          },
          {
            "name": "AssetDeposit",
            "ty": 6,
            "value": [
              0,
              0,
              232,
              137,
              4,
              35,
              199,
              138,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The basic amount of funds that must be reserved for an asset."
            ]
          },
          {
            "name": "AssetAccountDeposit",
            "ty": 6,
            "value": [
              0,
              32,
              127,
              213,
              196,
              144,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of funds that must be reserved for a non-provider asset account to be",
              " maintained."
            ]
          },
          {
            "name": "MetadataDepositBase",
            "ty": 6,
            "value": [
              0,
              192,
              241,
              35,
              221,
              153,
              3,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The basic amount of funds that must be reserved when adding metadata to your asset."
            ]
          },
          {
            "name": "MetadataDepositPerByte",
            "ty": 6,
            "value": [
              0,
              208,
              237,
              144,
              46,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The additional funds that must be reserved for the number of bytes you store in your",
              " metadata."
            ]
          },
          {
            "name": "ApprovalDeposit",
            "ty": 6,
            "value": [
              64,
              66,
              15,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of funds that must be reserved when creating a new approval."
            ]
          },
          {
            "name": "StringLimit",
            "ty": 4,
            "value": [
              50,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum length of a name or symbol stored on-chain."
            ]
          }
        ],
        "error": {
          "ty": 507
        },
        "index": 36
      },
      {
        "name": "PriceAggregator",
        "storage": {
          "prefix": "PriceAggregator",
          "entries": [
            {
              "name": "CurrentBlockValues",
              "modifier": "Default",
              "ty": {
                "Plain": 508
              },
              "default": [
                0
              ],
              "docs": [
                " Storage for the accumulated native currency price in the current block."
              ]
            },
            {
              "name": "IntermediateValueAggregator",
              "modifier": "Default",
              "ty": {
                "Plain": 510
              },
              "default": [
                0,
                0,
                0
              ],
              "docs": [
                " Used to store the aggregated processed block values during some time period."
              ]
            },
            {
              "name": "ValuesCircularBuffer",
              "modifier": "Default",
              "ty": {
                "Plain": 512
              },
              "default": [
                0,
                0
              ],
              "docs": [
                " Used to store aggregated intermediate values for some time period."
              ]
            }
          ]
        },
        "calls": null,
        "event": {
          "ty": 71
        },
        "constants": [
          {
            "name": "MaxValuesPerBlock",
            "ty": 4,
            "value": [
              8,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum number of distinct currency values we can store during a single block."
            ]
          },
          {
            "name": "CircularBufferLength",
            "ty": 4,
            "value": [
              7,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum length of the circular buffer used to calculate the moving average."
            ]
          },
          {
            "name": "AggregationDuration",
            "ty": 4,
            "value": [
              64,
              56,
              0,
              0
            ],
            "docs": [
              " Duration of aggregation period expressed in the number of blocks.",
              " During this time, currency values are aggregated, and are then used to calculate the average value."
            ]
          }
        ],
        "error": null,
        "index": 37
      },
      {
        "name": "Oracle",
        "storage": {
          "prefix": "Oracle",
          "entries": [
            {
              "name": "RawValues",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 514,
                  "value": 515
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Raw values for each oracle operators"
              ]
            },
            {
              "name": "Values",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 76,
                  "value": 515
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Up to date combined value from Raw Values"
              ]
            },
            {
              "name": "HasDispatched",
              "modifier": "Default",
              "ty": {
                "Plain": 516
              },
              "default": [
                0
              ],
              "docs": [
                " If an oracle operator has fed a value in this block"
              ]
            }
          ]
        },
        "calls": {
          "ty": 291
        },
        "event": {
          "ty": 73
        },
        "constants": [
          {
            "name": "RootOperatorAccountId",
            "ty": 0,
            "value": [
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255,
              255
            ],
            "docs": [
              " The root operator account id, record all sudo feeds on this account."
            ]
          },
          {
            "name": "MaxHasDispatchedSize",
            "ty": 4,
            "value": [
              8,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum size of HasDispatched"
            ]
          },
          {
            "name": "MaxFeedValues",
            "ty": 4,
            "value": [
              1,
              0,
              0,
              0
            ],
            "docs": [
              " Maximum size the vector used for feed values"
            ]
          }
        ],
        "error": {
          "ty": 518
        },
        "index": 38
      },
      {
        "name": "OracleMembership",
        "storage": {
          "prefix": "OracleMembership",
          "entries": [
            {
              "name": "Members",
              "modifier": "Default",
              "ty": {
                "Plain": 519
              },
              "default": [
                0
              ],
              "docs": [
                " The current membership, stored as an ordered Vec."
              ]
            },
            {
              "name": "Prime",
              "modifier": "Optional",
              "ty": {
                "Plain": 0
              },
              "default": [
                0
              ],
              "docs": [
                " The current prime member, if one exists."
              ]
            }
          ]
        },
        "calls": {
          "ty": 293
        },
        "event": {
          "ty": 77
        },
        "constants": [],
        "error": {
          "ty": 520
        },
        "index": 39
      },
      {
        "name": "Authorship",
        "storage": {
          "prefix": "Authorship",
          "entries": [
            {
              "name": "Author",
              "modifier": "Optional",
              "ty": {
                "Plain": 0
              },
              "default": [
                0
              ],
              "docs": [
                " Author of current block."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 40
      },
      {
        "name": "CollatorSelection",
        "storage": {
          "prefix": "CollatorSelection",
          "entries": [
            {
              "name": "Invulnerables",
              "modifier": "Default",
              "ty": {
                "Plain": 79
              },
              "default": [
                0
              ],
              "docs": [
                " The invulnerable, fixed collators."
              ]
            },
            {
              "name": "Candidates",
              "modifier": "Default",
              "ty": {
                "Plain": 521
              },
              "default": [
                0
              ],
              "docs": [
                " The (community, limited) collation candidates."
              ]
            },
            {
              "name": "NonCandidates",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 523
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Candidates who initiated leave intent or kicked."
              ]
            },
            {
              "name": "LastAuthoredBlock",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 4
                }
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Last block authored by collator."
              ]
            },
            {
              "name": "DesiredCandidates",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Desired number of candidates.",
                "",
                " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
              ]
            },
            {
              "name": "CandidacyBond",
              "modifier": "Default",
              "ty": {
                "Plain": 6
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Fixed amount to deposit to become a collator.",
                "",
                " When a collator calls `leave_intent` they immediately receive the deposit back."
              ]
            },
            {
              "name": "SlashDestination",
              "modifier": "Optional",
              "ty": {
                "Plain": 0
              },
              "default": [
                0
              ],
              "docs": [
                " Destination account for slashed amount."
              ]
            }
          ]
        },
        "calls": {
          "ty": 294
        },
        "event": {
          "ty": 78
        },
        "constants": [],
        "error": {
          "ty": 524
        },
        "index": 41
      },
      {
        "name": "Session",
        "storage": {
          "prefix": "Session",
          "entries": [
            {
              "name": "Validators",
              "modifier": "Default",
              "ty": {
                "Plain": 79
              },
              "default": [
                0
              ],
              "docs": [
                " The current set of validators."
              ]
            },
            {
              "name": "CurrentIndex",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Current index of the session."
              ]
            },
            {
              "name": "QueuedChanged",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " True if the underlying economic identities or weighting behind the validators",
                " has changed in the queued validator set."
              ]
            },
            {
              "name": "QueuedKeys",
              "modifier": "Default",
              "ty": {
                "Plain": 525
              },
              "default": [
                0
              ],
              "docs": [
                " The queued keys for the next session. When the next session begins, these keys",
                " will be used to determine the validator's session keys."
              ]
            },
            {
              "name": "DisabledValidators",
              "modifier": "Default",
              "ty": {
                "Plain": 527
              },
              "default": [
                0
              ],
              "docs": [
                " Indices of disabled validators.",
                "",
                " The vec is always kept sorted so that we can find whether a given validator is",
                " disabled using binary search. It gets cleared when `on_session_ending` returns",
                " a new set of identities."
              ]
            },
            {
              "name": "NextKeys",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 296
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The next session keys for a validator."
              ]
            },
            {
              "name": "KeyOwner",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 528,
                  "value": 0
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
              ]
            }
          ]
        },
        "calls": {
          "ty": 295
        },
        "event": {
          "ty": 80
        },
        "constants": [],
        "error": {
          "ty": 530
        },
        "index": 42
      },
      {
        "name": "Aura",
        "storage": {
          "prefix": "Aura",
          "entries": [
            {
              "name": "Authorities",
              "modifier": "Default",
              "ty": {
                "Plain": 531
              },
              "default": [
                0
              ],
              "docs": [
                " The current authority set."
              ]
            },
            {
              "name": "CurrentSlot",
              "modifier": "Default",
              "ty": {
                "Plain": 533
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The current slot of this block.",
                "",
                " This will be set in `on_initialize`."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [
          {
            "name": "SlotDuration",
            "ty": 12,
            "value": [
              112,
              23,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The slot duration Aura should run with, expressed in milliseconds.",
              " The effective value of this type should not change while the chain is running.",
              "",
              " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
            ]
          }
        ],
        "error": null,
        "index": 43
      },
      {
        "name": "AuraExt",
        "storage": {
          "prefix": "AuraExt",
          "entries": [
            {
              "name": "Authorities",
              "modifier": "Default",
              "ty": {
                "Plain": 531
              },
              "default": [
                0
              ],
              "docs": [
                " Serves as cache for the authorities.",
                "",
                " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
                " but we require the old authorities to verify the seal when validating a PoV. This will",
                " always be updated to the latest AuRa authorities in `on_finalize`."
              ]
            },
            {
              "name": "SlotInfo",
              "modifier": "Optional",
              "ty": {
                "Plain": 534
              },
              "default": [
                0
              ],
              "docs": [
                " Current slot paired with a number of authored blocks.",
                "",
                " Updated on each block initialization."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 44
      },
      {
        "name": "XcmpQueue",
        "storage": {
          "prefix": "XcmpQueue",
          "entries": [
            {
              "name": "InboundXcmpSuspended",
              "modifier": "Default",
              "ty": {
                "Plain": 535
              },
              "default": [
                0
              ],
              "docs": [
                " The suspended inbound XCMP channels. All others are not suspended.",
                "",
                " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block",
                " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached",
                " within the block and therefore only included once in the proof size.",
                "",
                " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof",
                " will be smaller."
              ]
            },
            {
              "name": "OutboundXcmpStatus",
              "modifier": "Default",
              "ty": {
                "Plain": 538
              },
              "default": [
                0
              ],
              "docs": [
                " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
                " and last outbound message. If the two indices are equal, then it indicates an empty",
                " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
                " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
                " case of the need to send a high-priority signal message this block.",
                " The bool is true if there is a signal message waiting to be sent."
              ]
            },
            {
              "name": "OutboundXcmpMessages",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat",
                    "Twox64Concat"
                  ],
                  "key": 542,
                  "value": 543
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The messages outbound in a given XCMP channel."
              ]
            },
            {
              "name": "SignalMessages",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 174,
                  "value": 543
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Any signal messages waiting to be sent."
              ]
            },
            {
              "name": "QueueConfig",
              "modifier": "Default",
              "ty": {
                "Plain": 544
              },
              "default": [
                32,
                0,
                0,
                0,
                48,
                0,
                0,
                0,
                8,
                0,
                0,
                0
              ],
              "docs": [
                " The configuration which controls the dynamics of the outbound queue."
              ]
            },
            {
              "name": "QueueSuspended",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
              ]
            },
            {
              "name": "DeliveryFeeFactor",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 174,
                  "value": 72
                }
              },
              "default": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The factor to multiply the base delivery fee by."
              ]
            }
          ]
        },
        "calls": {
          "ty": 298
        },
        "event": {
          "ty": 81
        },
        "constants": [
          {
            "name": "MaxInboundSuspended",
            "ty": 4,
            "value": [
              232,
              3,
              0,
              0
            ],
            "docs": [
              " The maximum number of inbound XCMP channels that can be suspended simultaneously.",
              "",
              " Any further channel suspensions will fail and messages may get dropped without further",
              " notice. Choosing a high value (1000) is okay; the trade-off that is described in",
              " [`InboundXcmpSuspended`] still applies at that scale."
            ]
          },
          {
            "name": "MaxActiveOutboundChannels",
            "ty": 4,
            "value": [
              128,
              0,
              0,
              0
            ],
            "docs": [
              " Maximal number of outbound XCMP channels that can have messages queued at the same time.",
              "",
              " If this is reached, then no further messages can be sent to channels that do not yet",
              " have a message queued. This should be set to the expected maximum of outbound channels",
              " which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,",
              " since otherwise the congestion control protocol will not work as intended and messages",
              " may be dropped. This value increases the PoV and should therefore not be picked too",
              " high. Governance needs to pay attention to not open more channels than this value."
            ]
          },
          {
            "name": "MaxPageSize",
            "ty": 4,
            "value": [
              0,
              0,
              2,
              0
            ],
            "docs": [
              " The maximal page size for HRMP message pages.",
              "",
              " A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case",
              " benchmarking. The limit for the size of a message is slightly below this, since some",
              " overhead is incurred for encoding the format."
            ]
          }
        ],
        "error": {
          "ty": 545
        },
        "index": 50
      },
      {
        "name": "PolkadotXcm",
        "storage": {
          "prefix": "PolkadotXcm",
          "entries": [
            {
              "name": "QueryCounter",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The latest available query index."
              ]
            },
            {
              "name": "Queries",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 12,
                  "value": 546
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The ongoing queries."
              ]
            },
            {
              "name": "AssetTraps",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 13,
                  "value": 4
                }
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The existing asset traps.",
                "",
                " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
                " times this pair has been trapped (usually just 1 if it exists at all)."
              ]
            },
            {
              "name": "SafeXcmVersion",
              "modifier": "Optional",
              "ty": {
                "Plain": 4
              },
              "default": [
                0
              ],
              "docs": [
                " Default version to encode XCM when latest version of destination is unknown. If `None`,",
                " then the destinations whose XCM version is unknown are considered unreachable."
              ]
            },
            {
              "name": "SupportedVersion",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 551,
                  "value": 4
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The Latest versions that we know various locations support."
              ]
            },
            {
              "name": "VersionNotifiers",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 551,
                  "value": 12
                }
              },
              "default": [
                0
              ],
              "docs": [
                " All locations that we have requested version notifications from."
              ]
            },
            {
              "name": "VersionNotifyTargets",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 551,
                  "value": 552
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The target locations that are subscribed to our version changes, as well as the most recent",
                " of our versions we informed them of."
              ]
            },
            {
              "name": "VersionDiscoveryQueue",
              "modifier": "Default",
              "ty": {
                "Plain": 553
              },
              "default": [
                0
              ],
              "docs": [
                " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
                " the `u32` counter is the number of times that a send to the destination has been attempted,",
                " which is used as a prioritization."
              ]
            },
            {
              "name": "CurrentMigration",
              "modifier": "Optional",
              "ty": {
                "Plain": 556
              },
              "default": [
                0
              ],
              "docs": [
                " The current migration's stage, if any."
              ]
            },
            {
              "name": "RemoteLockedFungibles",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Blake2_128Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 557,
                  "value": 558
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Fungible assets which we know are locked on a remote chain."
              ]
            },
            {
              "name": "LockedFungibles",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 0,
                  "value": 562
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Fungible assets which we know are locked on this chain."
              ]
            },
            {
              "name": "XcmExecutionSuspended",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Global suspension state of the XCM executor."
              ]
            },
            {
              "name": "ShouldRecordXcm",
              "modifier": "Default",
              "ty": {
                "Plain": 8
              },
              "default": [
                0
              ],
              "docs": [
                " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
                " Only one XCM program will be recorded at a time.",
                " This is meant to be used in runtime APIs, and it's advised it stays false",
                " for all other use cases, so as to not degrade regular performance.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            },
            {
              "name": "RecordedXcm",
              "modifier": "Optional",
              "ty": {
                "Plain": 100
              },
              "default": [
                0
              ],
              "docs": [
                " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
                " will be stored here.",
                " Runtime APIs can fetch the XCM that was executed by accessing this value.",
                "",
                " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
                " implementation in the XCM executor configuration."
              ]
            }
          ]
        },
        "calls": {
          "ty": 299
        },
        "event": {
          "ty": 82
        },
        "constants": [],
        "error": {
          "ty": 565
        },
        "index": 51
      },
      {
        "name": "CumulusXcm",
        "storage": null,
        "calls": {
          "ty": 344
        },
        "event": {
          "ty": 169
        },
        "constants": [],
        "error": null,
        "index": 52
      },
      {
        "name": "XcAssetConfig",
        "storage": {
          "prefix": "XcAssetConfig",
          "entries": [
            {
              "name": "AssetIdToLocation",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 6,
                  "value": 168
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Mapping from an asset id to asset type.",
                " Can be used when receiving transaction specifying an asset directly,",
                " like transferring an asset from this chain to another."
              ]
            },
            {
              "name": "AssetLocationToId",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 168,
                  "value": 6
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Mapping from an asset type to an asset id.",
                " Can be used when receiving a multilocation XCM message to retrieve",
                " the corresponding asset in which tokens should me minted."
              ]
            },
            {
              "name": "AssetLocationUnitsPerSecond",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 168,
                  "value": 6
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Stores the units per second for local execution for a AssetLocation.",
                " This is used to know how to charge for XCM execution in a particular asset.",
                "",
                " Not all asset types are supported for payment. If value exists here, it means it is supported."
              ]
            }
          ]
        },
        "calls": {
          "ty": 345
        },
        "event": {
          "ty": 170
        },
        "constants": [],
        "error": {
          "ty": 566
        },
        "index": 54
      },
      {
        "name": "XTokens",
        "storage": null,
        "calls": {
          "ty": 346
        },
        "event": {
          "ty": 171
        },
        "constants": [
          {
            "name": "SelfLocation",
            "ty": 85,
            "value": [
              0,
              0
            ],
            "docs": [
              " Self chain location."
            ]
          },
          {
            "name": "BaseXcmWeight",
            "ty": 10,
            "value": [
              2,
              40,
              107,
              238,
              1,
              64
            ],
            "docs": [
              " Base XCM weight.",
              "",
              " The actually weight for an XCM message is `T::BaseXcmWeight +",
              " T::Weigher::weight(&msg)`."
            ]
          },
          {
            "name": "RateLimiterId",
            "ty": 34,
            "value": [],
            "docs": [
              " The id of the RateLimiter."
            ]
          }
        ],
        "error": {
          "ty": 567
        },
        "index": 55
      },
      {
        "name": "MessageQueue",
        "storage": {
          "prefix": "MessageQueue",
          "entries": [
            {
              "name": "BookStateFor",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 173,
                  "value": 568
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The index of the first and last (non-empty) pages."
              ]
            },
            {
              "name": "ServiceHead",
              "modifier": "Optional",
              "ty": {
                "Plain": 173
              },
              "default": [
                0
              ],
              "docs": [
                " The origin at which we should begin servicing."
              ]
            },
            {
              "name": "Pages",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat",
                    "Twox64Concat"
                  ],
                  "key": 571,
                  "value": 572
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The map of page indices to pages."
              ]
            }
          ]
        },
        "calls": {
          "ty": 350
        },
        "event": {
          "ty": 172
        },
        "constants": [
          {
            "name": "HeapSize",
            "ty": 4,
            "value": [
              0,
              12,
              2,
              0
            ],
            "docs": [
              " The size of the page; this implies the maximum message size which can be sent.",
              "",
              " A good value depends on the expected message sizes, their weights, the weight that is",
              " available for processing them and the maximal needed message size. The maximal message",
              " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
            ]
          },
          {
            "name": "MaxStale",
            "ty": 4,
            "value": [
              8,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
              " can happen. Once there are more stale pages than this, then historical pages may be",
              " dropped, even if they contain unprocessed overweight messages."
            ]
          },
          {
            "name": "ServiceWeight",
            "ty": 122,
            "value": [
              1,
              7,
              0,
              136,
              82,
              106,
              116,
              2,
              0,
              80,
              0
            ],
            "docs": [
              " The amount of weight (if any) which should be provided to the message queue for",
              " servicing enqueued items `on_initialize`.",
              "",
              " This may be legitimately `None` in the case that you will call",
              " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
              " it run in `on_idle`."
            ]
          },
          {
            "name": "IdleMaxServiceWeight",
            "ty": 122,
            "value": [
              1,
              7,
              0,
              136,
              82,
              106,
              116,
              2,
              0,
              80,
              0
            ],
            "docs": [
              " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
              " should be provided to the message queue for servicing enqueued items `on_idle`.",
              " Useful for parachains to process messages at the same block they are received.",
              "",
              " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
            ]
          }
        ],
        "error": {
          "ty": 574
        },
        "index": 56
      },
      {
        "name": "EVM",
        "storage": {
          "prefix": "EVM",
          "entries": [
            {
              "name": "AccountCodes",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 57,
                  "value": 14
                }
              },
              "default": [
                0
              ],
              "docs": []
            },
            {
              "name": "AccountCodesMetadata",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat"
                  ],
                  "key": 57,
                  "value": 575
                }
              },
              "default": [
                0
              ],
              "docs": []
            },
            {
              "name": "AccountStorages",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Blake2_128Concat",
                    "Blake2_128Concat"
                  ],
                  "key": 576,
                  "value": 13
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            }
          ]
        },
        "calls": {
          "ty": 351
        },
        "event": {
          "ty": 176
        },
        "constants": [],
        "error": {
          "ty": 577
        },
        "index": 60
      },
      {
        "name": "Ethereum",
        "storage": {
          "prefix": "Ethereum",
          "entries": [
            {
              "name": "Pending",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 4,
                  "value": 578
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Mapping from transaction index to transaction in the current building block."
              ]
            },
            {
              "name": "CounterForPending",
              "modifier": "Default",
              "ty": {
                "Plain": 4
              },
              "default": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                "Counter for the related counted storage map"
              ]
            },
            {
              "name": "CurrentBlock",
              "modifier": "Optional",
              "ty": {
                "Plain": 586
              },
              "default": [
                0
              ],
              "docs": [
                " The current Ethereum block."
              ]
            },
            {
              "name": "CurrentReceipts",
              "modifier": "Optional",
              "ty": {
                "Plain": 591
              },
              "default": [
                0
              ],
              "docs": [
                " The current Ethereum receipts."
              ]
            },
            {
              "name": "CurrentTransactionStatuses",
              "modifier": "Optional",
              "ty": {
                "Plain": 592
              },
              "default": [
                0
              ],
              "docs": [
                " The current transaction statuses."
              ]
            },
            {
              "name": "BlockHash",
              "modifier": "Default",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 189,
                  "value": 13
                }
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            }
          ]
        },
        "calls": {
          "ty": 355
        },
        "event": {
          "ty": 179
        },
        "constants": [],
        "error": {
          "ty": 593
        },
        "index": 61
      },
      {
        "name": "DynamicEvmBaseFee",
        "storage": {
          "prefix": "DynamicEvmBaseFee",
          "entries": [
            {
              "name": "BaseFeePerGas",
              "modifier": "Default",
              "ty": {
                "Plain": 189
              },
              "default": [
                0,
                51,
                48,
                108,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": []
            }
          ]
        },
        "calls": {
          "ty": 365
        },
        "event": {
          "ty": 188
        },
        "constants": [],
        "error": {
          "ty": 594
        },
        "index": 63
      },
      {
        "name": "Contracts",
        "storage": {
          "prefix": "Contracts",
          "entries": [
            {
              "name": "PristineCode",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 13,
                  "value": 595
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A mapping from a contract's code hash to its code."
              ]
            },
            {
              "name": "CodeInfoOf",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Identity"
                  ],
                  "key": 13,
                  "value": 596
                }
              },
              "default": [
                0
              ],
              "docs": [
                " A mapping from a contract's code hash to its code info."
              ]
            },
            {
              "name": "Nonce",
              "modifier": "Default",
              "ty": {
                "Plain": 12
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " This is a **monotonic** counter incremented on contract instantiation.",
                "",
                " This is used in order to generate unique trie ids for contracts.",
                " The trie id of a new contract is calculated from hash(account_id, nonce).",
                " The nonce is required because otherwise the following sequence would lead to",
                " a possible collision of storage:",
                "",
                " 1. Create a new contract.",
                " 2. Terminate the contract.",
                " 3. Immediately recreate the contract with the same account_id.",
                "",
                " This is bad because the contents of a trie are deleted lazily and there might be",
                " storage of the old instantiation still in it when the new contract is created. Please",
                " note that we can't replace the counter by the block number because the sequence above",
                " can happen in the same block. We also can't keep the account counter in memory only",
                " because storage is the only way to communicate across different extrinsics in the",
                " same block.",
                "",
                " # Note",
                "",
                " Do not use it to determine the number of contracts. It won't be decremented if",
                " a contract is destroyed."
              ]
            },
            {
              "name": "ContractInfoOf",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 0,
                  "value": 597
                }
              },
              "default": [
                0
              ],
              "docs": [
                " The code associated with a given account.",
                "",
                " TWOX-NOTE: SAFE since `AccountId` is a secure hash."
              ]
            },
            {
              "name": "DeletionQueue",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 4,
                  "value": 598
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Evicted contracts that await child trie deletion.",
                "",
                " Child trie deletion is a heavy operation depending on the amount of storage items",
                " stored in said trie. Therefore this operation is performed lazily in `on_idle`."
              ]
            },
            {
              "name": "DeletionQueueCounter",
              "modifier": "Default",
              "ty": {
                "Plain": 603
              },
              "default": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " A pair of monotonic counters used to track the latest contract marked for deletion",
                " and the latest deleted contract in queue."
              ]
            },
            {
              "name": "MigrationInProgress",
              "modifier": "Optional",
              "ty": {
                "Plain": 604
              },
              "default": [
                0
              ],
              "docs": [
                " A migration can span across multiple blocks. This storage defines a cursor to track the",
                " progress of the migration, enabling us to resume from the last completed position."
              ]
            }
          ]
        },
        "calls": {
          "ty": 366
        },
        "event": {
          "ty": 191
        },
        "constants": [
          {
            "name": "Schedule",
            "ty": 605,
            "value": [
              4,
              0,
              0,
              0,
              16,
              0,
              0,
              0,
              32,
              0,
              0,
              0,
              0,
              64,
              0,
              0,
              0,
              0,
              0,
              8,
              0,
              0,
              0,
              32,
              96,
              234,
              0,
              0,
              0,
              0,
              0,
              0,
              229,
              4,
              0,
              0
            ],
            "docs": [
              " Cost schedule and limits."
            ]
          },
          {
            "name": "DepositPerByte",
            "ty": 6,
            "value": [
              0,
              208,
              237,
              144,
              46,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of balance a caller has to pay for each byte of storage.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "name": "DefaultDepositLimit",
            "ty": 6,
            "value": [
              0,
              0,
              168,
              16,
              79,
              234,
              13,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " Fallback value to limit the storage deposit if it's not being set by the caller."
            ]
          },
          {
            "name": "DepositPerItem",
            "ty": 6,
            "value": [
              0,
              128,
              202,
              57,
              97,
              36,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0
            ],
            "docs": [
              " The amount of balance a caller has to pay for each storage item.",
              "",
              " # Note",
              "",
              " Changing this value for an existing chain might need a storage migration."
            ]
          },
          {
            "name": "CodeHashLockupDepositPercent",
            "ty": 67,
            "value": [
              0,
              225,
              245,
              5
            ],
            "docs": [
              " The percentage of the storage deposit that should be held for using a code hash.",
              " Instantiating a contract, or calling [`chain_extension::Ext::lock_delegate_dependency`]",
              " protects the code from being removed. In order to prevent abuse these actions are",
              " protected with a percentage of the code deposit."
            ]
          },
          {
            "name": "MaxCodeLen",
            "ty": 4,
            "value": [
              0,
              236,
              1,
              0
            ],
            "docs": [
              " The maximum length of a contract code in bytes.",
              "",
              " The value should be chosen carefully taking into the account the overall memory limit",
              " your runtime has, as well as the [maximum allowed callstack",
              " depth](#associatedtype.CallStack). Look into the `integrity_test()` for some insights."
            ]
          },
          {
            "name": "MaxStorageKeyLen",
            "ty": 4,
            "value": [
              128,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum allowable length in bytes for storage keys."
            ]
          },
          {
            "name": "MaxTransientStorageSize",
            "ty": 4,
            "value": [
              0,
              0,
              16,
              0
            ],
            "docs": [
              " The maximum size of the transient storage in bytes.",
              " This includes keys, values, and previous entries used for storage rollback."
            ]
          },
          {
            "name": "MaxDelegateDependencies",
            "ty": 4,
            "value": [
              32,
              0,
              0,
              0
            ],
            "docs": [
              " The maximum number of delegate_dependencies that a contract can lock with",
              " [`chain_extension::Ext::lock_delegate_dependency`]."
            ]
          },
          {
            "name": "UnsafeUnstableInterface",
            "ty": 8,
            "value": [
              0
            ],
            "docs": [
              " Make contract callable functions marked as `#[unstable]` available.",
              "",
              " Contracts that use `#[unstable]` functions won't be able to be uploaded unless",
              " this is set to `true`. This is only meant for testnets and dev nodes in order to",
              " experiment with new features.",
              "",
              " # Warning",
              "",
              " Do **not** set to `true` on productions chains."
            ]
          },
          {
            "name": "MaxDebugBufferLen",
            "ty": 4,
            "value": [
              0,
              0,
              32,
              0
            ],
            "docs": [
              " The maximum length of the debug buffer in bytes."
            ]
          },
          {
            "name": "Environment",
            "ty": 608,
            "value": [],
            "docs": [
              " Type that bundles together all the runtime configurable interface types.",
              "",
              " This is not a real config. We just mention the type here as constant so that",
              " its type appears in the metadata. Only valid value is `()`."
            ]
          },
          {
            "name": "ApiVersion",
            "ty": 616,
            "value": [
              4,
              0
            ],
            "docs": [
              " The version of the HostFn APIs that are available in the runtime.",
              "",
              " Only valid value is `()`."
            ]
          }
        ],
        "error": {
          "ty": 617
        },
        "index": 70
      },
      {
        "name": "RandomnessCollectiveFlip",
        "storage": {
          "prefix": "RandomnessCollectiveFlip",
          "entries": [
            {
              "name": "RandomMaterial",
              "modifier": "Default",
              "ty": {
                "Plain": 618
              },
              "default": [
                0
              ],
              "docs": [
                " Series of block headers from the last 81 blocks that acts as random seed material. This",
                " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                " the oldest hash."
              ]
            }
          ]
        },
        "calls": null,
        "event": null,
        "constants": [],
        "error": null,
        "index": 71
      },
      {
        "name": "Sudo",
        "storage": {
          "prefix": "Sudo",
          "entries": [
            {
              "name": "Key",
              "modifier": "Optional",
              "ty": {
                "Plain": 0
              },
              "default": [
                0
              ],
              "docs": [
                " The `AccountId` of the sudo key."
              ]
            }
          ]
        },
        "calls": {
          "ty": 369
        },
        "event": {
          "ty": 194
        },
        "constants": [],
        "error": {
          "ty": 619
        },
        "index": 99
      },
      {
        "name": "MultiBlockMigrations",
        "storage": {
          "prefix": "MultiBlockMigrations",
          "entries": [
            {
              "name": "Cursor",
              "modifier": "Optional",
              "ty": {
                "Plain": 372
              },
              "default": [
                0
              ],
              "docs": [
                " The currently active migration to run and its cursor.",
                "",
                " `None` indicates that no migration is running."
              ]
            },
            {
              "name": "Historic",
              "modifier": "Optional",
              "ty": {
                "Map": {
                  "hashers": [
                    "Twox64Concat"
                  ],
                  "key": 377,
                  "value": 34
                }
              },
              "default": [
                0
              ],
              "docs": [
                " Set of all successfully executed migrations.",
                "",
                " This is used as blacklist, to not re-execute migrations that have not been removed from the",
                " codebase yet. Governance can regularly clear this out via `clear_historic`."
              ]
            }
          ]
        },
        "calls": {
          "ty": 370
        },
        "event": {
          "ty": 195
        },
        "constants": [
          {
            "name": "CursorMaxLen",
            "ty": 4,
            "value": [
              0,
              0,
              1,
              0
            ],
            "docs": [
              " The maximal length of an encoded cursor.",
              "",
              " A good default needs to selected such that no migration will ever have a cursor with MEL",
              " above this limit. This is statically checked in `integrity_test`."
            ]
          },
          {
            "name": "IdentifierMaxLen",
            "ty": 4,
            "value": [
              0,
              1,
              0,
              0
            ],
            "docs": [
              " The maximal length of an encoded identifier.",
              "",
              " A good default needs to selected such that no migration will ever have an identifier",
              " with MEL above this limit. This is statically checked in `integrity_test`."
            ]
          }
        ],
        "error": {
          "ty": 620
        },
        "index": 120
      }
    ],
    "extrinsic": {
      "ty": 621,
      "version": 4,
      "signed_extensions": [
        {
          "identifier": "CheckSpecVersion",
          "ty": 623,
          "additional_signed": 4
        },
        {
          "identifier": "CheckTxVersion",
          "ty": 624,
          "additional_signed": 4
        },
        {
          "identifier": "CheckGenesis",
          "ty": 625,
          "additional_signed": 13
        },
        {
          "identifier": "CheckMortality",
          "ty": 626,
          "additional_signed": 13
        },
        {
          "identifier": "CheckNonce",
          "ty": 628,
          "additional_signed": 34
        },
        {
          "identifier": "CheckWeight",
          "ty": 629,
          "additional_signed": 34
        },
        {
          "identifier": "ChargeTransactionPayment",
          "ty": 630,
          "additional_signed": 34
        },
        {
          "identifier": "CheckMetadataHash",
          "ty": 631,
          "additional_signed": 43
        }
      ]
    },
    "ty": 193
  }
}
